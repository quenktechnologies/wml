'use strict';

var Compiler = require('./parser/Compiler');
var through = require('through');
var babel = require('babel-core');

var compiler = new Compiler();

function transform(file) {

    var data = '';

    function write(buf) {
        data += buf;
    }

    function end() {

        var js;

        try {
            js = compiler.compile(data);
        } catch (e) {
            console.error(e);
            throw e;
        }

        this.queue(babel.transform(js, {
            sourceMaps: true,
            presets: ['es2015'],
            plugins: ['add-module-exports'],
            highlightCode: false
        }).code);

        this.queue(null);
    }

    if (!/\.wml$/.test(file)) return through();
    return through(write, end);
}

module.exports = transform;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90cmFuc2Zvcm0uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUM1QyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDOztBQUVsQyxJQUFJLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDOztBQUU5QixTQUFTLFNBQVMsQ0FBQyxJQUFJLEVBQUU7O0FBRXJCLFFBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQzs7QUFFZCxhQUFTLEtBQUssQ0FBQyxHQUFHLEVBQUU7QUFDaEIsWUFBSSxJQUFJLEdBQUcsQ0FBQztLQUNmOztBQUVELGFBQVMsR0FBRyxHQUFHOztBQUVYLFlBQUksRUFBRSxDQUFDOztBQUVQLFlBQUk7QUFDQSxjQUFFLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMvQixDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ1IsbUJBQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsa0JBQU0sQ0FBQyxDQUFDO1NBQ1g7O0FBRUQsWUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRTtBQUMzQixzQkFBVSxFQUFFLElBQUk7QUFDaEIsbUJBQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUNuQixtQkFBTyxFQUFFLENBQUMsb0JBQW9CLENBQUM7QUFDL0IseUJBQWEsRUFBRSxLQUFLO1NBQ3ZCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFVCxZQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBRXBCOztBQUVELFFBQUksQ0FBQyxBQUFDLFFBQVEsQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxPQUFPLEVBQUUsQ0FBQztBQUM3QyxXQUFPLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FFOUI7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMiLCJmaWxlIjoidHJhbnNmb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIENvbXBpbGVyID0gcmVxdWlyZSgnLi9wYXJzZXIvQ29tcGlsZXInKTtcbnZhciB0aHJvdWdoID0gcmVxdWlyZSgndGhyb3VnaCcpO1xudmFyIGJhYmVsID0gcmVxdWlyZSgnYmFiZWwtY29yZScpO1xuXG52YXIgY29tcGlsZXIgPSBuZXcgQ29tcGlsZXIoKTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtKGZpbGUpIHtcblxuICAgIHZhciBkYXRhID0gJyc7XG5cbiAgICBmdW5jdGlvbiB3cml0ZShidWYpIHtcbiAgICAgICAgZGF0YSArPSBidWY7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kKCkge1xuXG4gICAgICAgIHZhciBqcztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAganMgPSBjb21waWxlci5jb21waWxlKGRhdGEpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucXVldWUoYmFiZWwudHJhbnNmb3JtKGpzLCB7XG4gICAgICAgICAgICBzb3VyY2VNYXBzOiB0cnVlLFxuICAgICAgICAgICAgcHJlc2V0czogWydlczIwMTUnXSxcbiAgICAgICAgICAgIHBsdWdpbnM6IFsnYWRkLW1vZHVsZS1leHBvcnRzJ10sXG4gICAgICAgICAgICBoaWdobGlnaHRDb2RlOiBmYWxzZVxuICAgICAgICB9KS5jb2RlKTtcblxuICAgICAgICB0aGlzLnF1ZXVlKG51bGwpO1xuXG4gICAgfVxuXG4gICAgaWYgKCEoL1xcLndtbCQvKS50ZXN0KGZpbGUpKSByZXR1cm4gdGhyb3VnaCgpO1xuICAgIHJldHVybiB0aHJvdWdoKHdyaXRlLCBlbmQpO1xuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhbnNmb3JtO1xuIl19