'use strict';

var compile = require('./');
var through = require('through');
var babel = require('babel-core');

function transform(file) {

  var data = '';

  function write(buf) {
    data += buf;
  }

  function end() {

    var js;

    try {
      js = compile(data);
    } catch (e) {
      console.error('An error occurred while parsing ' + file + '!');
      console.error(e.stack ? e.stack : e);
      throw e;
    }

    this.queue(babel.transform(js, {
      sourceMaps: true,
      presets: ['es2015'],
      plugins: ['transform-export-extensions'],
      highlightCode: false
    }).code);

    this.queue(null);
  }

  if (!/\.wml$/.test(file)) return through();
  return through(write, end);
}

module.exports = transform;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90cmFuc2Zvcm0uanMiXSwibmFtZXMiOlsiY29tcGlsZSIsInJlcXVpcmUiLCJ0aHJvdWdoIiwiYmFiZWwiLCJ0cmFuc2Zvcm0iLCJmaWxlIiwiZGF0YSIsIndyaXRlIiwiYnVmIiwiZW5kIiwianMiLCJlIiwiY29uc29sZSIsImVycm9yIiwic3RhY2siLCJxdWV1ZSIsInNvdXJjZU1hcHMiLCJwcmVzZXRzIiwicGx1Z2lucyIsImhpZ2hsaWdodENvZGUiLCJjb2RlIiwidGVzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsVUFBVUMsUUFBUSxJQUFSLENBQWQ7QUFDQSxJQUFJQyxVQUFVRCxRQUFRLFNBQVIsQ0FBZDtBQUNBLElBQUlFLFFBQVFGLFFBQVEsWUFBUixDQUFaOztBQUVBLFNBQVNHLFNBQVQsQ0FBbUJDLElBQW5CLEVBQXlCOztBQUV2QixNQUFJQyxPQUFPLEVBQVg7O0FBRUEsV0FBU0MsS0FBVCxDQUFlQyxHQUFmLEVBQW9CO0FBQ2xCRixZQUFRRSxHQUFSO0FBQ0Q7O0FBRUQsV0FBU0MsR0FBVCxHQUFlOztBQUViLFFBQUlDLEVBQUo7O0FBRUEsUUFBSTtBQUNGQSxXQUFLVixRQUFRTSxJQUFSLENBQUw7QUFDRCxLQUZELENBRUUsT0FBT0ssQ0FBUCxFQUFVO0FBQ1ZDLGNBQVFDLEtBQVIsQ0FBYyxxQ0FBcUNSLElBQXJDLEdBQTRDLEdBQTFEO0FBQ0FPLGNBQVFDLEtBQVIsQ0FBY0YsRUFBRUcsS0FBRixHQUFVSCxFQUFFRyxLQUFaLEdBQW9CSCxDQUFsQztBQUNBLFlBQU1BLENBQU47QUFDRDs7QUFFRCxTQUFLSSxLQUFMLENBQVdaLE1BQU1DLFNBQU4sQ0FBZ0JNLEVBQWhCLEVBQW9CO0FBQzdCTSxrQkFBWSxJQURpQjtBQUU3QkMsZUFBUyxDQUFDLFFBQUQsQ0FGb0I7QUFHN0JDLGVBQVMsQ0FBQyw2QkFBRCxDQUhvQjtBQUk3QkMscUJBQWU7QUFKYyxLQUFwQixFQUtSQyxJQUxIOztBQU9BLFNBQUtMLEtBQUwsQ0FBVyxJQUFYO0FBRUQ7O0FBRUQsTUFBSSxDQUFFLFFBQUQsQ0FBV00sSUFBWCxDQUFnQmhCLElBQWhCLENBQUwsRUFBNEIsT0FBT0gsU0FBUDtBQUM1QixTQUFPQSxRQUFRSyxLQUFSLEVBQWVFLEdBQWYsQ0FBUDtBQUVEOztBQUVEYSxPQUFPQyxPQUFQLEdBQWlCbkIsU0FBakIiLCJmaWxlIjoidHJhbnNmb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbXBpbGUgPSByZXF1aXJlKCcuLycpO1xudmFyIHRocm91Z2ggPSByZXF1aXJlKCd0aHJvdWdoJyk7XG52YXIgYmFiZWwgPSByZXF1aXJlKCdiYWJlbC1jb3JlJyk7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybShmaWxlKSB7XG5cbiAgdmFyIGRhdGEgPSAnJztcblxuICBmdW5jdGlvbiB3cml0ZShidWYpIHtcbiAgICBkYXRhICs9IGJ1ZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZCgpIHtcblxuICAgIHZhciBqcztcblxuICAgIHRyeSB7XG4gICAgICBqcyA9IGNvbXBpbGUoZGF0YSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcignQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcGFyc2luZyAnICsgZmlsZSArICchJyk7XG4gICAgICBjb25zb2xlLmVycm9yKGUuc3RhY2sgPyBlLnN0YWNrIDogZSk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cblxuICAgIHRoaXMucXVldWUoYmFiZWwudHJhbnNmb3JtKGpzLCB7XG4gICAgICBzb3VyY2VNYXBzOiB0cnVlLFxuICAgICAgcHJlc2V0czogWydlczIwMTUnXSxcbiAgICAgIHBsdWdpbnM6IFsndHJhbnNmb3JtLWV4cG9ydC1leHRlbnNpb25zJ10sXG4gICAgICBoaWdobGlnaHRDb2RlOiBmYWxzZVxuICAgIH0pLmNvZGUpO1xuXG4gICAgdGhpcy5xdWV1ZShudWxsKTtcblxuICB9XG5cbiAgaWYgKCEoL1xcLndtbCQvKS50ZXN0KGZpbGUpKSByZXR1cm4gdGhyb3VnaCgpO1xuICByZXR1cm4gdGhyb3VnaCh3cml0ZSwgZW5kKTtcblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyYW5zZm9ybTtcblxuIl19