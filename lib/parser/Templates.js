'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/* The property-seek module literally copied and pasted here for conveinence. */

var _ts = function _ts(o, txt) {
  var dtxt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  return o.typescript ? txt : dtxt;
};

var _typescriptProperties = function _typescriptProperties() {
  return '\n  ids: {[key:string]: WMLElement};\n  widgets: Widget[];\n  tree: HTMLElement;\n  context: object;\n  template: ()=>HTMLElement;\n';
};

var _view = function _view() {
  return '\n\nexport interface View {\n\n render(): HTMLElement;\n findById(id:string): WMLElement;\n\n}';
};

var _widget = function _widget() {
  return '\nexport interface Widget {\n\n  rendered(): void;\n  removed(): void;\n  render(): HTMLElement;\n\n}';
};

var _element = function _element() {
  return 'export type WMLElement = HTMLElement | Node | EventTarget | Widget';
};

var preamble = exports.preamble = function preamble(o) {
  return '\n\nfunction $$boundary_to_dot(value) {\n  return value.split(\'][\').join(\'.\').split(\'[\').join(\'.\');\n}\n\nfunction $$strip_braces(value) {\n  return value.split(\'[\').join(\'.\').split(\']\').join(\'\');\n}\n\nfunction $$escape_dots(value) {\n  value = value.split(\'\\\'\');\n  return (value.length < 3) ? value.join(\'\\\'\') : value.map(function(seg) {\n    if (seg.length < 3) return seg;\n    if ((seg[0] === \'.\') || (seg[seg.length - 1] === \'.\')) return seg;\n    return seg.split(\'.\').join(\'&&\');\n  }).join(\'\');\n}\n\nfunction $$unescape_dots(value) {\n  return value.split(\'&&\').join(\'.\');\n}\n\nfunction $$partify(value) {\n  if (!value) return;\n  return $$escape_dots($$strip_braces($$boundary_to_dot(\'\' + value))).split(\'.\');\n}\n\nfunction $$property(path, o) {\n\n  var parts = $$partify(path);\n  var first;\n\n  if (typeof o !== \'object\')\n    throw new TypeError(\'get(): expects an object got \' + typeof o);\n\n  if (parts.length === 1) return o[$$unescape_dots(parts[0])];\n  if (parts.length === 0) return;\n\n  first = o[parts.shift()];\n\n  return ((typeof o === \'object\') && (o !== null)) ?\n\n    parts.reduce(function(target, prop) {\n      if (target == null) return target;\n      return target[$$unescape_dots(prop)];\n    }, first) : null;\n}\n\nfunction $$adopt(child, e) {\n\n    if (Array.isArray(child))\n      return child.forEach(innerChild => $$adopt(innerChild, e));\n\n    if (child)\n      e.appendChild(\n        (typeof child === \'object\') ?\n        child : document.createTextNode(child == null? \'\' : child));\n\n}\n\n/**\n * $$text creates a DOMTextNode\n * @param {string} value\n */\nfunction $$text(value) {\n\n  return document.createTextNode(value == null ?  \'\' : value);\n\n}\n\n/**\n * $$resolve property access expression to avoid\n * thowing errors if it does not exist.\n * @param {object} head\n * @param {string} path\n */\nfunction $$resolve(head, path) {\n\n    if((head == null) || head == \'\')\n        return \'\';\n\n  var ret = $$property(path, head);\n\n  return (ret == null) ? \'\' : ret;\n\n}\n\n/**\n * $$node is called to create a regular DOM node\n * @param {string} tag\n * @param {object} attributes\n * @param {array<string|number|Widget>} children\n * @param {View} view\n */\nfunction $$node(tag, attributes, children, view) {\n\n  var e = (tag === \'fragment\') ? document.createDocumentFragment() : document.createElement(tag);\n\n  if (typeof attributes.html === \'object\')\n    Object.keys(attributes.html).forEach(key => {\n\n      if (typeof attributes.html[key] === \'function\') {\n        e[key] = attributes.html[key];\n      } else {\n        e.setAttribute(key, attributes.html[key]);\n      }\n    });\n\n  children.forEach(c => $$adopt(c, e));\n\n  if (attributes.wml)\n    if (attributes.wml.id)\n      view.register(attributes.wml.id, e);\n\n  return e;\n\n}\n\n/**\n * Attributes provides an API for reading the\n * attributes supplied to an Element.\n * @param {object} attrs\n */\nclass Attributes {\n\n    constructor(' + _ts(o, 'public _attrs:any', '_attrs') + ') {\n\n        this._attrs = _attrs;\n\n    }\n\n    ' + _ts(o, 'has(path:string): boolean', 'has(path)') + '{\n\n      return this.read(path) != null;\n\n    }\n\n    /**\n     * read a value form the internal list.\n     * @param {string} path\n     * @param {*} defaultValue - This value is returned if the value is not set.\n     */\n    ' + _ts(o, 'read<A>(path:string, defaultValue?:A): A', 'read(path, defaultValue)') + ' {\n\n        var ret = $$property(path.split(\':\').join(\'.\'), this._attrs);\n      return (ret != null) ? ret : (defaultValue != null) ? defaultValue : \'\';\n\n    }\n\n}\n\n\n/**\n * $$widget creates a wml widget.\n * @param {function} Construtor\n * @param {object} attributes\n * @param {array<string|number|Widget>} children\n * @param {View} view\n * @return {Widget}\n */\nfunction $$widget(Constructor, attributes, children, view) {\n\n  var childs = [];\n  var w;\n\n  children.forEach(child => Array.isArray(child) ?\n    childs.push.apply(childs, child) : childs.push(child));\n\n  w = new Constructor(new Attributes(attributes), childs);\n\n  if (attributes.wml)\n    if (attributes.wml.id)\n      view.register(attributes.wml.id, w);\n\n  view.widgets.push(w);\n  return w.render();\n\n}\n\n/**\n * $$if is called to create an if conditional construct\n * @param {*} predicate\n * @param {function} positive\n * @param {function} negative\n */\nfunction $$if(predicate, positive, negative) {\n\n  return (predicate) ? positive() : negative();\n\n}\n\n/**\n * $$for is called to create a for loop construct\n * @param {Iterable} collection\n * @param {function} cb\n */\nfunction $$for(collection, cb) {\n\n  if (Array.isArray(collection)) {\n\n    return collection.map(cb);\n\n   } else if (typeof collection === \'object\') {\n\n     return Object.keys(collection).map((key, _, all) => cb(collection[key], key, all));\n\n   }\n\n    return [];\n\n}\n\n/**\n * $$switch simulates a switch statement\n * @param {string|number|boolean} value\n * @param {object} cases\n */\nfunction $$switch(value, cases) {\n\n    var result = cases[value];\n    var defaul = cases.default;\n\n    if (result) return result;\n\n    if (defaul) return defaul;\n\n}\n\n' + _ts(o, _view()) + '\n' + _ts(o, _widget()) + '\n' + _ts(o, _element());
};

var _rootElement = function _rootElement(root, o) {
  return root ? root.transpile(o) : o.typescript ? '<HTMLElement><Node>document.createDocumentFragment()' : 'document.createDocumentFragment()';
};

var view = exports.view = function view(name, tag, o) {
  return 'export class ' + name + ' ' + (o.typescript ? 'implements View' : '') + '{\n\n      ' + (o.typescript ? _typescriptProperties() : '') + '\n\n       constructor(context) {\n\n          let view = this;\n\n          this.ids = {};\n          this.widgets = [];\n\n          this.tree = null;\n          this.context = context;\n          this.template = function(){\n            return ' + _rootElement(tag, o) + '\n          }\n\n       }\n\n       static render(context) {\n\n         return (new ' + name + '(context)).render();\n\n       }\n\n       ' + (o.typescript ? 'register(id:string, w:WMLElement): ' + name : 'register(id, w)') + '{\n\n\n         if (this.ids.hasOwnProperty(id))\n           throw new Error(\'Duplicate id \\\'\' +id+\'\\\' detected!\');\n\n         this.ids[id] = w;\n         return this;\n\n       }\n\n       ' + (o.typescript ? 'findById(id:string) : WMLElement ' : 'findById(id)') + '{\n\n        return (this.ids[id]) ? this.ids[id] : null;\n\n       }\n\n       ' + (o.typescript ? 'invalidate(): void' : 'invalidate()') + ' {\n\n        var childs;\n        var parent = this.tree.parentNode;\n        var realFirstChild;\n        var realFirstChildIndex;\n\n         if (this.tree == null)\n           throw new ReferenceError(\'Cannot invalidate a view that has not been rendered!\');\n\n         if (this.tree.parentNode == null)\n           throw new ReferenceError(\'Attempt to invalidate a view that has not been inserted to DOM!\');\n\n         childs = ' + (o.typescript ? '(<Element> this.tree.parentNode)' : 'this.tree.parentNode') + '.children;\n\n         //for some reason the reference stored does not have the correct parent node.\n         //we do this to get a \'live\' version of the node.\n         for (let i = 0; i < childs.length; i++)\n           if (childs[i] === this.tree) {\n             realFirstChild = childs[i];\n             realFirstChildIndex = i;\n           }\n\n         parent.replaceChild(this.render(), realFirstChild);\n\n       }\n\n       render() {\n\n        this.ids = {};\n        this.widgets.forEach(w => w.removed());\n        this.widgets = [];\n        this.tree = this.template.call(this.context);\n        this.ids[\'root\'] = (this.ids[\'root\'])? this.ids[\'root\']:this.tree;\n        this.widgets.forEach(w => w.rendered());\n\n        return this.tree;\n\n      }\n\n     }\n\n    ';
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,