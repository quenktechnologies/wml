"use strict";

/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [7, 31, 42],
        $V1 = [1, 5],
        $V2 = [7, 42],
        $V3 = [1, 13],
        $V4 = [7, 10, 31, 42],
        $V5 = [1, 20],
        $V6 = [1, 25],
        $V7 = [12, 23, 25],
        $V8 = [1, 39],
        $V9 = [1, 44],
        $Va = [23, 25],
        $Vb = [18, 45, 48],
        $Vc = [1, 50],
        $Vd = [18, 45, 48, 49, 59, 62, 92],
        $Ve = [1, 54],
        $Vf = [1, 87],
        $Vg = [1, 88],
        $Vh = [1, 71],
        $Vi = [1, 72],
        $Vj = [1, 85],
        $Vk = [1, 86],
        $Vl = [1, 89],
        $Vm = [1, 90],
        $Vn = [1, 91],
        $Vo = [1, 107],
        $Vp = [1, 101],
        $Vq = [1, 102],
        $Vr = [7, 31, 42, 47, 57, 91],
        $Vs = [18, 45, 48, 52],
        $Vt = [23, 25, 33, 42, 45, 49, 52, 54, 59, 62, 93, 95, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133],
        $Vu = [1, 114],
        $Vv = [25, 93, 120],
        $Vw = [1, 115],
        $Vx = [23, 25, 33, 42, 45, 52, 54, 59, 62, 93, 95, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133],
        $Vy = [1, 127],
        $Vz = [2, 105],
        $VA = [1, 135],
        $VB = [1, 136],
        $VC = [31, 42, 47, 57, 91],
        $VD = [1, 143],
        $VE = [1, 144],
        $VF = [1, 145],
        $VG = [1, 146],
        $VH = [25, 110],
        $VI = [1, 191],
        $VJ = [18, 21, 92, 97, 106, 108, 119, 121, 122, 123],
        $VK = [23, 25, 33, 42, 45, 49, 52, 54, 59, 62, 92, 93, 95, 104, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133],
        $VL = [18, 31, 42, 45, 47, 48, 57, 91],
        $VM = [59, 62],
        $VN = [23, 25, 33, 42, 45, 52, 54, 59, 62, 93, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133],
        $VO = [1, 235],
        $VP = [1, 236],
        $VQ = [1, 239],
        $VR = [1, 243];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "module": 3, "module_option0": 4, "module_option1": 5, "module_option2": 6, "EOF": 7, "imports": 8, "import_statement": 9, "IMPORT": 10, "import_member": 11, "FROM": 12, "string_literal": 13, "default_member": 14, "alias_member": 15, "aggregate_member": 16, "composite_member": 17, "IDENTIFIER": 18, "AS": 19, "*": 20, "{": 21, "member_list": 22, "}": 23, "member_list_group0": 24, ",": 25, "member_list_group1": 26, "exports": 27, "export": 28, "export_group0": 29, "view_statement": 30, "{%": 31, "VIEW": 32, "%}": 33, "tag": 34, "ENDVIEW": 35, "macro_statement": 36, "MACRO": 37, "ENDMACRO": 38, "arguments": 39, "export_from_statement": 40, "EXPORT": 41, "<": 42, "tagname": 43, "attributes": 44, ">": 45, "tag_option0": 46, "</": 47, "/>": 48, ".": 49, "attribute": 50, "attribute_name": 51, "=": 52, "attribute_value": 53, ":": 54, "attribute_value_group0": 55, "interpolation": 56, "{{": 57, "expression": 58, "}}": 59, "filters": 60, "filter": 61, "|": 62, "children": 63, "child": 64, "control": 65, "characters": 66, "control_group0": 67, "for_statement": 68, "FOR": 69, "IN": 70, "for_children": 71, "ENDFOR": 72, "ELSE": 73, "if_statement": 74, "IF": 75, "ENDIF": 76, "else_clause": 77, "else_if_clause": 78, "switch_statement": 79, "SWITCH": 80, "case_statements": 81, "ENDSWITCH": 82, "case_statement": 83, "CASE": 84, "case_statement_group0": 85, "ENDCASE": 86, "DEFAULT": 87, "include_statement": 88, "INCLUDE": 89, "include_statement_option0": 90, "CHARACTERS": 91, "(": 92, ")": 93, "argument_list": 94, "?": 95, "binary_operator": 96, "!": 97, "expression_group0": 98, "binary_operator_group0": 99, "call_expression": 100, "identifier": 101, "member_expression": 102, "bind_expression": 103, "::": 104, "new_expression": 105, "NEW": 106, "function_expression": 107, "\\\\": 108, "parameter_list": 109, "=>": 110, "literal": 111, "object_literal": 112, "array_literal": 113, "number_literal": 114, "boolean_literal": 115, "key_value_pairs": 116, "key_value_pair": 117, "key_value_pair_group0": 118, "[": 119, "]": 120, "STRING_LITERAL": 121, "NUMBER_LITERAL": 122, "BOOLEAN": 123, ">=": 124, "<=": 125, "==": 126, "!=": 127, "+": 128, "/": 129, "-": 130, "&&": 131, "||": 132, "^": 133, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 7: "EOF", 10: "IMPORT", 12: "FROM", 18: "IDENTIFIER", 19: "AS", 20: "*", 21: "{", 23: "}", 25: ",", 31: "{%", 32: "VIEW", 33: "%}", 35: "ENDVIEW", 37: "MACRO", 38: "ENDMACRO", 41: "EXPORT", 42: "<", 45: ">", 47: "</", 48: "/>", 49: ".", 52: "=", 54: ":", 57: "{{", 59: "}}", 62: "|", 69: "FOR", 70: "IN", 72: "ENDFOR", 73: "ELSE", 75: "IF", 76: "ENDIF", 80: "SWITCH", 82: "ENDSWITCH", 84: "CASE", 86: "ENDCASE", 87: "DEFAULT", 89: "INCLUDE", 91: "CHARACTERS", 92: "(", 93: ")", 95: "?", 97: "!", 104: "::", 106: "NEW", 108: "\\\\", 110: "=>", 119: "[", 120: "]", 121: "STRING_LITERAL", 122: "NUMBER_LITERAL", 123: "BOOLEAN", 124: ">=", 125: "<=", 126: "==", 127: "!=", 128: "+", 129: "/", 130: "-", 131: "&&", 132: "||", 133: "^" },
        productions_: [0, [3, 4], [8, 1], [8, 2], [9, 4], [11, 1], [11, 1], [11, 1], [11, 1], [14, 1], [15, 3], [16, 3], [17, 3], [22, 1], [22, 3], [27, 1], [27, 2], [28, 1], [30, 8], [36, 8], [36, 9], [40, 6], [34, 8], [34, 4], [43, 1], [43, 3], [44, 2], [44, 0], [50, 3], [50, 1], [51, 1], [51, 3], [53, 1], [56, 3], [56, 4], [60, 1], [60, 2], [61, 2], [61, 3], [63, 1], [63, 2], [64, 1], [64, 1], [64, 1], [64, 1], [65, 1], [68, 7], [68, 9], [68, 11], [71, 4], [71, 7], [74, 8], [74, 6], [77, 7], [77, 9], [77, 7], [78, 6], [78, 6], [79, 8], [81, 1], [81, 2], [83, 8], [83, 8], [88, 5], [66, 1], [39, 2], [39, 3], [94, 1], [94, 3], [58, 3], [58, 5], [58, 5], [58, 2], [58, 1], [96, 1], [100, 2], [100, 2], [103, 3], [103, 4], [103, 3], [103, 4], [105, 2], [105, 3], [107, 4], [109, 1], [109, 3], [102, 3], [102, 3], [102, 3], [102, 3], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [112, 2], [112, 3], [116, 1], [116, 3], [117, 3], [113, 2], [113, 3], [13, 1], [114, 1], [115, 1], [101, 1], [4, 0], [4, 1], [5, 0], [5, 1], [6, 0], [6, 1], [24, 1], [24, 1], [26, 1], [26, 1], [29, 1], [29, 1], [29, 1], [46, 0], [46, 1], [55, 1], [55, 1], [55, 1], [67, 1], [67, 1], [67, 1], [67, 1], [85, 1], [85, 1], [85, 1], [90, 0], [90, 1], [98, 1], [98, 1], [98, 1], [98, 1], [98, 1], [98, 1], [98, 1], [98, 1], [98, 1], [98, 2], [98, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [118, 1], [118, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    this.$ = new yy.ast.Module($$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0 - 1] || null, this._$);return this.$;

                    break;
                case 2:
                    this.$ = [$$[$0]];
                    break;
                case 3:case 36:case 40:case 60:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 4:
                    this.$ = new yy.ast.ImportStatement($$[$0 - 2], $$[$0], this._$);
                    break;
                case 9:
                    this.$ = new yy.ast.DefaultMember($$[$0], this._$);
                    break;
                case 10:
                    this.$ = new yy.ast.AliasMember($$[$0 - 2], $$[$0], this._$);
                    break;
                case 11:
                    this.$ = new yy.ast.AggregateMember($$[$0], this._$);
                    break;
                case 12:
                    this.$ = new yy.ast.CompositeMember($$[$0 - 1], this._$);
                    break;
                case 13:
                    this.$ = [$$[$0]];
                    break;
                case 14:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 15:case 97:
                    this.$ = [$$[$0]];
                    break;
                case 16:case 26:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 17:
                    this.$ = $$[$0];
                    break;
                case 18:
                    this.$ = new yy.ast.ViewStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 19:
                    this.$ = new yy.ast.MacroStatement($$[$0 - 5], [], $$[$0 - 3], this._$);
                    break;
                case 20:
                    this.$ = new yy.ast.MacroStatement($$[$0 - 6], $$[$0 - 4], $$[$0 - 1], this._$);
                    break;
                case 21:
                    this.$ = new yy.ast.ExportFromStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 22:

                    yy.help.ensureTagsMatch($$[$0 - 6], $$[$0]);
                    this.$ = new yy.ast.Tag($$[$0 - 6], $$[$0 - 5], $$[$0 - 3] ? $$[$0 - 3] : [], this._$);

                    break;
                case 23:
                    this.$ = new yy.ast.Tag($$[$0 - 2], $$[$0 - 1], [], this._$);
                    break;
                case 24:
                    this.$ = $$[$0];
                    break;
                case 25:
                    this.$ = [$$[$0 - 2], $$[$0]].join('.');
                    break;
                case 27:
                    this.$ = [];
                    break;
                case 28:
                    this.$ = new yy.ast.Attribute($$[$0 - 2].name, $$[$0 - 2].namespace, $$[$0], this._$);
                    break;
                case 29:
                    this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace, new yy.ast.BooleanLiteral(true, this._$), this._$);
                    break;
                case 30:
                    this.$ = { namespace: null, name: $$[$0] };
                    break;
                case 31:
                    this.$ = { namespace: $$[$0 - 2], name: $$[$0] };
                    break;
                case 32:case 45:
                    this.$ = $$[$0];
                    break;
                case 33:
                    this.$ = new yy.ast.Interpolation($$[$0 - 1], [], this._$);
                    break;
                case 34:
                    this.$ = new yy.ast.Interpolation($$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 35:
                    this.$ = [$$[$0]];
                    break;
                case 37:
                    this.$ = new yy.ast.Filter($$[$0], [], this._$);
                    break;
                case 38:
                    this.$ = new yy.ast.Filter($$[$0 - 1], $$[$0], this._$);
                    break;
                case 39:case 59:
                    this.$ = [$$[$0]];
                    break;
                case 46:
                    this.$ = new yy.ast.ForStatement($$[$0 - 4], 'index', 'array', $$[$0 - 2], $$[$0], this._$);
                    break;
                case 47:
                    this.$ = new yy.ast.ForStatement($$[$0 - 6], $$[$0 - 4], 'array', $$[$0 - 2], $$[$0], this._$);
                    break;
                case 48:
                    this.$ = new yy.ast.ForStatement($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 2], $$[$0], this._$);
                    break;
                case 49:case 50:
                    this.$ = $$[$0 - 3];
                    break;
                case 51:
                    this.$ = new yy.ast.IfStatement($$[$0 - 5], $$[$0 - 3], null, this._$);
                    break;
                case 52:
                    this.$ = new yy.ast.IfStatement($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 53:
                    this.$ = new yy.ast.ElseClause($$[$0 - 3], this._$);
                    break;
                case 54:
                    this.$ = new yy.ast.ElseIfClause($$[$0 - 5], $$[$0 - 3], null, this._$);
                    break;
                case 55:
                    this.$ = new yy.ast.ElseIfClause($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 56:
                    this.$ = new yy.ast.ElseIfStatement($$[$0 - 2], $$[$0], this._$);
                    break;
                case 58:
                    this.$ = new yy.ast.SwitchStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 61:
                    this.$ = new yy.ast.CaseStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 62:
                    this.$ = new yy.ast.CaseStatement(null, $$[$0 - 3], this._$);
                    break;
                case 63:
                    this.$ = new yy.ast.IncludeStatement($$[$0 - 2], $$[$0 - 1] ? $$[$0 - 1] : null, this._$);
                    break;
                case 64:
                    this.$ = new yy.ast.Characters($$[$0], this._$);
                    break;
                case 65:
                    this.$ = [];
                    break;
                case 66:
                    this.$ = $$[$0 - 1];
                    break;
                case 67:
                    this.$ = [$$[$0]];
                    break;
                case 68:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 69:
                    this.$ = $$[$0 - 1];
                    break;
                case 70:
                    this.$ = new yy.ast.TernaryExpression($$[$0 - 4], $$[$0 - 2], $$[$0], this._$);
                    break;
                case 71:
                    this.$ = new yy.ast.BinaryExpression($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 72:
                    this.$ = new yy.ast.UnaryExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 73:
                    this.$ = $$[$0];
                    break;
                case 74:
                    this.$ = yy.help.convertOperator($$[$0]);
                    break;
                case 75:case 76:
                    this.$ = new yy.ast.CallExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 77:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 78:
                    this.$ = new yy.ast.BindExpression($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 79:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 80:
                    this.$ = new yy.ast.BindExpression($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 81:
                    this.$ = new yy.ast.NewExpression($$[$0], [], this._$);
                    break;
                case 82:
                    this.$ = new yy.ast.NewExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 83:
                    this.$ = new yy.ast.FunctionExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 84:
                    this.$ = [$$[$0]];
                    break;
                case 85:
                    this.$ = [$$[$0 - 2], $$[$0]];
                    break;
                case 86:case 87:case 88:case 89:
                    this.$ = new yy.ast.MemberExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 95:
                    this.$ = new yy.ast.ObjectLiteral([], this._$);
                    break;
                case 96:
                    this.$ = new yy.ast.ObjectLiteral($$[$0 - 1], this._$);
                    break;
                case 98:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 99:
                    this.$ = { key: $$[$0 - 2], value: $$[$0] };
                    break;
                case 100:
                    this.$ = new yy.ast.ArrayLiteral([], this._$);
                    break;
                case 101:
                    this.$ = new yy.ast.ArrayLiteral($$[$0 - 1], this._$);
                    break;
                case 102:
                    this.$ = new yy.ast.StringLiteral($$[$0], this._$);
                    break;
                case 103:
                    this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$);
                    break;
                case 104:
                    this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
                    break;
                case 105:
                    this.$ = new yy.ast.Identifier($$[$0], this._$);
                    break;
            }
        },
        table: [o($V0, [2, 106], { 3: 1, 4: 2, 8: 3, 9: 4, 10: $V1 }), { 1: [3] }, o($V2, [2, 108], { 5: 6, 27: 7, 28: 8, 29: 9, 30: 10, 36: 11, 40: 12, 31: $V3 }), o($V0, [2, 107], { 9: 14, 10: $V1 }), o($V4, [2, 2]), { 11: 15, 14: 16, 15: 17, 16: 18, 17: 19, 18: $V5, 20: [1, 21], 21: [1, 22] }, { 6: 23, 7: [2, 110], 34: 24, 42: $V6 }, o($V2, [2, 109], { 29: 9, 30: 10, 36: 11, 40: 12, 28: 26, 31: $V3 }), o($V0, [2, 15]), o($V0, [2, 17]), o($V0, [2, 116]), o($V0, [2, 117]), o($V0, [2, 118]), { 32: [1, 27], 37: [1, 28], 41: [1, 29] }, o($V4, [2, 3]), { 12: [1, 30] }, { 12: [2, 5] }, { 12: [2, 6] }, { 12: [2, 7] }, { 12: [2, 8] }, o($V7, [2, 9], { 19: [1, 31] }), { 19: [1, 32] }, { 14: 35, 15: 36, 18: $V5, 22: 33, 24: 34 }, { 7: [1, 37] }, { 7: [2, 111] }, { 18: $V8, 43: 38 }, o($V0, [2, 16]), { 18: [1, 40] }, { 18: [1, 41] }, { 18: [1, 42] }, { 13: 43, 121: $V9 }, { 18: [1, 45] }, { 18: [1, 46] }, { 23: [1, 47], 25: [1, 48] }, o($Va, [2, 13]), o($Va, [2, 112]), o($Va, [2, 113]), { 1: [2, 1] }, o($Vb, [2, 27], { 44: 49, 49: $Vc }), o($Vd, [2, 24]), { 33: [1, 51] }, { 33: [1, 52], 39: 53, 92: $Ve }, { 12: [1, 55] }, o($V4, [2, 4]), o([7, 10, 18, 23, 25, 31, 33, 42, 45, 48, 52, 54, 59, 62, 93, 95, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], [2, 102]), o($V7, [2, 10]), { 12: [2, 11] }, { 12: [2, 12] }, { 14: 57, 15: 58, 18: $V5, 26: 56 }, { 18: [1, 63], 45: [1, 59], 48: [1, 60], 50: 61, 51: 62 }, { 18: [1, 64] }, { 34: 65, 42: $V6 }, { 34: 66, 42: $V6 }, { 33: [1, 67] }, { 13: 81, 18: $Vf, 21: $Vg, 58: 70, 92: $Vh, 93: [1, 68], 94: 69, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, { 13: 92, 121: $V9 }, o($Va, [2, 14]), o($Va, [2, 114]), o($Va, [2, 115]), { 31: $Vo, 34: 96, 42: $V6, 46: 93, 47: [2, 119], 56: 98, 57: $Vp, 63: 94, 64: 95, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 79: 105, 88: 106, 91: $Vq }, o($Vr, [2, 23]), o($Vb, [2, 26]), o($Vb, [2, 29], { 52: [1, 108] }), o($Vs, [2, 30], { 54: [1, 109] }), o($Vd, [2, 25]), { 31: [1, 110] }, { 31: [1, 111] }, { 34: 112, 42: $V6 }, o($Vt, [2, 65]), { 25: $Vu, 93: [1, 113] }, o($Vv, [2, 67], { 95: $Vw }), { 13: 81, 18: $Vf, 21: $Vg, 58: 116, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, { 13: 81, 18: $Vf, 21: $Vg, 58: 117, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, o($Vx, [2, 73]), o($Vx, [2, 133]), o($Vx, [2, 134], { 49: [1, 118] }), o($Vx, [2, 135], { 39: 119, 49: [1, 120], 92: $Ve, 104: [1, 121] }), o($Vx, [2, 136]), o($Vx, [2, 137], { 49: [1, 122] }), o($Vx, [2, 138]), o($Vx, [2, 139]), o($Vx, [2, 140]), o($Vx, [2, 141]), { 114: 123, 122: $Vm }, o($Vx, [2, 143], { 39: 124, 49: [1, 125], 92: $Ve }), { 18: $Vy, 101: 126 }, { 18: $Vy, 101: 129, 109: 128 }, o([23, 25, 33, 42, 45, 49, 52, 54, 59, 62, 92, 93, 95, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], $Vz, { 104: [1, 130] }), { 18: $VA, 23: [1, 131], 116: 132, 117: 133, 118: 134, 121: $VB }, { 13: 81, 18: $Vf, 21: $Vg, 58: 70, 92: $Vh, 94: 138, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 120: [1, 137], 121: $V9, 122: $Vm, 123: $Vn }, o([18, 23, 25, 33, 42, 45, 48, 52, 54, 59, 62, 93, 95, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], [2, 103]), o([33, 122], [2, 104]), { 33: [1, 139] }, { 47: [1, 140] }, { 31: $Vo, 34: 96, 42: $V6, 47: [2, 120], 56: 98, 57: $Vp, 64: 141, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 79: 105, 88: 106, 91: $Vq }, o($VC, [2, 39]), o($VC, [2, 41]), o($VC, [2, 42]), o($VC, [2, 43]), o($VC, [2, 44]), o($VC, [2, 45]), { 13: 81, 18: $Vf, 21: $Vg, 58: 142, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, o($VC, [2, 64]), o($VC, [2, 124]), o($VC, [2, 125]), o($VC, [2, 126]), o($VC, [2, 127]), { 69: $VD, 75: $VE, 80: $VF, 89: $VG }, { 13: 150, 53: 147, 55: 148, 56: 149, 57: $Vp, 114: 151, 121: $V9, 122: $Vm }, { 18: [1, 152] }, { 35: [1, 153] }, { 38: [1, 154] }, { 31: [1, 155] }, o($Vt, [2, 66]), { 13: 81, 18: $Vf, 21: $Vg, 58: 156, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, { 13: 81, 18: $Vf, 21: $Vg, 58: 157, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, { 42: [1, 163], 45: [1, 161], 52: [1, 170], 93: [1, 158], 95: $Vw, 96: 159, 99: 160, 124: [1, 162], 125: [1, 164], 126: [1, 165], 127: [1, 166], 128: [1, 167], 129: [1, 168], 130: [1, 169], 131: [1, 171], 132: [1, 172], 133: [1, 173] }, o($Vx, [2, 72]), { 18: $Vy, 101: 174 }, o($Vt, [2, 76]), { 18: $Vy, 101: 175 }, { 18: [1, 176] }, { 18: $Vy, 101: 177 }, o($Vx, [2, 142]), o($Vt, [2, 75]), { 18: $Vy, 101: 178 }, o($Vx, [2, 81], { 39: 179, 92: $Ve }), o([23, 25, 33, 42, 45, 49, 52, 54, 59, 62, 92, 93, 95, 104, 110, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], $Vz), { 25: [1, 181], 110: [1, 180] }, o($VH, [2, 84]), { 18: [1, 182] }, o($Vx, [2, 95]), { 23: [1, 183], 25: [1, 184] }, o($Va, [2, 97]), { 54: [1, 185] }, { 54: [2, 157] }, { 54: [2, 158] }, o($Vx, [2, 100]), { 25: $Vu, 120: [1, 186] }, o($V0, [2, 21]), { 18: $V8, 43: 187 }, o($VC, [2, 40]), { 59: [1, 188], 60: 189, 61: 190, 62: $VI, 95: $Vw }, { 18: [1, 192] }, { 13: 81, 18: $Vf, 21: $Vg, 58: 193, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, { 13: 81, 18: $Vf, 21: $Vg, 58: 194, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, { 13: 81, 18: $Vf, 21: $Vg, 58: 195, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, o($Vb, [2, 28]), o($Vb, [2, 32]), o($Vb, [2, 121]), o($Vb, [2, 122]), o($Vb, [2, 123]), o($Vs, [2, 31]), { 33: [1, 196] }, { 33: [1, 197] }, { 38: [1, 198] }, o($Vv, [2, 68], { 95: $Vw }), { 54: [1, 199], 95: $Vw }, o($Vx, [2, 69]), { 13: 81, 18: $Vf, 21: $Vg, 58: 200, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, o($VJ, [2, 74]), o($VJ, [2, 144]), o($VJ, [2, 145]), o($VJ, [2, 146]), o($VJ, [2, 147]), o($VJ, [2, 148]), o($VJ, [2, 149]), o($VJ, [2, 150]), o($VJ, [2, 151]), o($VJ, [2, 152]), o($VJ, [2, 153]), o($VJ, [2, 154]), o($VJ, [2, 155]), o($VJ, [2, 156]), o($VK, [2, 87]), o($VK, [2, 89]), o($Vt, [2, 79], { 39: 201, 92: $Ve }), o($VK, [2, 88]), o($VK, [2, 86]), o($Vx, [2, 82]), { 13: 81, 18: $Vf, 21: $Vg, 58: 202, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, { 18: $Vy, 101: 203 }, o($Vt, [2, 77], { 39: 204, 92: $Ve }), o($Vx, [2, 96]), { 18: $VA, 117: 205, 118: 134, 121: $VB }, { 13: 81, 18: $Vf, 21: $Vg, 58: 206, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, o($Vx, [2, 101]), { 45: [1, 207], 49: $Vc }, o($VL, [2, 33]), { 59: [1, 208], 61: 209, 62: $VI }, o($VM, [2, 35]), { 18: $V8, 43: 210 }, { 25: [1, 212], 70: [1, 211] }, { 33: [1, 213], 95: $Vw }, { 33: [1, 214], 95: $Vw }, { 33: [2, 131], 90: 215, 95: $Vw, 113: 216, 119: $Vl }, o($V0, [2, 18]), o($V0, [2, 19]), { 33: [1, 217] }, { 13: 81, 18: $Vf, 21: $Vg, 58: 218, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, { 93: [1, 219], 95: $Vw }, o($Vt, [2, 80]), o($VN, [2, 83], { 95: $Vw }), o($VH, [2, 85]), o($Vt, [2, 78]), o($Va, [2, 98]), o($Va, [2, 99], { 95: $Vw }), o($Vr, [2, 22]), o($VL, [2, 34]), o($VM, [2, 36]), o($VM, [2, 37], { 39: 220, 49: $Vc, 92: $Ve }), { 13: 81, 18: $Vf, 21: $Vg, 58: 221, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, { 18: [1, 222] }, { 31: $Vo, 34: 96, 42: $V6, 56: 98, 57: $Vp, 63: 223, 64: 95, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 79: 105, 88: 106, 91: $Vq }, { 31: [1, 226], 81: 224, 83: 225 }, { 33: [1, 227] }, { 33: [2, 132] }, o($V0, [2, 20]), o($VN, [2, 70], { 95: $Vw }), o($Vx, [2, 71]), o($VM, [2, 38]), { 33: [1, 228], 95: $Vw }, { 25: [1, 230], 70: [1, 229] }, { 31: [1, 231], 34: 96, 42: $V6, 56: 98, 57: $Vp, 64: 141, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 77: 232, 79: 105, 88: 106, 91: $Vq }, { 31: [1, 233], 83: 234 }, { 31: [2, 59] }, { 84: $VO, 87: $VP }, o($VC, [2, 63]), { 31: $VQ, 34: 96, 42: $V6, 56: 98, 57: $Vp, 63: 238, 64: 95, 65: 97, 66: 99, 67: 100, 68: 103, 71: 237, 74: 104, 79: 105, 88: 106, 91: $Vq }, { 13: 81, 18: $Vf, 21: $Vg, 58: 240, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, { 18: [1, 241] }, { 69: $VD, 73: $VR, 75: $VE, 76: [1, 242], 80: $VF, 89: $VG }, o($VC, [2, 52]), { 82: [1, 244], 84: $VO, 87: $VP }, { 31: [2, 60] }, { 13: 246, 85: 245, 114: 247, 115: 248, 121: $V9, 122: $Vm, 123: $Vn }, { 84: [1, 249] }, o($VC, [2, 46]), { 31: [1, 250], 34: 96, 42: $V6, 56: 98, 57: $Vp, 64: 141, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 79: 105, 88: 106, 91: $Vq }, { 69: $VD, 73: [1, 251], 75: $VE, 80: $VF, 89: $VG }, { 33: [1, 252], 95: $Vw }, { 70: [1, 253] }, { 33: [1, 254] }, { 33: [1, 255], 75: [1, 256] }, { 33: [1, 257] }, { 33: [1, 258] }, { 33: [2, 128] }, { 33: [2, 129] }, { 33: [2, 130] }, { 33: [1, 259] }, { 69: $VD, 72: [1, 260], 75: $VE, 80: $VF, 89: $VG }, { 33: [1, 261] }, { 31: $VQ, 34: 96, 42: $V6, 56: 98, 57: $Vp, 63: 238, 64: 95, 65: 97, 66: 99, 67: 100, 68: 103, 71: 262, 74: 104, 79: 105, 88: 106, 91: $Vq }, { 13: 81, 18: $Vf, 21: $Vg, 58: 263, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, o($VC, [2, 51]), { 31: $Vo, 34: 96, 42: $V6, 56: 98, 57: $Vp, 63: 264, 64: 95, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 79: 105, 88: 106, 91: $Vq }, { 13: 81, 18: $Vf, 21: $Vg, 58: 265, 92: $Vh, 97: $Vi, 98: 73, 100: 75, 101: 84, 102: 76, 103: 78, 105: 74, 106: $Vj, 107: 77, 108: $Vk, 112: 79, 113: 80, 114: 82, 115: 83, 119: $Vl, 121: $V9, 122: $Vm, 123: $Vn }, o($VC, [2, 58]), { 31: $Vo, 34: 96, 42: $V6, 56: 98, 57: $Vp, 63: 266, 64: 95, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 79: 105, 88: 106, 91: $Vq }, { 31: $Vo, 34: 96, 42: $V6, 56: 98, 57: $Vp, 63: 267, 64: 95, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 79: 105, 88: 106, 91: $Vq }, { 33: [1, 268] }, { 31: $Vo, 34: 96, 42: $V6, 56: 98, 57: $Vp, 63: 269, 64: 95, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 79: 105, 88: 106, 91: $Vq }, o($VC, [2, 47]), { 33: [1, 270], 95: $Vw }, { 31: [1, 271], 34: 96, 42: $V6, 56: 98, 57: $Vp, 64: 141, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 79: 105, 88: 106, 91: $Vq }, { 33: [1, 272], 95: $Vw }, { 31: [1, 273], 34: 96, 42: $V6, 56: 98, 57: $Vp, 64: 141, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 79: 105, 88: 106, 91: $Vq }, { 31: [1, 274], 34: 96, 42: $V6, 56: 98, 57: $Vp, 64: 141, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 79: 105, 88: 106, 91: $Vq }, o($VC, [2, 49]), { 31: [1, 275], 34: 96, 42: $V6, 56: 98, 57: $Vp, 64: 141, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 79: 105, 88: 106, 91: $Vq }, { 31: $VQ, 34: 96, 42: $V6, 56: 98, 57: $Vp, 63: 238, 64: 95, 65: 97, 66: 99, 67: 100, 68: 103, 71: 276, 74: 104, 79: 105, 88: 106, 91: $Vq }, { 69: $VD, 75: $VE, 76: [1, 277], 80: $VF, 89: $VG }, { 31: $Vo, 34: 96, 42: $V6, 56: 98, 57: $Vp, 63: 278, 64: 95, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 79: 105, 88: 106, 91: $Vq }, { 69: $VD, 75: $VE, 80: $VF, 86: [1, 279], 89: $VG }, { 69: $VD, 75: $VE, 80: $VF, 86: [1, 280], 89: $VG }, { 69: $VD, 72: [1, 281], 75: $VE, 80: $VF, 89: $VG }, o($VC, [2, 48]), { 33: [1, 282] }, { 31: [1, 283], 34: 96, 42: $V6, 56: 98, 57: $Vp, 64: 141, 65: 97, 66: 99, 67: 100, 68: 103, 74: 104, 77: 284, 79: 105, 88: 106, 91: $Vq }, { 33: [1, 285] }, { 33: [1, 286] }, { 33: [1, 287] }, o($VC, [2, 53]), { 69: $VD, 73: $VR, 75: $VE, 76: [1, 288], 80: $VF, 89: $VG }, o($VC, [2, 55]), { 31: [2, 61] }, { 31: [2, 62] }, o($VC, [2, 50]), { 33: [1, 289] }, o($VC, [2, 54])],
        defaultActions: { 16: [2, 5], 17: [2, 6], 18: [2, 7], 19: [2, 8], 24: [2, 111], 37: [2, 1], 46: [2, 11], 47: [2, 12], 135: [2, 157], 136: [2, 158], 216: [2, 132], 225: [2, 59], 234: [2, 60], 246: [2, 128], 247: [2, 129], 248: [2, 130], 285: [2, 61], 286: [2, 62] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "flex": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return;
                        break;
                    case 1:
                        return 10;
                        break;
                    case 2:
                        return 12;
                        break;
                    case 3:
                        return 19;
                        break;
                    case 4:
                        return 47;
                        break;
                    case 5:
                        this.begin('CONTROL');return 31;
                        break;
                    case 6:
                        this.begin('COMMENT');return;
                        break;
                    case 7:
                        this.begin('CHILDREN');return 45;
                        break;
                    case 8:
                        this.begin('CHILDREN');return 48;
                        break;
                    case 9:
                        this.begin('EXPRESSION');return 57;
                        break;
                    case 10:
                        return 37;
                        break;
                    case 11:
                        return 38;
                        break;
                    case 12:
                        return 69;
                        break;
                    case 13:
                        return 72;
                        break;
                    case 14:
                        return 75;
                        break;
                    case 15:
                        return 76;
                        break;
                    case 16:
                        return 73;
                        break;
                    case 17:
                        return 'ELSEIF';
                        break;
                    case 18:
                        return 70;
                        break;
                    case 19:
                        return 80;
                        break;
                    case 20:
                        return 82;
                        break;
                    case 21:
                        return 87;
                        break;
                    case 22:
                        return 84;
                        break;
                    case 23:
                        return 86;
                        break;
                    case 24:
                        return 89;
                        break;
                    case 25:
                        return 41;
                        break;
                    case 26:
                        return 12;
                        break;
                    case 27:
                        return 'ENDEXPORT';
                        break;
                    case 28:
                        return 32;
                        break;
                    case 29:
                        return 35;
                        break;
                    case 30:
                        this.popState();return 33;
                        break;
                    case 31:
                        return 106;
                        break;
                    case 32:
                        return 62;
                        break;
                    case 33:
                        return 110;
                        break;
                    case 34:
                        return 104;
                        break;
                    case 35:
                        return '->';
                        break;
                    case 36:
                        return '..';
                        break;
                    case 37:
                        this.popState();return 59;
                        break;
                    case 38:
                        this.begin('EXPRESSION');return 57;
                        break;
                    case 39:
                        this.begin('CONTROL');return 31;
                        break;
                    case 40:
                        this.begin('COMMENT');return;
                        break;
                    case 41:
                        this.popState();return 47;
                        break;
                    case 42:
                        this.popState();return 42;
                        break;
                    case 43:
                        this.popState();return 91;
                        break;
                    case 44:
                        this.popState();return;
                        break;
                    case 45:
                        return 123;
                        break;
                    case 46:
                        return 122;
                        break;
                    case 47:
                        return 121;
                        break;
                    case 48:
                        return 45;
                        break;
                    case 49:
                        return 42;
                        break;
                    case 50:
                        return 92;
                        break;
                    case 51:
                        return 93;
                        break;
                    case 52:
                        return 119;
                        break;
                    case 53:
                        return 120;
                        break;
                    case 54:
                        return ';';
                        break;
                    case 55:
                        return 54;
                        break;
                    case 56:
                        return 52;
                        break;
                    case 57:
                        return 126;
                        break;
                    case 58:
                        return 127;
                        break;
                    case 59:
                        return 124;
                        break;
                    case 60:
                        return 125;
                        break;
                    case 61:
                        return 128;
                        break;
                    case 62:
                        return 130;
                        break;
                    case 63:
                        return 20;
                        break;
                    case 64:
                        return 129;
                        break;
                    case 65:
                        return 108;
                        break;
                    case 66:
                        return 131;
                        break;
                    case 67:
                        return 132;
                        break;
                    case 68:
                        return 133;
                        break;
                    case 69:
                        return 97;
                        break;
                    case 70:
                        return 25;
                        break;
                    case 71:
                        return 95;
                        break;
                    case 72:
                        return 49;
                        break;
                    case 73:
                        return 21;
                        break;
                    case 74:
                        return 23;
                        break;
                    case 75:
                        return 18;
                        break;
                    case 76:
                        return 7;
                        break;
                    case 77:
                        console.log(yy_.yytext);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:import)/, /^(?:from)/, /^(?:as)/, /^(?:<\/)/, /^(?:\{%)/, /^(?:<!--)/, /^(?:>)/, /^(?:\/>)/, /^(?:\{\{)/, /^(?:macro)/, /^(?:endmacro)/, /^(?:for)/, /^(?:endfor)/, /^(?:if)/, /^(?:endif)/, /^(?:else)/, /^(?:elseif)/, /^(?:in)/, /^(?:switch)/, /^(?:endswitch)/, /^(?:default)/, /^(?:case)/, /^(?:endcase)/, /^(?:include)/, /^(?:export)/, /^(?:from)/, /^(?:endexport)/, /^(?:view)/, /^(?:endview)/, /^(?:%\})/, /^(?:new)/, /^(?:\|)/, /^(?:=>)/, /^(?:::)/, /^(?:->)/, /^(?:\.\.)/, /^(?:\}\})/, /^(?:\{\{)/, /^(?:\{%)/, /^(?:<!--)/, /^(?:<\/)/, /^(?:<)/, /^(?:[^\/<>{%}]+)/, /^(?:(.|\r|\n)*?-->)/, /^(?:true|false)/, /^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/, /^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/, /^(?:>)/, /^(?:<)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:;)/, /^(?::)/, /^(?:=)/, /^(?:==)/, /^(?:!=)/, /^(?:>=)/, /^(?:<=)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:\\)/, /^(?:&&)/, /^(?:\|\|)/, /^(?:\^)/, /^(?:!)/, /^(?:,)/, /^(?:\?)/, /^(?:\.)/, /^(?:\{)/, /^(?:\})/, /^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/, /^(?:$)/, /^(?:.)/],
            conditions: { "EXPRESSION": { "rules": [0, 31, 32, 33, 34, 35, 36, 37, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "inclusive": false }, "CONTROL": { "rules": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "inclusive": false }, "COMMENT": { "rules": [0, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "inclusive": false }, "CHILDREN": { "rules": [0, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "inclusive": false }, "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = ParserImpl;
    exports.Parser = ParserImpl.Parser;
    exports.parse = function () {
        return ParserImpl.parse.apply(ParserImpl, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,