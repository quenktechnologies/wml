"use strict";

/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [9, 21, 34, 48, 55],
        $V1 = [1, 5],
        $V2 = [9, 21, 48, 55],
        $V3 = [1, 13],
        $V4 = [9, 12, 21, 34, 48, 55],
        $V5 = [1, 20],
        $V6 = [9, 21, 55],
        $V7 = [1, 25],
        $V8 = [14, 26, 28],
        $V9 = [9, 55],
        $Va = [1, 40],
        $Vb = [1, 48],
        $Vc = [26, 28],
        $Vd = [1, 55],
        $Ve = [9, 28, 39, 50, 55],
        $Vf = [28, 50],
        $Vg = [1, 65],
        $Vh = [21, 58, 61],
        $Vi = [21, 58, 61, 70, 73, 102],
        $Vj = [1, 97],
        $Vk = [28, 103, 121],
        $Vl = [28, 83, 103, 121],
        $Vm = [1, 123],
        $Vn = [1, 122],
        $Vo = [1, 117],
        $Vp = [9, 34, 55, 60, 68, 105],
        $Vq = [21, 58, 61, 64],
        $Vr = [34, 55, 60, 68, 105],
        $Vs = [1, 160],
        $Vt = [1, 161],
        $Vu = [1, 138],
        $Vv = [1, 139],
        $Vw = [1, 140],
        $Vx = [1, 154],
        $Vy = [1, 158],
        $Vz = [1, 159],
        $VA = [1, 163],
        $VB = [1, 165],
        $VC = [1, 167],
        $VD = [1, 168],
        $VE = [1, 169],
        $VF = [1, 170],
        $VG = [1, 171],
        $VH = [1, 172],
        $VI = [1, 173],
        $VJ = [1, 174],
        $VK = [1, 195],
        $VL = [1, 193],
        $VM = [22, 26, 28, 39, 50, 52, 55, 58, 64, 70, 73, 98, 103, 107, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150],
        $VN = [1, 199],
        $VO = [1, 204],
        $VP = [1, 203],
        $VQ = [1, 202],
        $VR = [1, 205],
        $VS = [1, 206],
        $VT = [1, 207],
        $VU = [1, 208],
        $VV = [1, 209],
        $VW = [1, 214],
        $VX = [1, 213],
        $VY = [1, 215],
        $VZ = [1, 216],
        $V_ = [1, 223],
        $V$ = [1, 224],
        $V01 = [21, 22, 26, 28, 39, 50, 52, 55, 58, 61, 64, 70, 73, 98, 103, 107, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150],
        $V11 = [22, 26, 28, 39, 50, 52, 55, 58, 64, 70, 73, 98, 103, 107, 122, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150],
        $V21 = [21, 34, 55, 58, 60, 61, 68, 105],
        $V31 = [70, 73],
        $V41 = [1, 257],
        $V51 = [2, 92],
        $V61 = [2, 90],
        $V71 = [22, 26, 28, 39, 50, 52, 55, 58, 64, 70, 73, 98, 103, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150],
        $V81 = [1, 296],
        $V91 = [28, 50, 103],
        $Va1 = [1, 312],
        $Vb1 = [1, 315],
        $Vc1 = [21, 24, 48, 102, 109, 110, 117, 119, 121, 131, 133, 138, 151, 152, 153, 154],
        $Vd1 = [22, 26, 28, 39, 48, 50, 52, 55, 58, 64, 70, 73, 98, 102, 103, 107, 115, 122, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150],
        $Ve1 = [2, 94],
        $Vf1 = [1, 351],
        $Vg1 = [1, 360];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "module": 3, "module_option0": 4, "module_option1": 5, "module_option2": 6, "module_option3": 7, "module_option4": 8, "EOF": 9, "imports": 10, "import_statement": 11, "IMPORT": 12, "import_member": 13, "FROM": 14, "string_literal": 15, "import_statement_option0": 16, "default_member": 17, "alias_member": 18, "aggregate_member": 19, "composite_member": 20, "IDENTIFIER": 21, "AS": 22, "*": 23, "{": 24, "member_list": 25, "}": 26, "member_list_group0": 27, ",": 28, "member_list_group1": 29, "exports": 30, "export": 31, "export_group0": 32, "view_statement": 33, "{%": 34, "VIEW": 35, "identifier": 36, "USING": 37, "type": 38, "%}": 39, "tag": 40, "ENDVIEW": 41, "type_classes": 42, "frag_statement": 43, "FRAG": 44, "children": 45, "ENDFRAG": 46, "parameters": 47, "[": 48, "type_class_list": 49, "]": 50, "type_class": 51, ":": 52, "export_from_statement": 53, "EXPORT": 54, "<": 55, "tagname": 56, "attributes": 57, ">": 58, "tag_option0": 59, "</": 60, "/>": 61, "attribute": 62, "attribute_name": 63, "=": 64, "attribute_value": 65, "attribute_value_group0": 66, "interpolation": 67, "{{": 68, "expression": 69, "}}": 70, "filters": 71, "filter": 72, "|": 73, "arguments": 74, "child": 75, "child_group0": 76, "text_interpolation": 77, "control": 78, "control_group0": 79, "for_statement": 80, "FOR": 81, "typable_identifier": 82, "IN": 83, "ENDFOR": 84, "ELSE": 85, "if_statement": 86, "IF": 87, "ENDIF": 88, "else_clause": 89, "match_statement": 90, "MATCH": 91, "case_statements": 92, "ENDMATCH": 93, "case_statement": 94, "CASE": 95, "TYPEOF": 96, "ENDCASE": 97, "INSTANCEOF": 98, "call_statement": 99, "CALL": 100, "member_expression": 101, "(": 102, ")": 103, "characters": 104, "CHARACTERS": 105, "argument_list": 106, "?": 107, "binary_operator": 108, "!": 109, "@@": 110, "expression_group0": 111, "binary_operator_group0": 112, "call_expression": 113, "bind_expression": 114, "::": 115, "new_expression": 116, "NEW": 117, "function_expression": 118, "\\\\": 119, "parameter_list": 120, "=>": 121, ".": 122, "context_property": 123, "context_variable": 124, "array_literal": 125, "object_literal": 126, "type_assertion": 127, "key_value_pairs": 128, "key_value_pair": 129, "key_value_pair_group0": 130, "STRING_LITERAL": 131, "number_literal": 132, "NUMBER_LITERAL": 133, "boolean_literal": 134, "boolean_literal_group0": 135, "variable": 136, "variable_group0": 137, "CONTEXT_PROP": 138, "context_variable_group0": 139, ";": 140, ">=": 141, "<=": 142, "==": 143, "!=": 144, "+": 145, "/": 146, "-": 147, "&&": 148, "||": 149, "^": 150, "TRUE": 151, "FALSE": 152, "@": 153, "THIS": 154, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 9: "EOF", 12: "IMPORT", 14: "FROM", 21: "IDENTIFIER", 22: "AS", 23: "*", 24: "{", 26: "}", 28: ",", 34: "{%", 35: "VIEW", 37: "USING", 39: "%}", 41: "ENDVIEW", 44: "FRAG", 46: "ENDFRAG", 48: "[", 50: "]", 52: ":", 54: "EXPORT", 55: "<", 58: ">", 60: "</", 61: "/>", 64: "=", 68: "{{", 70: "}}", 73: "|", 81: "FOR", 83: "IN", 84: "ENDFOR", 85: "ELSE", 87: "IF", 88: "ENDIF", 91: "MATCH", 93: "ENDMATCH", 95: "CASE", 96: "TYPEOF", 97: "ENDCASE", 98: "INSTANCEOF", 100: "CALL", 102: "(", 103: ")", 105: "CHARACTERS", 107: "?", 109: "!", 110: "@@", 115: "::", 117: "NEW", 119: "\\\\", 121: "=>", 122: ".", 131: "STRING_LITERAL", 133: "NUMBER_LITERAL", 138: "CONTEXT_PROP", 140: ";", 141: ">=", 142: "<=", 143: "==", 144: "!=", 145: "+", 146: "/", 147: "-", 148: "&&", 149: "||", 150: "^", 151: "TRUE", 152: "FALSE", 153: "@", 154: "THIS" },
        productions_: [0, [3, 6], [10, 1], [10, 2], [11, 5], [13, 1], [13, 1], [13, 1], [13, 1], [17, 1], [18, 3], [19, 3], [20, 3], [25, 1], [25, 3], [30, 1], [30, 2], [31, 1], [33, 10], [33, 11], [43, 10], [43, 11], [43, 11], [43, 12], [42, 3], [49, 1], [49, 3], [51, 1], [51, 3], [38, 1], [38, 2], [53, 6], [40, 8], [40, 4], [56, 1], [56, 3], [57, 2], [57, 0], [62, 3], [62, 1], [63, 1], [63, 3], [65, 1], [67, 3], [67, 4], [71, 1], [71, 2], [72, 2], [72, 3], [45, 1], [45, 2], [75, 1], [77, 1], [78, 1], [80, 10], [80, 12], [80, 14], [80, 14], [80, 16], [80, 18], [86, 8], [86, 6], [89, 7], [89, 9], [89, 7], [90, 12], [90, 8], [92, 1], [92, 2], [94, 9], [94, 9], [99, 5], [99, 4], [99, 4], [99, 5], [99, 7], [99, 6], [104, 1], [74, 2], [74, 3], [106, 1], [106, 3], [69, 3], [69, 5], [69, 5], [69, 2], [69, 4], [69, 6], [69, 1], [108, 1], [113, 2], [113, 3], [113, 2], [113, 3], [113, 4], [114, 3], [114, 4], [114, 3], [114, 4], [116, 2], [116, 3], [118, 4], [118, 2], [47, 2], [47, 3], [120, 1], [120, 3], [101, 3], [101, 3], [101, 3], [101, 3], [101, 3], [101, 3], [101, 3], [101, 3], [101, 5], [101, 3], [101, 3], [126, 2], [126, 3], [128, 1], [128, 3], [129, 3], [125, 2], [125, 3], [15, 1], [132, 1], [134, 1], [82, 1], [82, 3], [82, 5], [82, 4], [82, 6], [127, 5], [136, 1], [36, 1], [123, 1], [124, 1], [4, 0], [4, 1], [5, 0], [5, 1], [6, 0], [6, 1], [7, 0], [7, 1], [8, 0], [8, 1], [16, 0], [16, 1], [27, 1], [27, 1], [29, 1], [29, 1], [32, 1], [32, 1], [32, 1], [59, 0], [59, 1], [66, 1], [66, 1], [66, 1], [66, 1], [76, 1], [76, 1], [76, 1], [76, 1], [79, 1], [79, 1], [79, 1], [79, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [112, 1], [112, 1], [112, 1], [112, 1], [112, 1], [112, 1], [112, 1], [112, 1], [112, 1], [112, 1], [112, 1], [112, 1], [112, 1], [112, 1], [130, 1], [130, 1], [135, 1], [135, 1], [137, 1], [137, 1], [137, 1], [139, 1], [139, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    this.$ = new yy.ast.Module($$[$0 - 5] || [], $$[$0 - 4] || [], $$[$0 - 3] || [], $$[$0 - 2] || null, $$[$0 - 1] || null, this._$);return this.$;

                    break;
                case 2:
                    this.$ = [$$[$0]];
                    break;
                case 3:case 46:case 50:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 4:
                    this.$ = new yy.ast.ImportStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 9:
                    this.$ = new yy.ast.DefaultMember($$[$0], this._$);
                    break;
                case 10:
                    this.$ = new yy.ast.AliasMember($$[$0 - 2], $$[$0], this._$);
                    break;
                case 11:
                    this.$ = new yy.ast.AggregateMember($$[$0], this._$);
                    break;
                case 12:
                    this.$ = new yy.ast.CompositeMember($$[$0 - 1], this._$);
                    break;
                case 13:
                    this.$ = [$$[$0]];
                    break;
                case 14:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 15:case 120:
                    this.$ = [$$[$0]];
                    break;
                case 16:case 36:case 68:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 17:case 34:
                    this.$ = $$[$0];
                    break;
                case 18:
                    this.$ = new yy.ast.ViewStatement($$[$0 - 7], [], $$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 19:
                    this.$ = new yy.ast.ViewStatement($$[$0 - 8], $$[$0 - 7], $$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 20:
                    this.$ = new yy.ast.FragmentStatement($$[$0 - 7], [], [], $$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 21:
                    this.$ = new yy.ast.FragmentStatement($$[$0 - 8], $$[$0 - 7], [], $$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 22:
                    this.$ = new yy.ast.FragmentStatement($$[$0 - 8], [], $$[$0 - 7], $$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 23:
                    this.$ = new yy.ast.FragmentStatement($$[$0 - 9], $$[$0 - 8], $$[$0 - 7], $$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 24:
                    this.$ = $$[$0 - 1];
                    break;
                case 25:
                    this.$ = [$$[$0]];
                    break;
                case 26:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 27:
                    this.$ = new yy.ast.TypeClass($$[$0], null, this._$);
                    break;
                case 28:
                    this.$ = new yy.ast.TypeClass($$[$0 - 2], $$[$0], this._$);
                    break;
                case 29:
                    this.$ = new yy.ast.Type($$[$0], [], this._$);
                    break;
                case 30:
                    this.$ = new yy.ast.Type($$[$0 - 1], $$[$0], this._$);
                    break;
                case 31:
                    this.$ = new yy.ast.ExportFromStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 32:
                    this.$ = new yy.ast.Tag($$[$0 - 6], $$[$0 - 5], $$[$0 - 3] ? $$[$0 - 3] : [], this._$);
                    break;
                case 33:
                    this.$ = new yy.ast.Tag($$[$0 - 2], $$[$0 - 1], [], this._$);
                    break;
                case 35:
                    this.$ = new yy.ast.MemberExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 37:case 103:
                    this.$ = [];
                    break;
                case 38:
                    this.$ = new yy.ast.Attribute($$[$0 - 2].name, $$[$0 - 2].namespace, $$[$0], this._$);
                    break;
                case 39:
                    this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace, new yy.ast.BooleanLiteral(true, this._$), this._$);
                    break;
                case 40:
                    this.$ = { namespace: null, name: $$[$0] };
                    break;
                case 41:
                    this.$ = { namespace: $$[$0 - 2], name: $$[$0] };
                    break;
                case 42:case 51:case 53:
                    this.$ = $$[$0];
                    break;
                case 43:
                    this.$ = new yy.ast.Interpolation($$[$0 - 1], [], this._$);
                    break;
                case 44:
                    this.$ = new yy.ast.Interpolation($$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 45:
                    this.$ = [$$[$0]];
                    break;
                case 47:
                    this.$ = new yy.ast.Filter($$[$0], [], this._$);
                    break;
                case 48:
                    this.$ = new yy.ast.Filter($$[$0 - 1], $$[$0], this._$);
                    break;
                case 49:
                    this.$ = [$$[$0]];
                    break;
                case 52:
                    this.$ = new yy.ast.TextInterpolation($$[$0], this._$);
                    break;
                case 54:
                    this.$ = new yy.ast.ForStatement($$[$0 - 7], null, null, $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 55:
                    this.$ = new yy.ast.ForStatement($$[$0 - 9], $$[$0 - 7], null, $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 56:
                    this.$ = new yy.ast.ForStatement($$[$0 - 11], $$[$0 - 9], $$[$0 - 7], $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 57:
                    this.$ = new yy.ast.ForStatement($$[$0 - 11], null, null, $$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 58:
                    this.$ = new yy.ast.ForStatement($$[$0 - 13], $$[$0 - 11], null, $$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 59:
                    this.$ = new yy.ast.ForStatement($$[$0 - 15], $$[$0 - 13], null, $$[$0 - 11], $$[$0 - 9], $$[$0 - 3], this._$);
                    break;
                case 60:
                    this.$ = new yy.ast.IfStatement($$[$0 - 5], $$[$0 - 3], null, this._$);
                    break;
                case 61:
                    this.$ = new yy.ast.IfStatement($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 62:
                    this.$ = new yy.ast.ElseClause($$[$0 - 3], this._$);
                    break;
                case 63:
                    this.$ = new yy.ast.ElseIfClause($$[$0 - 5], $$[$0 - 3], null, this._$);
                    break;
                case 64:
                    this.$ = new yy.ast.ElseIfClause($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 65:
                    this.$ = new yy.ast.MatchStatement($$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 66:
                    this.$ = new yy.ast.MatchStatement($$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 67:
                    this.$ = [$$[$0]];
                    break;
                case 69:
                    this.$ = new yy.ast.TypeOfCaseStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 70:
                    this.$ = new yy.ast.InstanceOfCaseStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 71:case 74:
                    this.$ = new yy.ast.CallStatement($$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 72:case 73:
                    this.$ = new yy.ast.CallStatement($$[$0 - 1], [], this._$);
                    break;
                case 75:
                    this.$ = new yy.ast.CallStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 76:
                    this.$ = new yy.ast.CallStatement($$[$0 - 2], [], this._$);
                    break;
                case 77:
                    this.$ = new yy.ast.Characters($$[$0], this._$);
                    break;
                case 78:
                    this.$ = [];
                    break;
                case 79:
                    this.$ = $$[$0 - 1];
                    break;
                case 80:
                    this.$ = [$$[$0]];
                    break;
                case 81:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 82:
                    this.$ = $$[$0 - 1];
                    break;
                case 83:
                    this.$ = new yy.ast.TernaryExpression($$[$0 - 4], $$[$0 - 2], $$[$0], this._$);
                    break;
                case 84:
                    this.$ = new yy.ast.BinaryExpression($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 85:
                    this.$ = new yy.ast.UnaryExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 86:
                    this.$ = new yy.ast.ReadExpression($$[$0 - 1], null, this._$);
                    break;
                case 87:
                    this.$ = new yy.ast.ReadExpression($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 88:
                    this.$ = $$[$0];
                    break;
                case 89:
                    this.$ = yy.help.convertOperator($$[$0]);
                    break;
                case 90:case 92:
                    this.$ = new yy.ast.CallExpression($$[$0 - 1], [], $$[$0], this._$);
                    break;
                case 91:case 93:
                    this.$ = new yy.ast.CallExpression($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 94:
                    this.$ = new yy.ast.CallExpression($$[$0 - 2], [], $$[$0], this._$);
                    break;
                case 95:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 96:
                    this.$ = new yy.ast.BindExpression($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 97:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 98:
                    this.$ = new yy.ast.BindExpression($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 99:
                    this.$ = new yy.ast.NewExpression($$[$0], [], this._$);
                    break;
                case 100:
                    this.$ = new yy.ast.NewExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 101:
                    this.$ = new yy.ast.FunctionExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 102:
                    this.$ = new yy.ast.FunctionExpression([], $$[$0], this._$);
                    break;
                case 104:
                    this.$ = $$[$0 - 1];
                    break;
                case 105:
                    this.$ = [$$[$0]];
                    break;
                case 106:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 116:case 117:
                    this.$ = new yy.ast.MemberExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 115:
                    this.$ = new yy.ast.MemberExpression($$[$0 - 3], $$[$0], this._$);
                    break;
                case 118:
                    this.$ = new yy.ast.ObjectLiteral([], this._$);
                    break;
                case 119:
                    this.$ = new yy.ast.ObjectLiteral($$[$0 - 1], this._$);
                    break;
                case 121:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 122:
                    this.$ = { key: $$[$0 - 2], value: $$[$0] };
                    break;
                case 123:
                    this.$ = new yy.ast.ArrayLiteral([], this._$);
                    break;
                case 124:
                    this.$ = new yy.ast.ArrayLiteral($$[$0 - 1], this._$);
                    break;
                case 125:
                    this.$ = new yy.ast.StringLiteral($$[$0], this._$);
                    break;
                case 126:
                    this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$);
                    break;
                case 127:
                    this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
                    break;
                case 128:
                    this.$ = $$[$0];
                    break;
                case 129:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 2], $$[$0], [], false, this._$);
                    break;
                case 130:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 4], $$[$0 - 2], [], true, this._$);
                    break;
                case 131:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 3], $$[$0 - 1], $$[$0], false, this._$);
                    break;
                case 132:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 5], $$[$0 - 3], $$[$0 - 2], true, this._$);
                    break;
                case 133:
                    this.$ = new yy.ast.TypeAssertion($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 134:
                    this.$ = $$[$0];
                    break;
                case 135:
                    this.$ = new yy.ast.Identifier($$[$0], '', this._$);
                    break;
                case 136:
                    this.$ = new yy.ast.ContextProperty($$[$0].slice(1), this._$);
                    break;
                case 137:
                    this.$ = new yy.ast.ContextVariable(this._$);
                    break;
            }
        },
        table: [o($V0, [2, 138], { 3: 1, 4: 2, 10: 3, 11: 4, 12: $V1 }), { 1: [3] }, o($V2, [2, 140], { 5: 6, 30: 7, 31: 8, 32: 9, 33: 10, 43: 11, 53: 12, 34: $V3 }), o($V0, [2, 139], { 11: 14, 12: $V1 }), o($V4, [2, 2]), { 13: 15, 17: 16, 18: 17, 19: 18, 20: 19, 21: $V5, 23: [1, 21], 24: [1, 22] }, o($V6, [2, 142], { 6: 23, 42: 24, 48: $V7 }), o($V2, [2, 141], { 32: 9, 33: 10, 43: 11, 53: 12, 31: 26, 34: $V3 }), o($V0, [2, 15]), o($V0, [2, 17]), o($V0, [2, 154]), o($V0, [2, 155]), o($V0, [2, 156]), { 35: [1, 27], 44: [1, 28], 54: [1, 29] }, o($V4, [2, 3]), { 14: [1, 30] }, { 14: [2, 5] }, { 14: [2, 6] }, { 14: [2, 7] }, { 14: [2, 8] }, o($V8, [2, 9], { 22: [1, 31] }), { 22: [1, 32] }, { 17: 35, 18: 36, 21: $V5, 25: 33, 27: 34 }, o($V9, [2, 144], { 7: 37, 38: 38, 36: 39, 21: $Va }), o($V6, [2, 143]), { 21: $Va, 36: 43, 49: 41, 51: 42 }, o($V0, [2, 16]), { 21: $Va, 36: 44 }, { 21: $Va, 36: 45 }, { 21: [1, 46] }, { 15: 47, 131: $Vb }, { 21: [1, 49] }, { 21: [1, 50] }, { 26: [1, 51], 28: [1, 52] }, o($Vc, [2, 13]), o($Vc, [2, 150]), o($Vc, [2, 151]), { 8: 53, 9: [2, 146], 40: 54, 55: $Vd }, o($V9, [2, 145]), o($Ve, [2, 29], { 42: 56, 48: $V7 }), o([9, 21, 22, 26, 28, 37, 39, 48, 50, 52, 55, 58, 61, 64, 70, 73, 83, 98, 102, 103, 107, 115, 121, 122, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], [2, 135]), { 28: [1, 58], 50: [1, 57] }, o($Vf, [2, 25]), o($Vf, [2, 27], { 52: [1, 59] }), { 37: [1, 60], 42: 61, 48: $V7 }, { 37: [1, 62], 42: 63, 47: 64, 48: $V7, 102: $Vg }, { 14: [1, 66] }, o($V4, [2, 148], { 16: 67, 140: [1, 68] }), o([9, 12, 21, 22, 26, 28, 34, 39, 48, 50, 52, 55, 58, 61, 64, 70, 73, 98, 103, 107, 122, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], [2, 125]), o($V8, [2, 10]), { 14: [2, 11] }, { 14: [2, 12] }, { 17: 70, 18: 71, 21: $V5, 29: 69 }, { 9: [1, 72] }, { 9: [2, 147] }, { 21: $Va, 36: 74, 56: 73 }, o($Ve, [2, 30]), o([9, 21, 28, 37, 39, 48, 50, 55, 83, 102, 103, 121], [2, 24]), { 21: $Va, 36: 43, 51: 75 }, { 21: $Va, 36: 39, 38: 76 }, { 21: $Va, 36: 39, 38: 77 }, { 37: [1, 78] }, { 21: $Va, 36: 39, 38: 79 }, { 37: [1, 80], 47: 81, 102: $Vg }, { 37: [1, 82] }, { 21: $Va, 36: 86, 82: 85, 103: [1, 83], 120: 84 }, { 15: 87, 131: $Vb }, o($V4, [2, 4]), o($V4, [2, 149]), o($Vc, [2, 14]), o($Vc, [2, 152]), o($Vc, [2, 153]), { 1: [2, 1] }, o($Vh, [2, 37], { 57: 88 }), o($Vi, [2, 34], { 52: [1, 89] }), o($Vf, [2, 26]), o($Vf, [2, 28]), { 39: [1, 90] }, { 21: $Va, 36: 39, 38: 91 }, { 39: [1, 92] }, { 21: $Va, 36: 39, 38: 93 }, { 37: [1, 94] }, { 21: $Va, 36: 39, 38: 95 }, { 37: [2, 103] }, { 28: $Vj, 103: [1, 96] }, o($Vk, [2, 105]), o($Vl, [2, 128], { 52: [1, 98] }), { 39: [1, 99] }, { 21: [1, 104], 58: [1, 100], 61: [1, 101], 62: 102, 63: 103 }, { 21: $Va, 36: 105 }, { 40: 106, 55: $Vd }, { 39: [1, 107] }, { 34: $Vm, 40: 111, 45: 108, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 39: [1, 124] }, { 21: $Va, 36: 39, 38: 125 }, { 39: [1, 126] }, { 37: [2, 104] }, { 21: $Va, 36: 86, 82: 127 }, { 21: $Va, 36: 128 }, o($V0, [2, 31]), { 34: $Vm, 40: 111, 45: 130, 55: $Vd, 59: 129, 60: [2, 157], 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, o($Vp, [2, 33]), o($Vh, [2, 36]), o($Vh, [2, 39], { 64: [1, 131] }), o($Vq, [2, 40], { 52: [1, 132] }), o($Vi, [2, 35]), { 34: [1, 133] }, { 40: 134, 55: $Vd }, { 34: [1, 135], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, o($Vr, [2, 49]), o($Vr, [2, 51]), o($Vr, [2, 163]), o($Vr, [2, 164]), o($Vr, [2, 165]), o($Vr, [2, 166]), o($Vr, [2, 53]), o($Vr, [2, 52]), o($Vr, [2, 77]), o($Vr, [2, 167]), o($Vr, [2, 168]), o($Vr, [2, 169]), o($Vr, [2, 170]), { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 137, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, { 81: $VG, 87: $VH, 91: $VI, 100: $VJ }, { 34: $Vm, 40: 111, 45: 175, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 39: [1, 176] }, { 34: $Vm, 40: 111, 45: 177, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, o($Vk, [2, 106]), o($Vl, [2, 129], { 42: 179, 48: [1, 178] }), { 60: [1, 180] }, { 34: $Vm, 40: 111, 55: $Vd, 60: [2, 158], 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 15: 184, 65: 181, 66: 182, 67: 183, 68: $Vn, 131: $Vb, 132: 185, 133: $VA, 134: 186, 135: 162, 151: $VC, 152: $VD }, { 21: [1, 187] }, { 41: [1, 188] }, { 34: [1, 189] }, { 46: [1, 190], 81: $VG, 87: $VH, 91: $VI, 100: $VJ }, o($Vr, [2, 50]), { 70: [1, 191], 71: 192, 72: 194, 73: $VK, 107: $VL }, { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 196, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 197, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, { 48: [1, 198] }, o($VM, [2, 88]), o($VM, [2, 171]), o($VM, [2, 172], { 122: $VN }), o($VM, [2, 173], { 74: 200, 42: 201, 48: $V7, 102: $VO, 115: $VP, 122: $VQ }), o($VM, [2, 174]), o($VM, [2, 175], { 122: $VR }), o($VM, [2, 176], { 122: $VS }), o($VM, [2, 177], { 122: $VT }), o($VM, [2, 178], { 122: $VU }), o($VM, [2, 179]), o($VM, [2, 180]), o($VM, [2, 181], { 122: $VV }), o($VM, [2, 182]), { 21: $Va, 36: 210 }, o($VM, [2, 201], { 74: 211, 42: 212, 48: $V7, 102: $VO, 115: $VW, 122: $VX }), o($VM, [2, 202], { 122: $VY }), o($VM, [2, 203], { 122: $VZ }), { 21: $Va, 36: 86, 82: 85, 120: 217 }, { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 218, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, { 21: $V_, 26: [1, 219], 128: 220, 129: 221, 130: 222, 131: $V$ }, { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 50: [1, 225], 69: 227, 101: 144, 102: $Vu, 106: 226, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, o($V01, [2, 127]), o($V01, [2, 126]), o($VM, [2, 134]), o($V11, [2, 136]), o($V11, [2, 137]), o($V01, [2, 199]), o($V01, [2, 200]), o($V11, [2, 204]), o($V11, [2, 205]), { 21: $Va, 36: 86, 82: 228 }, { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 229, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, { 21: $Va, 36: 230 }, { 15: 238, 21: $Va, 24: $Vs, 36: 231, 48: $Vt, 101: 232, 102: [1, 233], 113: 239, 114: 240, 123: 234, 124: 235, 125: 236, 126: 237, 127: 241, 131: $Vb, 138: $VB, 139: 166, 153: $VE, 154: $VF }, { 34: [1, 242], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 34: $Vm, 40: 111, 45: 243, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 34: [1, 244], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 21: $Va, 36: 43, 49: 41, 50: [1, 245], 51: 42 }, o($Vl, [2, 131], { 48: [1, 246] }), { 21: $Va, 36: 74, 56: 247 }, o($Vh, [2, 38]), o($Vh, [2, 42]), o($Vh, [2, 159]), o($Vh, [2, 160]), o($Vh, [2, 161]), o($Vh, [2, 162]), o($Vq, [2, 41]), { 39: [1, 248] }, { 41: [1, 249] }, { 39: [1, 250] }, o($V21, [2, 43]), { 70: [1, 251], 72: 252, 73: $VK }, { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 253, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, o($V31, [2, 45]), { 21: $Va, 36: 74, 56: 254 }, { 22: $V41, 55: [1, 261], 58: [1, 259], 64: [1, 268], 98: [1, 272], 103: [1, 255], 107: $VL, 108: 256, 112: 258, 141: [1, 260], 142: [1, 262], 143: [1, 263], 144: [1, 264], 145: [1, 265], 146: [1, 266], 147: [1, 267], 148: [1, 269], 149: [1, 270], 150: [1, 271] }, o($VM, [2, 85]), { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 273, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, { 21: $Va, 36: 274 }, o($V11, $V51), { 74: 275, 102: $VO }, { 21: $Va, 36: 276 }, { 21: $Va, 36: 277 }, { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 227, 101: 144, 102: $Vu, 103: [1, 278], 106: 279, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, { 21: $Va, 36: 280 }, { 21: $Va, 36: 281 }, { 21: $Va, 36: 282 }, { 21: $Va, 36: 283 }, { 21: $Va, 36: 284 }, o($VM, [2, 99], { 74: 285, 102: $VO }), o($V11, $V61), { 74: 286, 102: $VO }, { 21: $Va, 36: 287 }, { 21: $Va, 36: 288 }, { 21: $Va, 36: 289 }, { 21: $Va, 36: 290 }, { 28: $Vj, 121: [1, 291] }, o($V71, [2, 102], { 107: $VL }), o($V11, [2, 118]), { 26: [1, 292], 28: [1, 293] }, o($Vc, [2, 120]), { 52: [1, 294] }, { 52: [2, 197] }, { 52: [2, 198] }, o($V11, [2, 123]), { 28: $V81, 50: [1, 295] }, o($V91, [2, 80], { 107: $VL }), { 28: [1, 298], 83: [1, 297] }, { 39: [1, 299], 107: $VL }, { 39: [1, 300] }, { 39: [1, 302], 42: 212, 48: $V7, 74: 301, 102: $VO, 115: $VW, 122: $VX }, { 39: [1, 303], 42: 201, 48: $V7, 74: 304, 102: $VO, 115: $VP, 122: $VQ }, { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 305, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, { 122: $VY }, { 122: $VZ }, { 122: $VT }, { 122: $VS }, { 122: $VU }, { 122: $VN }, { 122: $VR }, { 122: $VV }, { 46: [1, 306], 81: $VG, 87: $VH, 91: $VI, 100: $VJ }, { 34: [1, 307], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 46: [1, 308], 81: $VG, 87: $VH, 91: $VI, 100: $VJ }, o($Vl, [2, 130]), { 50: [1, 309] }, { 58: [1, 310] }, o($V0, [2, 18]), { 39: [1, 311] }, o($V0, [2, 20]), o($V21, [2, 44]), o($V31, [2, 46]), { 52: $Va1, 107: $VL }, o($V31, [2, 47], { 74: 313, 102: $VO }), o($VM, [2, 82], { 74: 314, 102: $VO, 122: $Vb1 }), { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 316, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, { 21: $Va, 36: 317 }, o($Vc1, [2, 89]), o($Vc1, [2, 183]), o($Vc1, [2, 184]), o($Vc1, [2, 185]), o($Vc1, [2, 186]), o($Vc1, [2, 187]), o($Vc1, [2, 188]), o($Vc1, [2, 189]), o($Vc1, [2, 190]), o($Vc1, [2, 191]), o($Vc1, [2, 192]), o($Vc1, [2, 193]), o($Vc1, [2, 194]), o($Vc1, [2, 195]), o($Vc1, [2, 196]), { 50: [1, 318], 107: [1, 319] }, o($Vd1, [2, 113]), o($V11, [2, 93]), o($Vd1, [2, 117]), o($V11, [2, 97], { 74: 320, 102: $VO }), o($V11, [2, 78]), { 28: $V81, 103: [1, 321] }, o($Vd1, [2, 114]), o($Vd1, [2, 111]), o($Vd1, [2, 110]), o($Vd1, [2, 112]), o($Vd1, [2, 116]), o($VM, [2, 100]), o($V11, [2, 91]), o($Vd1, [2, 107]), o($V11, [2, 95], { 74: 322, 102: $VO }), o($Vd1, [2, 108]), o($Vd1, [2, 109]), { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 323, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, o($V11, [2, 119]), { 21: $V_, 129: 324, 130: 222, 131: $V$ }, { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 325, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, o($V11, [2, 124]), { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 326, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 327, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, { 21: $Va, 36: 86, 82: 328 }, { 34: $Vm, 40: 111, 45: 329, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 34: [1, 332], 92: 330, 94: 331 }, { 39: [1, 333], 122: $V61 }, o($Vr, [2, 72]), o($Vr, [2, 73]), { 39: [1, 334], 122: $V51 }, { 22: $V41, 103: [1, 335], 107: $VL }, { 39: [1, 336] }, { 46: [1, 337], 81: $VG, 87: $VH, 91: $VI, 100: $VJ }, { 39: [1, 338] }, o($Vl, [2, 132]), o($Vp, [2, 32]), o($V0, [2, 19]), { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 339, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, o($V31, [2, 48]), o($V11, $Ve1), { 21: $Va, 36: 340 }, { 103: [1, 341], 107: $VL }, { 103: [1, 342] }, o($VM, [2, 86]), { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 343, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, o($V11, [2, 98]), o($V11, [2, 79]), o($V11, [2, 96]), o($V71, [2, 101], { 107: $VL }), o($Vc, [2, 121]), o($Vc, [2, 122], { 107: $VL }), o($V91, [2, 81], { 107: $VL }), { 39: [1, 344], 107: $VL }, { 28: [1, 346], 83: [1, 345] }, { 34: [1, 347], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 89: 348, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 34: [1, 349], 94: 350 }, { 34: [2, 67] }, { 95: $Vf1 }, o($Vr, [2, 71]), o($Vr, [2, 74]), { 39: [1, 353], 74: 352, 102: $VO, 122: $Vb1 }, o($V0, [2, 21]), { 39: [1, 354] }, o($V0, [2, 22]), o($V71, [2, 83], { 107: $VL }), o($Vd1, [2, 115]), o($VM, [2, 84]), o($V11, [2, 133]), { 50: [1, 355], 52: $Va1, 107: $VL }, { 34: $Vm, 40: 111, 45: 356, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 357, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, { 21: $Va, 36: 86, 82: 358 }, { 81: $VG, 85: $Vg1, 87: $VH, 88: [1, 359], 91: $VI, 100: $VJ }, o($Vr, [2, 61]), { 85: [1, 361], 93: [1, 362], 95: $Vf1 }, { 34: [2, 68] }, { 96: [1, 363], 98: [1, 364] }, { 39: [1, 365], 122: $Ve1 }, o($Vr, [2, 76]), o($V0, [2, 23]), o($VM, [2, 87]), { 34: [1, 366], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 39: [1, 367], 107: $VL }, { 83: [1, 368] }, { 39: [1, 369] }, { 39: [1, 370], 87: [1, 371] }, { 39: [1, 372] }, { 39: [1, 373] }, { 15: 374, 131: $Vb }, { 21: $Va, 36: 375 }, o($Vr, [2, 75]), { 81: $VG, 84: [1, 376], 85: [1, 377], 87: $VH, 91: $VI, 100: $VJ }, { 34: $Vm, 40: 111, 45: 378, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 379, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, o($Vr, [2, 60]), { 34: $Vm, 40: 111, 45: 380, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 15: 149, 21: $Va, 24: $Vs, 36: 155, 48: $Vt, 69: 381, 101: 144, 102: $Vu, 109: $Vv, 110: $Vw, 111: 141, 113: 143, 114: 146, 116: 142, 117: $Vx, 118: 145, 119: $Vy, 121: $Vz, 123: 156, 124: 157, 125: 148, 126: 147, 127: 152, 131: $Vb, 132: 151, 133: $VA, 134: 150, 135: 162, 136: 153, 137: 164, 138: $VB, 139: 166, 151: $VC, 152: $VD, 153: $VE, 154: $VF }, { 34: $Vm, 40: 111, 45: 382, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, o($Vr, [2, 66]), { 39: [1, 383] }, { 39: [1, 384] }, { 39: [1, 385] }, { 39: [1, 386] }, { 34: [1, 387], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 39: [1, 388], 107: $VL }, { 34: [1, 389], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 39: [1, 390], 107: $VL }, { 34: [1, 391], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 34: $Vm, 40: 111, 45: 392, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 34: $Vm, 40: 111, 45: 393, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, o($Vr, [2, 54]), { 34: $Vm, 40: 111, 45: 394, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 81: $VG, 84: [1, 395], 85: [1, 396], 87: $VH, 91: $VI, 100: $VJ }, { 34: $Vm, 40: 111, 45: 397, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 81: $VG, 87: $VH, 88: [1, 398], 91: $VI, 100: $VJ }, { 34: $Vm, 40: 111, 45: 399, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 81: $VG, 87: $VH, 91: $VI, 93: [1, 400], 100: $VJ }, { 34: [1, 401], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 34: [1, 402], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 34: [1, 403], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 39: [1, 404] }, { 39: [1, 405] }, { 34: [1, 406], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 39: [1, 407] }, { 34: [1, 408], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 89: 409, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 39: [1, 410] }, { 81: $VG, 87: $VH, 91: $VI, 97: [1, 411], 100: $VJ }, { 81: $VG, 87: $VH, 91: $VI, 97: [1, 412], 100: $VJ }, { 81: $VG, 84: [1, 413], 87: $VH, 91: $VI, 100: $VJ }, o($Vr, [2, 55]), { 34: $Vm, 40: 111, 45: 414, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 81: $VG, 84: [1, 415], 85: [1, 416], 87: $VH, 91: $VI, 100: $VJ }, o($Vr, [2, 62]), { 81: $VG, 85: $Vg1, 87: $VH, 88: [1, 417], 91: $VI, 100: $VJ }, o($Vr, [2, 64]), o($Vr, [2, 65]), { 39: [1, 418] }, { 39: [1, 419] }, { 39: [1, 420] }, { 34: [1, 421], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, { 39: [1, 422] }, { 39: [1, 423] }, { 39: [1, 424] }, { 34: [2, 69] }, { 34: [2, 70] }, o($Vr, [2, 57]), { 81: $VG, 84: [1, 425], 87: $VH, 91: $VI, 100: $VJ }, o($Vr, [2, 56]), { 34: $Vm, 40: 111, 45: 426, 55: $Vd, 67: 116, 68: $Vn, 75: 109, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, o($Vr, [2, 63]), { 39: [1, 427] }, { 34: [1, 428], 40: 111, 55: $Vd, 67: 116, 68: $Vn, 75: 136, 76: 110, 77: 113, 78: 112, 79: 115, 80: 118, 86: 119, 90: 120, 99: 121, 104: 114, 105: $Vo }, o($Vr, [2, 58]), { 81: $VG, 84: [1, 429], 87: $VH, 91: $VI, 100: $VJ }, { 39: [1, 430] }, o($Vr, [2, 59])],
        defaultActions: { 16: [2, 5], 17: [2, 6], 18: [2, 7], 19: [2, 8], 50: [2, 11], 51: [2, 12], 54: [2, 147], 72: [2, 1], 83: [2, 103], 96: [2, 104], 223: [2, 197], 224: [2, 198], 331: [2, 67], 350: [2, 68], 418: [2, 69], 419: [2, 70] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "flex": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return;
                        break;
                    case 1:
                        return 12;
                        break;
                    case 2:
                        return 14;
                        break;
                    case 3:
                        return 60;
                        break;
                    case 4:
                        this.begin('CONTROL');return 34;
                        break;
                    case 5:
                        this.begin('COMMENT');return;
                        break;
                    case 6:
                        this.begin('CHILDREN');return 58;
                        break;
                    case 7:
                        this.begin('CHILDREN');return 61;
                        break;
                    case 8:
                        this.begin('EXPRESSION');return 68;
                        break;
                    case 9:
                        return 'MACRO';
                        break;
                    case 10:
                        return 'ENDMACRO';
                        break;
                    case 11:
                        return 44;
                        break;
                    case 12:
                        return 46;
                        break;
                    case 13:
                        return 81;
                        break;
                    case 14:
                        return 84;
                        break;
                    case 15:
                        return 87;
                        break;
                    case 16:
                        return 88;
                        break;
                    case 17:
                        return 85;
                        break;
                    case 18:
                        return 'ELSEIF';
                        break;
                    case 19:
                        return 83;
                        break;
                    case 20:
                        return 'SWITCH';
                        break;
                    case 21:
                        return 'ENDSWITCH';
                        break;
                    case 22:
                        return 'DEFAULT';
                        break;
                    case 23:
                        return 95;
                        break;
                    case 24:
                        return 97;
                        break;
                    case 25:
                        return 100;
                        break;
                    case 26:
                        return 54;
                        break;
                    case 27:
                        return 14;
                        break;
                    case 28:
                        return 'ENDEXPORT';
                        break;
                    case 29:
                        return 35;
                        break;
                    case 30:
                        return 37;
                        break;
                    case 31:
                        return 41;
                        break;
                    case 32:
                        return 91;
                        break;
                    case 33:
                        return 93;
                        break;
                    case 34:
                        return 'OTHERWISE';
                        break;
                    case 35:
                        return 'ENDOTHERWISE';
                        break;
                    case 36:
                        return 98;
                        break;
                    case 37:
                        return 96;
                        break;
                    case 38:
                        this.popState();return 39;
                        break;
                    case 39:
                        return 117;
                        break;
                    case 40:
                        return 73;
                        break;
                    case 41:
                        return 121;
                        break;
                    case 42:
                        return 115;
                        break;
                    case 43:
                        return '->';
                        break;
                    case 44:
                        return 98;
                        break;
                    case 45:
                        return 110;
                        break;
                    case 46:
                        this.popState();return 70;
                        break;
                    case 47:
                        this.begin('EXPRESSION');return 68;
                        break;
                    case 48:
                        this.begin('CONTROL');return 34;
                        break;
                    case 49:
                        this.begin('COMMENT');return;
                        break;
                    case 50:
                        this.popState();return 60;
                        break;
                    case 51:
                        this.popState();return 55;
                        break;
                    case 52:
                        this.popState();return 105;
                        break;
                    case 53:
                        this.popState();return;
                        break;
                    case 54:
                        return 151;
                        break;
                    case 55:
                        return 152;
                        break;
                    case 56:
                        return 133;
                        break;
                    case 57:
                        return 131;
                        break;
                    case 58:
                        return 58;
                        break;
                    case 59:
                        return 55;
                        break;
                    case 60:
                        return 102;
                        break;
                    case 61:
                        return 103;
                        break;
                    case 62:
                        return 48;
                        break;
                    case 63:
                        return 50;
                        break;
                    case 64:
                        return 140;
                        break;
                    case 65:
                        return 52;
                        break;
                    case 66:
                        return ':::';
                        break;
                    case 67:
                        return 64;
                        break;
                    case 68:
                        return 143;
                        break;
                    case 69:
                        return 144;
                        break;
                    case 70:
                        return 141;
                        break;
                    case 71:
                        return 142;
                        break;
                    case 72:
                        return 145;
                        break;
                    case 73:
                        return 147;
                        break;
                    case 74:
                        return 23;
                        break;
                    case 75:
                        return 146;
                        break;
                    case 76:
                        return 119;
                        break;
                    case 77:
                        return 148;
                        break;
                    case 78:
                        return 149;
                        break;
                    case 79:
                        return 150;
                        break;
                    case 80:
                        return 109;
                        break;
                    case 81:
                        return 28;
                        break;
                    case 82:
                        return 107;
                        break;
                    case 83:
                        return 122;
                        break;
                    case 84:
                        return 24;
                        break;
                    case 85:
                        return 26;
                        break;
                    case 86:
                        return 153;
                        break;
                    case 87:
                        return 22;
                        break;
                    case 88:
                        return 21;
                        break;
                    case 89:
                        return 138;
                        break;
                    case 90:
                        return 9;
                        break;
                    case 91:
                        console.log(yy_.yytext);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:import)/, /^(?:from)/, /^(?:<\/)/, /^(?:\{%)/, /^(?:<!--)/, /^(?:>)/, /^(?:\/>)/, /^(?:\{\{)/, /^(?:macro)/, /^(?:endmacro)/, /^(?:frag)/, /^(?:endfrag)/, /^(?:for)/, /^(?:endfor)/, /^(?:if)/, /^(?:endif)/, /^(?:else)/, /^(?:elseif)/, /^(?:in)/, /^(?:switch)/, /^(?:endswitch)/, /^(?:default)/, /^(?:case)/, /^(?:endcase)/, /^(?:call)/, /^(?:export)/, /^(?:from)/, /^(?:endexport)/, /^(?:view)/, /^(?:using)/, /^(?:endview)/, /^(?:match)/, /^(?:endmatch)/, /^(?:otherwise)/, /^(?:endotherwise)/, /^(?:instanceof)/, /^(?:typeof)/, /^(?:%\})/, /^(?:new)/, /^(?:\|)/, /^(?:=>)/, /^(?:::)/, /^(?:->)/, /^(?:instanceof)/, /^(?:@@)/, /^(?:\}\})/, /^(?:\{\{)/, /^(?:\{%)/, /^(?:<!--)/, /^(?:<\/)/, /^(?:<)/, /^(?:[^\/<>{%}]+)/, /^(?:(.|\r|\n)*?-->)/, /^(?:true)/, /^(?:false)/, /^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/, /^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/, /^(?:>)/, /^(?:<)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:;)/, /^(?::)/, /^(?::::)/, /^(?:=)/, /^(?:==)/, /^(?:!=)/, /^(?:>=)/, /^(?:<=)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:\\)/, /^(?:&&)/, /^(?:\|\|)/, /^(?:\^)/, /^(?:!)/, /^(?:,)/, /^(?:\?)/, /^(?:\.)/, /^(?:\{)/, /^(?:\})/, /^(?:@)/, /^(?:as)/, /^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/, /^(?:@([a-zA-Z$_][a-zA-Z$_0-9-]*))/, /^(?:$)/, /^(?:.)/],
            conditions: { "EXPRESSION": { "rules": [0, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "inclusive": false }, "CONTROL": { "rules": [0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "inclusive": false }, "COMMENT": { "rules": [0, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "inclusive": false }, "CHILDREN": { "rules": [0, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "inclusive": false }, "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = ParserImpl;
    exports.Parser = ParserImpl.Parser;
    exports.parse = function () {
        return ParserImpl.parse.apply(ParserImpl, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,