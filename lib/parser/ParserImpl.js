"use strict";

/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [7, 32, 53],
        $V1 = [1, 5],
        $V2 = [7, 53],
        $V3 = [1, 13],
        $V4 = [7, 10, 32, 53],
        $V5 = [1, 20],
        $V6 = [1, 25],
        $V7 = [12, 24, 26],
        $V8 = [1, 40],
        $V9 = [1, 43],
        $Va = [1, 47],
        $Vb = [24, 26],
        $Vc = [19, 56, 59],
        $Vd = [19, 56, 59, 69, 72, 101],
        $Ve = [26, 49],
        $Vf = [1, 95],
        $Vg = [1, 94],
        $Vh = [1, 89],
        $Vi = [7, 32, 53, 58, 67, 104],
        $Vj = [19, 56, 59, 63],
        $Vk = [32, 53, 58, 67, 104],
        $Vl = [1, 131],
        $Vm = [1, 132],
        $Vn = [1, 110],
        $Vo = [1, 111],
        $Vp = [1, 112],
        $Vq = [1, 126],
        $Vr = [1, 129],
        $Vs = [1, 130],
        $Vt = [1, 134],
        $Vu = [1, 136],
        $Vv = [1, 137],
        $Vw = [1, 138],
        $Vx = [1, 139],
        $Vy = [1, 140],
        $Vz = [1, 141],
        $VA = [1, 142],
        $VB = [1, 164],
        $VC = [1, 162],
        $VD = [20, 24, 26, 37, 49, 53, 56, 60, 63, 69, 72, 97, 102, 106, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147],
        $VE = [1, 168],
        $VF = [1, 173],
        $VG = [1, 172],
        $VH = [1, 171],
        $VI = [1, 174],
        $VJ = [1, 175],
        $VK = [1, 176],
        $VL = [1, 177],
        $VM = [1, 178],
        $VN = [1, 183],
        $VO = [1, 182],
        $VP = [1, 184],
        $VQ = [1, 191],
        $VR = [1, 192],
        $VS = [19, 20, 24, 26, 37, 49, 53, 56, 59, 60, 63, 69, 72, 97, 102, 106, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147],
        $VT = [20, 24, 26, 37, 49, 53, 56, 60, 63, 69, 72, 97, 102, 106, 121, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147],
        $VU = [1, 211],
        $VV = [26, 102, 120],
        $VW = [26, 82, 102, 120],
        $VX = [19, 32, 53, 56, 58, 59, 67, 104],
        $VY = [69, 72],
        $VZ = [1, 223],
        $V_ = [2, 88],
        $V$ = [2, 86],
        $V01 = [20, 24, 26, 37, 49, 53, 56, 60, 63, 69, 72, 97, 102, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147],
        $V11 = [1, 261],
        $V21 = [26, 49, 102],
        $V31 = [1, 277],
        $V41 = [1, 280],
        $V51 = [19, 22, 47, 101, 108, 109, 116, 118, 120, 129, 131, 136, 148, 149],
        $V61 = [20, 24, 26, 37, 47, 49, 53, 56, 60, 63, 69, 72, 97, 101, 102, 106, 114, 121, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147],
        $V71 = [2, 90],
        $V81 = [1, 318],
        $V91 = [1, 330];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "module": 3, "module_option0": 4, "module_option1": 5, "module_option2": 6, "EOF": 7, "imports": 8, "import_statement": 9, "IMPORT": 10, "import_member": 11, "FROM": 12, "string_literal": 13, "import_statement_option0": 14, "default_member": 15, "alias_member": 16, "aggregate_member": 17, "composite_member": 18, "IDENTIFIER": 19, "AS": 20, "*": 21, "{": 22, "member_list": 23, "}": 24, "member_list_group0": 25, ",": 26, "member_list_group1": 27, "exports": 28, "export": 29, "export_group0": 30, "view_statement": 31, "{%": 32, "VIEW": 33, "identifier": 34, "USING": 35, "type": 36, "%}": 37, "tag": 38, "ENDVIEW": 39, "type_classes": 40, "macro_statement": 41, "MACRO": 42, "children": 43, "ENDMACRO": 44, "macro_statement_option0": 45, "parameters": 46, "[": 47, "type_class_list": 48, "]": 49, "type_class": 50, "export_from_statement": 51, "EXPORT": 52, "<": 53, "tagname": 54, "attributes": 55, ">": 56, "tag_option0": 57, "</": 58, "/>": 59, ":": 60, "attribute": 61, "attribute_name": 62, "=": 63, "attribute_value": 64, "attribute_value_group0": 65, "interpolation": 66, "{{": 67, "expression": 68, "}}": 69, "filters": 70, "filter": 71, "|": 72, "arguments": 73, "child": 74, "child_group0": 75, "text_interpolation": 76, "control": 77, "control_group0": 78, "for_statement": 79, "FOR": 80, "typable_identifier": 81, "IN": 82, "ENDFOR": 83, "ELSE": 84, "if_statement": 85, "IF": 86, "ENDIF": 87, "else_clause": 88, "match_statement": 89, "MATCH": 90, "case_statements": 91, "ENDMATCH": 92, "case_statement": 93, "CASE": 94, "TYPEOF": 95, "ENDCASE": 96, "INSTANCEOF": 97, "call_statement": 98, "CALL": 99, "member_expression": 100, "(": 101, ")": 102, "characters": 103, "CHARACTERS": 104, "argument_list": 105, "?": 106, "binary_operator": 107, "!": 108, "@@": 109, "expression_group0": 110, "binary_operator_group0": 111, "call_expression": 112, "bind_expression": 113, "::": 114, "new_expression": 115, "NEW": 116, "function_expression": 117, "\\\\": 118, "parameter_list": 119, "=>": 120, ".": 121, "context_variable": 122, "array_literal": 123, "object_literal": 124, "type_assertion": 125, "key_value_pairs": 126, "key_value_pair": 127, "key_value_pair_group0": 128, "STRING_LITERAL": 129, "number_literal": 130, "NUMBER_LITERAL": 131, "boolean_literal": 132, "boolean_literal_group0": 133, "variable": 134, "variable_group0": 135, "CONTEXT_VAR": 136, ";": 137, ">=": 138, "<=": 139, "==": 140, "!=": 141, "+": 142, "/": 143, "-": 144, "&&": 145, "||": 146, "^": 147, "TRUE": 148, "FALSE": 149, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 7: "EOF", 10: "IMPORT", 12: "FROM", 19: "IDENTIFIER", 20: "AS", 21: "*", 22: "{", 24: "}", 26: ",", 32: "{%", 33: "VIEW", 35: "USING", 37: "%}", 39: "ENDVIEW", 42: "MACRO", 44: "ENDMACRO", 47: "[", 49: "]", 52: "EXPORT", 53: "<", 56: ">", 58: "</", 59: "/>", 60: ":", 63: "=", 67: "{{", 69: "}}", 72: "|", 80: "FOR", 82: "IN", 83: "ENDFOR", 84: "ELSE", 86: "IF", 87: "ENDIF", 90: "MATCH", 92: "ENDMATCH", 94: "CASE", 95: "TYPEOF", 96: "ENDCASE", 97: "INSTANCEOF", 99: "CALL", 101: "(", 102: ")", 104: "CHARACTERS", 106: "?", 108: "!", 109: "@@", 114: "::", 116: "NEW", 118: "\\\\", 120: "=>", 121: ".", 129: "STRING_LITERAL", 131: "NUMBER_LITERAL", 136: "CONTEXT_VAR", 137: ";", 138: ">=", 139: "<=", 140: "==", 141: "!=", 142: "+", 143: "/", 144: "-", 145: "&&", 146: "||", 147: "^", 148: "TRUE", 149: "FALSE" },
        productions_: [0, [3, 4], [8, 1], [8, 2], [9, 5], [11, 1], [11, 1], [11, 1], [11, 1], [15, 1], [16, 3], [17, 3], [18, 3], [23, 1], [23, 3], [28, 1], [28, 2], [29, 1], [31, 10], [31, 11], [41, 8], [41, 10], [40, 3], [48, 1], [48, 3], [50, 1], [50, 2], [51, 6], [38, 8], [38, 4], [54, 1], [54, 3], [55, 2], [55, 0], [61, 3], [61, 1], [62, 1], [62, 3], [64, 1], [66, 3], [66, 4], [70, 1], [70, 2], [71, 2], [71, 3], [43, 1], [43, 2], [74, 1], [76, 1], [77, 1], [79, 10], [79, 12], [79, 14], [79, 14], [79, 16], [79, 18], [85, 8], [85, 6], [88, 7], [88, 9], [88, 7], [89, 12], [89, 8], [91, 1], [91, 2], [93, 9], [93, 9], [98, 5], [98, 4], [98, 4], [98, 5], [98, 7], [98, 6], [103, 1], [73, 2], [73, 3], [105, 1], [105, 3], [68, 3], [68, 5], [68, 5], [68, 2], [68, 4], [68, 6], [68, 1], [107, 1], [112, 2], [112, 3], [112, 2], [112, 3], [112, 4], [113, 3], [113, 4], [113, 3], [113, 4], [115, 2], [115, 3], [117, 4], [117, 2], [46, 2], [46, 3], [119, 1], [119, 3], [100, 3], [100, 3], [100, 3], [100, 3], [100, 3], [100, 3], [100, 3], [100, 5], [100, 3], [100, 3], [124, 2], [124, 3], [126, 1], [126, 3], [127, 3], [123, 2], [123, 3], [13, 1], [130, 1], [132, 1], [81, 1], [81, 3], [81, 5], [81, 4], [81, 6], [36, 1], [36, 2], [125, 5], [134, 1], [34, 1], [122, 1], [4, 0], [4, 1], [5, 0], [5, 1], [6, 0], [6, 1], [14, 0], [14, 1], [25, 1], [25, 1], [27, 1], [27, 1], [30, 1], [30, 1], [30, 1], [45, 0], [45, 1], [57, 0], [57, 1], [65, 1], [65, 1], [65, 1], [65, 1], [75, 1], [75, 1], [75, 1], [75, 1], [78, 1], [78, 1], [78, 1], [78, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [128, 1], [128, 1], [133, 1], [133, 1], [135, 1], [135, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    this.$ = new yy.ast.Module($$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0 - 1] || null, this._$);return this.$;

                    break;
                case 2:
                    this.$ = [$$[$0]];
                    break;
                case 3:case 42:case 46:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 4:
                    this.$ = new yy.ast.ImportStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 9:
                    this.$ = new yy.ast.DefaultMember($$[$0], this._$);
                    break;
                case 10:
                    this.$ = new yy.ast.AliasMember($$[$0 - 2], $$[$0], this._$);
                    break;
                case 11:
                    this.$ = new yy.ast.AggregateMember($$[$0], this._$);
                    break;
                case 12:
                    this.$ = new yy.ast.CompositeMember($$[$0 - 1], this._$);
                    break;
                case 13:
                    this.$ = [$$[$0]];
                    break;
                case 14:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 15:case 115:
                    this.$ = [$$[$0]];
                    break;
                case 16:case 32:case 64:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 17:case 30:
                    this.$ = $$[$0];
                    break;
                case 18:
                    this.$ = new yy.ast.ViewStatement($$[$0 - 7], $$[$0 - 5], [], $$[$0 - 3], this._$);
                    break;
                case 19:
                    this.$ = new yy.ast.ViewStatement($$[$0 - 7], $$[$0 - 5], $$[$0 - 8], $$[$0 - 3], this._$);
                    break;
                case 20:
                    this.$ = new yy.ast.MacroStatement($$[$0 - 5], [], [], $$[$0 - 3], this._$);
                    break;
                case 21:
                    this.$ = new yy.ast.MacroStatement($$[$0 - 7], $$[$0 - 6] || [], $$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 22:
                    this.$ = $$[$0 - 1];
                    break;
                case 23:
                    this.$ = [$$[$0]];
                    break;
                case 24:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 25:case 38:case 47:case 49:
                    this.$ = $$[$0];
                    break;
                case 26:
                    this.$ = new yy.ast.TypedIdentifier($$[$0 - 1], $$[$0], this._$);
                    break;
                case 27:
                    this.$ = new yy.ast.ExportFromStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 28:
                    this.$ = new yy.ast.Tag($$[$0 - 6], $$[$0 - 5], $$[$0 - 3] ? $$[$0 - 3] : [], this._$);
                    break;
                case 29:
                    this.$ = new yy.ast.Tag($$[$0 - 2], $$[$0 - 1], [], this._$);
                    break;
                case 31:
                    this.$ = new yy.ast.MemberExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 33:case 99:
                    this.$ = [];
                    break;
                case 34:
                    this.$ = new yy.ast.Attribute($$[$0 - 2].name, $$[$0 - 2].namespace, $$[$0], this._$);
                    break;
                case 35:
                    this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace, new yy.ast.BooleanLiteral(true, this._$), this._$);
                    break;
                case 36:
                    this.$ = { namespace: null, name: $$[$0] };
                    break;
                case 37:
                    this.$ = { namespace: $$[$0 - 2], name: $$[$0] };
                    break;
                case 39:
                    this.$ = new yy.ast.Interpolation($$[$0 - 1], [], this._$);
                    break;
                case 40:
                    this.$ = new yy.ast.Interpolation($$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 41:
                    this.$ = [$$[$0]];
                    break;
                case 43:
                    this.$ = new yy.ast.Filter($$[$0], [], this._$);
                    break;
                case 44:
                    this.$ = new yy.ast.Filter($$[$0 - 1], $$[$0], this._$);
                    break;
                case 45:
                    this.$ = [$$[$0]];
                    break;
                case 48:
                    this.$ = new yy.ast.TextInterpolation($$[$0], this._$);
                    break;
                case 50:
                    this.$ = new yy.ast.ForStatement($$[$0 - 7], null, null, $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 51:
                    this.$ = new yy.ast.ForStatement($$[$0 - 9], $$[$0 - 7], null, $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 52:
                    this.$ = new yy.ast.ForStatement($$[$0 - 11], $$[$0 - 9], $$[$0 - 7], $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 53:
                    this.$ = new yy.ast.ForStatement($$[$0 - 11], null, null, $$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 54:
                    this.$ = new yy.ast.ForStatement($$[$0 - 13], $$[$0 - 11], null, $$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 55:
                    this.$ = new yy.ast.ForStatement($$[$0 - 15], $$[$0 - 13], null, $$[$0 - 11], $$[$0 - 9], $$[$0 - 3], this._$);
                    break;
                case 56:
                    this.$ = new yy.ast.IfStatement($$[$0 - 5], $$[$0 - 3], null, this._$);
                    break;
                case 57:
                    this.$ = new yy.ast.IfStatement($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 58:
                    this.$ = new yy.ast.ElseClause($$[$0 - 3], this._$);
                    break;
                case 59:
                    this.$ = new yy.ast.ElseIfClause($$[$0 - 5], $$[$0 - 3], null, this._$);
                    break;
                case 60:
                    this.$ = new yy.ast.ElseIfClause($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 61:
                    this.$ = new yy.ast.MatchStatement($$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 62:
                    this.$ = new yy.ast.MatchStatement($$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 63:
                    this.$ = [$$[$0]];
                    break;
                case 65:
                    this.$ = new yy.ast.TypeOfCaseStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 66:
                    this.$ = new yy.ast.InstanceOfCaseStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 67:case 70:
                    this.$ = new yy.ast.CallStatement($$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 68:case 69:
                    this.$ = new yy.ast.CallStatement($$[$0 - 1], [], this._$);
                    break;
                case 71:
                    this.$ = new yy.ast.CallStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 72:
                    this.$ = new yy.ast.CallStatement($$[$0 - 2], [], this._$);
                    break;
                case 73:
                    this.$ = new yy.ast.Characters($$[$0], this._$);
                    break;
                case 74:
                    this.$ = [];
                    break;
                case 75:
                    this.$ = $$[$0 - 1];
                    break;
                case 76:
                    this.$ = [$$[$0]];
                    break;
                case 77:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 78:
                    this.$ = $$[$0 - 1];
                    break;
                case 79:
                    this.$ = new yy.ast.TernaryExpression($$[$0 - 4], $$[$0 - 2], $$[$0], this._$);
                    break;
                case 80:
                    this.$ = new yy.ast.BinaryExpression($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 81:
                    this.$ = new yy.ast.UnaryExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 82:
                    this.$ = new yy.ast.ReadExpression($$[$0 - 1], null, this._$);
                    break;
                case 83:
                    this.$ = new yy.ast.ReadExpression($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 84:
                    this.$ = $$[$0];
                    break;
                case 85:
                    this.$ = yy.help.convertOperator($$[$0]);
                    break;
                case 86:case 88:
                    this.$ = new yy.ast.CallExpression($$[$0 - 1], [], $$[$0], this._$);
                    break;
                case 87:case 89:
                    this.$ = new yy.ast.CallExpression($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 90:
                    this.$ = new yy.ast.CallExpression($$[$0 - 2], [], $$[$0], this._$);
                    break;
                case 91:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 92:
                    this.$ = new yy.ast.BindExpression($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 93:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 94:
                    this.$ = new yy.ast.BindExpression($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 95:
                    this.$ = new yy.ast.NewExpression($$[$0], [], this._$);
                    break;
                case 96:
                    this.$ = new yy.ast.NewExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 97:
                    this.$ = new yy.ast.FunctionExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 98:
                    this.$ = new yy.ast.FunctionExpression([], $$[$0], this._$);
                    break;
                case 100:
                    this.$ = $$[$0 - 1];
                    break;
                case 101:
                    this.$ = [$$[$0]];
                    break;
                case 102:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:
                    this.$ = new yy.ast.MemberExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 110:
                    this.$ = new yy.ast.MemberExpression($$[$0 - 3], $$[$0], this._$);
                    break;
                case 113:
                    this.$ = new yy.ast.ObjectLiteral([], this._$);
                    break;
                case 114:
                    this.$ = new yy.ast.ObjectLiteral($$[$0 - 1], this._$);
                    break;
                case 116:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 117:
                    this.$ = { key: $$[$0 - 2], value: $$[$0] };
                    break;
                case 118:
                    this.$ = new yy.ast.ArrayLiteral([], this._$);
                    break;
                case 119:
                    this.$ = new yy.ast.ArrayLiteral($$[$0 - 1], this._$);
                    break;
                case 120:
                    this.$ = new yy.ast.StringLiteral($$[$0], this._$);
                    break;
                case 121:
                    this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$);
                    break;
                case 122:
                    this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
                    break;
                case 123:
                    this.$ = $$[$0];
                    break;
                case 124:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 2], $$[$0], [], false, this._$);
                    break;
                case 125:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 4], $$[$0 - 2], [], true, this._$);
                    break;
                case 126:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 3], $$[$0 - 1], $$[$0], false, this._$);
                    break;
                case 127:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 5], $$[$0 - 3], $$[$0 - 2], true, this._$);
                    break;
                case 128:
                    this.$ = new yy.ast.Type($$[$0], [], this._$);
                    break;
                case 129:
                    this.$ = new yy.ast.Type($$[$0 - 1], $$[$0], this._$);
                    break;
                case 130:
                    this.$ = new yy.ast.TypeAssertion($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 131:
                    this.$ = $$[$0];
                    break;
                case 132:
                    this.$ = new yy.ast.Identifier($$[$0], '', this._$);
                    break;
                case 133:
                    this.$ = new yy.ast.ContextVariable($$[$0].slice(1), this._$);
                    break;
            }
        },
        table: [o($V0, [2, 134], { 3: 1, 4: 2, 8: 3, 9: 4, 10: $V1 }), { 1: [3] }, o($V2, [2, 136], { 5: 6, 28: 7, 29: 8, 30: 9, 31: 10, 41: 11, 51: 12, 32: $V3 }), o($V0, [2, 135], { 9: 14, 10: $V1 }), o($V4, [2, 2]), { 11: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: $V5, 21: [1, 21], 22: [1, 22] }, { 6: 23, 7: [2, 138], 38: 24, 53: $V6 }, o($V2, [2, 137], { 30: 9, 31: 10, 41: 11, 51: 12, 29: 26, 32: $V3 }), o($V0, [2, 15]), o($V0, [2, 17]), o($V0, [2, 146]), o($V0, [2, 147]), o($V0, [2, 148]), { 33: [1, 27], 42: [1, 28], 52: [1, 29] }, o($V4, [2, 3]), { 12: [1, 30] }, { 12: [2, 5] }, { 12: [2, 6] }, { 12: [2, 7] }, { 12: [2, 8] }, o($V7, [2, 9], { 20: [1, 31] }), { 20: [1, 32] }, { 15: 35, 16: 36, 19: $V5, 23: 33, 25: 34 }, { 7: [1, 37] }, { 7: [2, 139] }, { 19: $V8, 34: 39, 54: 38 }, o($V0, [2, 16]), { 19: $V8, 34: 41, 40: 42, 47: $V9 }, { 19: [1, 44] }, { 19: [1, 45] }, { 13: 46, 129: $Va }, { 19: [1, 48] }, { 19: [1, 49] }, { 24: [1, 50], 26: [1, 51] }, o($Vb, [2, 13]), o($Vb, [2, 142]), o($Vb, [2, 143]), { 1: [2, 1] }, o($Vc, [2, 33], { 55: 52 }), o($Vd, [2, 30], { 60: [1, 53] }), o([19, 20, 24, 26, 35, 37, 47, 49, 53, 56, 59, 60, 63, 69, 72, 82, 97, 101, 102, 106, 114, 120, 121, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [2, 132]), { 35: [1, 54] }, { 19: $V8, 34: 55 }, { 19: $V8, 34: 58, 48: 56, 50: 57 }, { 37: [1, 59], 40: 61, 45: 60, 47: $V9, 101: [2, 149] }, { 12: [1, 62] }, o($V4, [2, 140], { 14: 63, 137: [1, 64] }), o([7, 10, 19, 20, 24, 26, 32, 37, 49, 53, 56, 59, 60, 63, 69, 72, 97, 102, 106, 121, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], [2, 120]), o($V7, [2, 10]), { 12: [2, 11] }, { 12: [2, 12] }, { 15: 66, 16: 67, 19: $V5, 27: 65 }, { 19: [1, 72], 56: [1, 68], 59: [1, 69], 61: 70, 62: 71 }, { 19: $V8, 34: 73 }, { 19: $V8, 34: 75, 36: 74 }, { 35: [1, 76] }, { 26: [1, 78], 49: [1, 77] }, o($Ve, [2, 23]), o($Ve, [2, 25], { 34: 58, 50: 79, 19: $V8 }), { 32: $Vf, 38: 83, 43: 80, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 46: 96, 101: [1, 97] }, { 101: [2, 150] }, { 13: 98, 129: $Va }, o($V4, [2, 4]), o($V4, [2, 141]), o($Vb, [2, 14]), o($Vb, [2, 144]), o($Vb, [2, 145]), { 32: $Vf, 38: 83, 43: 100, 53: $V6, 57: 99, 58: [2, 151], 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, o($Vi, [2, 29]), o($Vc, [2, 32]), o($Vc, [2, 35], { 63: [1, 101] }), o($Vj, [2, 36], { 60: [1, 102] }), o($Vd, [2, 31]), { 37: [1, 103] }, { 37: [2, 128], 40: 104, 47: $V9 }, { 19: $V8, 34: 75, 36: 105 }, o([19, 26, 37, 47, 82, 101, 102, 120], [2, 22]), { 19: $V8, 34: 58, 50: 106 }, o($Ve, [2, 26]), { 32: [1, 107], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, o($Vk, [2, 45]), o($Vk, [2, 47]), o($Vk, [2, 157]), o($Vk, [2, 158]), o($Vk, [2, 159]), o($Vk, [2, 160]), o($Vk, [2, 49]), o($Vk, [2, 48]), o($Vk, [2, 73]), o($Vk, [2, 161]), o($Vk, [2, 162]), o($Vk, [2, 163]), o($Vk, [2, 164]), { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 109, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, { 80: $Vx, 86: $Vy, 90: $Vz, 99: $VA }, { 37: [1, 143] }, { 19: $V8, 34: 147, 81: 146, 102: [1, 144], 119: 145 }, { 37: [1, 148] }, { 58: [1, 149] }, { 32: $Vf, 38: 83, 53: $V6, 58: [2, 152], 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 13: 153, 64: 150, 65: 151, 66: 152, 67: $Vg, 129: $Va, 130: 154, 131: $Vt, 132: 155, 133: 133, 148: $Vv, 149: $Vw }, { 19: [1, 156] }, { 38: 157, 53: $V6 }, { 37: [2, 129] }, { 37: [1, 158] }, o($Ve, [2, 24]), { 44: [1, 159], 80: $Vx, 86: $Vy, 90: $Vz, 99: $VA }, o($Vk, [2, 46]), { 69: [1, 160], 70: 161, 71: 163, 72: $VB, 106: $VC }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 165, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 166, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, { 47: [1, 167] }, o($VD, [2, 84]), o($VD, [2, 165]), o($VD, [2, 166], { 121: $VE }), o($VD, [2, 167], { 73: 169, 40: 170, 47: $V9, 101: $VF, 114: $VG, 121: $VH }), o($VD, [2, 168]), o($VD, [2, 169], { 121: $VI }), o($VD, [2, 170], { 121: $VJ }), o($VD, [2, 171], { 121: $VK }), o($VD, [2, 172], { 121: $VL }), o($VD, [2, 173]), o($VD, [2, 174]), o($VD, [2, 175], { 121: $VM }), o($VD, [2, 176]), { 19: $V8, 34: 179 }, o($VD, [2, 195], { 73: 180, 40: 181, 47: $V9, 101: $VF, 114: $VN, 121: $VO }), o($VD, [2, 196], { 121: $VP }), { 19: $V8, 34: 147, 81: 146, 119: 185 }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 186, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, { 19: $VQ, 24: [1, 187], 126: 188, 127: 189, 128: 190, 129: $VR }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 49: [1, 193], 68: 195, 100: 116, 101: $Vn, 105: 194, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, o($VS, [2, 122]), o($VS, [2, 121]), o($VD, [2, 131]), o($VT, [2, 133]), o($VS, [2, 193]), o($VS, [2, 194]), { 19: $V8, 34: 147, 81: 196 }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 197, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, { 19: $V8, 34: 198 }, { 13: 205, 19: $V8, 22: $Vl, 34: 199, 47: $Vm, 100: 200, 101: [1, 201], 112: 206, 113: 207, 122: 202, 123: 203, 124: 204, 125: 208, 129: $Va, 136: $Vu }, { 32: $Vf, 38: 83, 43: 209, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 37: [2, 99] }, { 26: $VU, 102: [1, 210] }, o($VV, [2, 101]), o($VW, [2, 123], { 60: [1, 212] }), o($V0, [2, 27]), { 19: $V8, 34: 39, 54: 213 }, o($Vc, [2, 34]), o($Vc, [2, 38]), o($Vc, [2, 153]), o($Vc, [2, 154]), o($Vc, [2, 155]), o($Vc, [2, 156]), o($Vj, [2, 37]), { 32: [1, 214] }, { 38: 215, 53: $V6 }, { 37: [1, 216] }, o($VX, [2, 39]), { 69: [1, 217], 71: 218, 72: $VB }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 219, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, o($VY, [2, 41]), { 19: $V8, 34: 39, 54: 220 }, { 20: $VZ, 53: [1, 227], 56: [1, 225], 63: [1, 234], 97: [1, 238], 102: [1, 221], 106: $VC, 107: 222, 111: 224, 138: [1, 226], 139: [1, 228], 140: [1, 229], 141: [1, 230], 142: [1, 231], 143: [1, 232], 144: [1, 233], 145: [1, 235], 146: [1, 236], 147: [1, 237] }, o($VD, [2, 81]), { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 239, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, { 19: $V8, 34: 240 }, o($VT, $V_), { 73: 241, 101: $VF }, { 19: $V8, 34: 242 }, { 19: $V8, 34: 243 }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 195, 100: 116, 101: $Vn, 102: [1, 244], 105: 245, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, { 19: $V8, 34: 246 }, { 19: $V8, 34: 247 }, { 19: $V8, 34: 248 }, { 19: $V8, 34: 249 }, { 19: $V8, 34: 250 }, o($VD, [2, 95], { 73: 251, 101: $VF }), o($VT, $V$), { 73: 252, 101: $VF }, { 19: $V8, 34: 253 }, { 19: $V8, 34: 254 }, { 19: $V8, 34: 255 }, { 26: $VU, 120: [1, 256] }, o($V01, [2, 98], { 106: $VC }), o($VT, [2, 113]), { 24: [1, 257], 26: [1, 258] }, o($Vb, [2, 115]), { 60: [1, 259] }, { 60: [2, 191] }, { 60: [2, 192] }, o($VT, [2, 118]), { 26: $V11, 49: [1, 260] }, o($V21, [2, 76], { 106: $VC }), { 26: [1, 263], 82: [1, 262] }, { 37: [1, 264], 106: $VC }, { 37: [1, 265] }, { 37: [1, 267], 40: 181, 47: $V9, 73: 266, 101: $VF, 114: $VN, 121: $VO }, { 37: [1, 268], 40: 170, 47: $V9, 73: 269, 101: $VF, 114: $VG, 121: $VH }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 270, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, { 121: $VP }, { 121: $VK }, { 121: $VJ }, { 121: $VL }, { 121: $VE }, { 121: $VI }, { 121: $VM }, { 32: [1, 271], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 37: [2, 100] }, { 19: $V8, 34: 147, 81: 272 }, { 19: $V8, 34: 273 }, { 56: [1, 274] }, { 39: [1, 275] }, { 32: [1, 276] }, o($V0, [2, 20]), o($VX, [2, 40]), o($VY, [2, 42]), { 60: $V31, 106: $VC }, o($VY, [2, 43], { 73: 278, 101: $VF }), o($VD, [2, 78], { 73: 279, 101: $VF, 121: $V41 }), { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 281, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, { 19: $V8, 34: 282 }, o($V51, [2, 85]), o($V51, [2, 177]), o($V51, [2, 178]), o($V51, [2, 179]), o($V51, [2, 180]), o($V51, [2, 181]), o($V51, [2, 182]), o($V51, [2, 183]), o($V51, [2, 184]), o($V51, [2, 185]), o($V51, [2, 186]), o($V51, [2, 187]), o($V51, [2, 188]), o($V51, [2, 189]), o($V51, [2, 190]), { 49: [1, 283], 106: [1, 284] }, o($V61, [2, 108]), o($VT, [2, 89]), o($V61, [2, 112]), o($VT, [2, 93], { 73: 285, 101: $VF }), o($VT, [2, 74]), { 26: $V11, 102: [1, 286] }, o($V61, [2, 109]), o($V61, [2, 106]), o($V61, [2, 105]), o($V61, [2, 107]), o($V61, [2, 111]), o($VD, [2, 96]), o($VT, [2, 87]), o($V61, [2, 103]), o($VT, [2, 91], { 73: 287, 101: $VF }), o($V61, [2, 104]), { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 288, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, o($VT, [2, 114]), { 19: $VQ, 127: 289, 128: 190, 129: $VR }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 290, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, o($VT, [2, 119]), { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 291, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 292, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, { 19: $V8, 34: 147, 81: 293 }, { 32: $Vf, 38: 83, 43: 294, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 32: [1, 297], 91: 295, 93: 296 }, { 37: [1, 298], 121: $V$ }, o($Vk, [2, 68]), o($Vk, [2, 69]), { 37: [1, 299], 121: $V_ }, { 20: $VZ, 102: [1, 300], 106: $VC }, { 44: [1, 301], 80: $Vx, 86: $Vy, 90: $Vz, 99: $VA }, o($VV, [2, 102]), o($VW, [2, 124], { 40: 303, 47: [1, 302] }), o($Vi, [2, 28]), { 37: [1, 304] }, { 39: [1, 305] }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 306, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, o($VY, [2, 44]), o($VT, $V71), { 19: $V8, 34: 307 }, { 102: [1, 308], 106: $VC }, { 102: [1, 309] }, o($VD, [2, 82]), { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 310, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, o($VT, [2, 94]), o($VT, [2, 75]), o($VT, [2, 92]), o($V01, [2, 97], { 106: $VC }), o($Vb, [2, 116]), o($Vb, [2, 117], { 106: $VC }), o($V21, [2, 77], { 106: $VC }), { 37: [1, 311], 106: $VC }, { 26: [1, 313], 82: [1, 312] }, { 32: [1, 314], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 88: 315, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 32: [1, 316], 93: 317 }, { 32: [2, 63] }, { 94: $V81 }, o($Vk, [2, 67]), o($Vk, [2, 70]), { 37: [1, 320], 73: 319, 101: $VF, 121: $V41 }, { 37: [1, 321] }, { 19: $V8, 34: 58, 48: 56, 49: [1, 322], 50: 57 }, o($VW, [2, 126], { 47: [1, 323] }), o($V0, [2, 18]), { 37: [1, 324] }, o($V01, [2, 79], { 106: $VC }), o($V61, [2, 110]), o($VD, [2, 80]), o($VT, [2, 130]), { 49: [1, 325], 60: $V31, 106: $VC }, { 32: $Vf, 38: 83, 43: 326, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 327, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, { 19: $V8, 34: 147, 81: 328 }, { 80: $Vx, 84: $V91, 86: $Vy, 87: [1, 329], 90: $Vz, 99: $VA }, o($Vk, [2, 57]), { 84: [1, 331], 92: [1, 332], 94: $V81 }, { 32: [2, 64] }, { 95: [1, 333], 97: [1, 334] }, { 37: [1, 335], 121: $V71 }, o($Vk, [2, 72]), o($V0, [2, 21]), o($VW, [2, 125]), { 49: [1, 336] }, o($V0, [2, 19]), o($VD, [2, 83]), { 32: [1, 337], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 37: [1, 338], 106: $VC }, { 82: [1, 339] }, { 37: [1, 340] }, { 37: [1, 341], 86: [1, 342] }, { 37: [1, 343] }, { 37: [1, 344] }, { 13: 345, 129: $Va }, { 19: $V8, 34: 346 }, o($Vk, [2, 71]), o($VW, [2, 127]), { 80: $Vx, 83: [1, 347], 84: [1, 348], 86: $Vy, 90: $Vz, 99: $VA }, { 32: $Vf, 38: 83, 43: 349, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 350, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, o($Vk, [2, 56]), { 32: $Vf, 38: 83, 43: 351, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 13: 121, 19: $V8, 22: $Vl, 34: 127, 47: $Vm, 68: 352, 100: 116, 101: $Vn, 108: $Vo, 109: $Vp, 110: 113, 112: 115, 113: 118, 115: 114, 116: $Vq, 117: 117, 118: $Vr, 120: $Vs, 122: 128, 123: 120, 124: 119, 125: 124, 129: $Va, 130: 123, 131: $Vt, 132: 122, 133: 133, 134: 125, 135: 135, 136: $Vu, 148: $Vv, 149: $Vw }, { 32: $Vf, 38: 83, 43: 353, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, o($Vk, [2, 62]), { 37: [1, 354] }, { 37: [1, 355] }, { 37: [1, 356] }, { 37: [1, 357] }, { 32: [1, 358], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 37: [1, 359], 106: $VC }, { 32: [1, 360], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 37: [1, 361], 106: $VC }, { 32: [1, 362], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 32: $Vf, 38: 83, 43: 363, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 32: $Vf, 38: 83, 43: 364, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, o($Vk, [2, 50]), { 32: $Vf, 38: 83, 43: 365, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 80: $Vx, 83: [1, 366], 84: [1, 367], 86: $Vy, 90: $Vz, 99: $VA }, { 32: $Vf, 38: 83, 43: 368, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 80: $Vx, 86: $Vy, 87: [1, 369], 90: $Vz, 99: $VA }, { 32: $Vf, 38: 83, 43: 370, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 80: $Vx, 86: $Vy, 90: $Vz, 92: [1, 371], 99: $VA }, { 32: [1, 372], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 32: [1, 373], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 32: [1, 374], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 37: [1, 375] }, { 37: [1, 376] }, { 32: [1, 377], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 37: [1, 378] }, { 32: [1, 379], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 88: 380, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 37: [1, 381] }, { 80: $Vx, 86: $Vy, 90: $Vz, 96: [1, 382], 99: $VA }, { 80: $Vx, 86: $Vy, 90: $Vz, 96: [1, 383], 99: $VA }, { 80: $Vx, 83: [1, 384], 86: $Vy, 90: $Vz, 99: $VA }, o($Vk, [2, 51]), { 32: $Vf, 38: 83, 43: 385, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 80: $Vx, 83: [1, 386], 84: [1, 387], 86: $Vy, 90: $Vz, 99: $VA }, o($Vk, [2, 58]), { 80: $Vx, 84: $V91, 86: $Vy, 87: [1, 388], 90: $Vz, 99: $VA }, o($Vk, [2, 60]), o($Vk, [2, 61]), { 37: [1, 389] }, { 37: [1, 390] }, { 37: [1, 391] }, { 32: [1, 392], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, { 37: [1, 393] }, { 37: [1, 394] }, { 37: [1, 395] }, { 32: [2, 65] }, { 32: [2, 66] }, o($Vk, [2, 53]), { 80: $Vx, 83: [1, 396], 86: $Vy, 90: $Vz, 99: $VA }, o($Vk, [2, 52]), { 32: $Vf, 38: 83, 43: 397, 53: $V6, 66: 88, 67: $Vg, 74: 81, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, o($Vk, [2, 59]), { 37: [1, 398] }, { 32: [1, 399], 38: 83, 53: $V6, 66: 88, 67: $Vg, 74: 108, 75: 82, 76: 85, 77: 84, 78: 87, 79: 90, 85: 91, 89: 92, 98: 93, 103: 86, 104: $Vh }, o($Vk, [2, 54]), { 80: $Vx, 83: [1, 400], 86: $Vy, 90: $Vz, 99: $VA }, { 37: [1, 401] }, o($Vk, [2, 55])],
        defaultActions: { 16: [2, 5], 17: [2, 6], 18: [2, 7], 19: [2, 8], 24: [2, 139], 37: [2, 1], 49: [2, 11], 50: [2, 12], 61: [2, 150], 104: [2, 129], 144: [2, 99], 191: [2, 191], 192: [2, 192], 210: [2, 100], 296: [2, 63], 317: [2, 64], 389: [2, 65], 390: [2, 66] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "flex": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return;
                        break;
                    case 1:
                        return 10;
                        break;
                    case 2:
                        return 12;
                        break;
                    case 3:
                        return 58;
                        break;
                    case 4:
                        this.begin('CONTROL');return 32;
                        break;
                    case 5:
                        this.begin('COMMENT');return;
                        break;
                    case 6:
                        this.begin('CHILDREN');return 56;
                        break;
                    case 7:
                        this.begin('CHILDREN');return 59;
                        break;
                    case 8:
                        this.begin('EXPRESSION');return 67;
                        break;
                    case 9:
                        return 42;
                        break;
                    case 10:
                        return 44;
                        break;
                    case 11:
                        return 80;
                        break;
                    case 12:
                        return 83;
                        break;
                    case 13:
                        return 86;
                        break;
                    case 14:
                        return 87;
                        break;
                    case 15:
                        return 84;
                        break;
                    case 16:
                        return 'ELSEIF';
                        break;
                    case 17:
                        return 82;
                        break;
                    case 18:
                        return 'SWITCH';
                        break;
                    case 19:
                        return 'ENDSWITCH';
                        break;
                    case 20:
                        return 'DEFAULT';
                        break;
                    case 21:
                        return 94;
                        break;
                    case 22:
                        return 96;
                        break;
                    case 23:
                        return 99;
                        break;
                    case 24:
                        return 52;
                        break;
                    case 25:
                        return 12;
                        break;
                    case 26:
                        return 'ENDEXPORT';
                        break;
                    case 27:
                        return 33;
                        break;
                    case 28:
                        return 35;
                        break;
                    case 29:
                        return 39;
                        break;
                    case 30:
                        return 90;
                        break;
                    case 31:
                        return 92;
                        break;
                    case 32:
                        return 'OTHERWISE';
                        break;
                    case 33:
                        return 'ENDOTHERWISE';
                        break;
                    case 34:
                        return 97;
                        break;
                    case 35:
                        return 95;
                        break;
                    case 36:
                        this.popState();return 37;
                        break;
                    case 37:
                        return 116;
                        break;
                    case 38:
                        return 72;
                        break;
                    case 39:
                        return 120;
                        break;
                    case 40:
                        return 114;
                        break;
                    case 41:
                        return '->';
                        break;
                    case 42:
                        return '..';
                        break;
                    case 43:
                        return 97;
                        break;
                    case 44:
                        return 109;
                        break;
                    case 45:
                        this.popState();return 69;
                        break;
                    case 46:
                        this.begin('EXPRESSION');return 67;
                        break;
                    case 47:
                        this.begin('CONTROL');return 32;
                        break;
                    case 48:
                        this.begin('COMMENT');return;
                        break;
                    case 49:
                        this.popState();return 58;
                        break;
                    case 50:
                        this.popState();return 53;
                        break;
                    case 51:
                        this.popState();return 104;
                        break;
                    case 52:
                        this.popState();return;
                        break;
                    case 53:
                        return 148;
                        break;
                    case 54:
                        return 149;
                        break;
                    case 55:
                        return 131;
                        break;
                    case 56:
                        return 129;
                        break;
                    case 57:
                        return 56;
                        break;
                    case 58:
                        return 53;
                        break;
                    case 59:
                        return 101;
                        break;
                    case 60:
                        return 102;
                        break;
                    case 61:
                        return 47;
                        break;
                    case 62:
                        return 49;
                        break;
                    case 63:
                        return 137;
                        break;
                    case 64:
                        return 60;
                        break;
                    case 65:
                        return ':::';
                        break;
                    case 66:
                        return 63;
                        break;
                    case 67:
                        return 140;
                        break;
                    case 68:
                        return 141;
                        break;
                    case 69:
                        return 138;
                        break;
                    case 70:
                        return 139;
                        break;
                    case 71:
                        return 142;
                        break;
                    case 72:
                        return 144;
                        break;
                    case 73:
                        return 21;
                        break;
                    case 74:
                        return 143;
                        break;
                    case 75:
                        return 118;
                        break;
                    case 76:
                        return 145;
                        break;
                    case 77:
                        return 146;
                        break;
                    case 78:
                        return 147;
                        break;
                    case 79:
                        return 108;
                        break;
                    case 80:
                        return 26;
                        break;
                    case 81:
                        return 106;
                        break;
                    case 82:
                        return 121;
                        break;
                    case 83:
                        return 22;
                        break;
                    case 84:
                        return 24;
                        break;
                    case 85:
                        return '@';
                        break;
                    case 86:
                        return 20;
                        break;
                    case 87:
                        return 19;
                        break;
                    case 88:
                        return 136;
                        break;
                    case 89:
                        return 7;
                        break;
                    case 90:
                        console.log(yy_.yytext);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:import)/, /^(?:from)/, /^(?:<\/)/, /^(?:\{%)/, /^(?:<!--)/, /^(?:>)/, /^(?:\/>)/, /^(?:\{\{)/, /^(?:macro)/, /^(?:endmacro)/, /^(?:for)/, /^(?:endfor)/, /^(?:if)/, /^(?:endif)/, /^(?:else)/, /^(?:elseif)/, /^(?:in)/, /^(?:switch)/, /^(?:endswitch)/, /^(?:default)/, /^(?:case)/, /^(?:endcase)/, /^(?:call)/, /^(?:export)/, /^(?:from)/, /^(?:endexport)/, /^(?:view)/, /^(?:using)/, /^(?:endview)/, /^(?:match)/, /^(?:endmatch)/, /^(?:otherwise)/, /^(?:endotherwise)/, /^(?:instanceof)/, /^(?:typeof)/, /^(?:%\})/, /^(?:new)/, /^(?:\|)/, /^(?:=>)/, /^(?:::)/, /^(?:->)/, /^(?:\.\.)/, /^(?:instanceof)/, /^(?:@@)/, /^(?:\}\})/, /^(?:\{\{)/, /^(?:\{%)/, /^(?:<!--)/, /^(?:<\/)/, /^(?:<)/, /^(?:[^\/<>{%}]+)/, /^(?:(.|\r|\n)*?-->)/, /^(?:true)/, /^(?:false)/, /^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/, /^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/, /^(?:>)/, /^(?:<)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:;)/, /^(?::)/, /^(?::::)/, /^(?:=)/, /^(?:==)/, /^(?:!=)/, /^(?:>=)/, /^(?:<=)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:\\)/, /^(?:&&)/, /^(?:\|\|)/, /^(?:\^)/, /^(?:!)/, /^(?:,)/, /^(?:\?)/, /^(?:\.)/, /^(?:\{)/, /^(?:\})/, /^(?:@)/, /^(?:as)/, /^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/, /^(?:@([a-zA-Z$_][a-zA-Z$_0-9-]*))/, /^(?:$)/, /^(?:.)/],
            conditions: { "EXPRESSION": { "rules": [0, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "inclusive": false }, "CONTROL": { "rules": [0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "inclusive": false }, "COMMENT": { "rules": [0, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "inclusive": false }, "CHILDREN": { "rules": [0, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "inclusive": false }, "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = ParserImpl;
    exports.Parser = ParserImpl.Parser;
    exports.parse = function () {
        return ParserImpl.parse.apply(ParserImpl, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,