"use strict";

/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [7, 32, 53],
        $V1 = [1, 5],
        $V2 = [7, 53],
        $V3 = [1, 13],
        $V4 = [7, 10, 32, 53],
        $V5 = [1, 20],
        $V6 = [1, 25],
        $V7 = [12, 24, 26],
        $V8 = [1, 40],
        $V9 = [1, 45],
        $Va = [24, 26],
        $Vb = [19, 56, 59],
        $Vc = [19, 56, 59, 68, 71, 100],
        $Vd = [1, 54],
        $Ve = [1, 58],
        $Vf = [1, 102],
        $Vg = [1, 101],
        $Vh = [1, 96],
        $Vi = [7, 32, 53, 58, 66, 103],
        $Vj = [19, 56, 59, 62],
        $Vk = [26, 37, 48],
        $Vl = [26, 48],
        $Vm = [1, 116],
        $Vn = [26, 101, 119],
        $Vo = [26, 81, 101, 119],
        $Vp = [32, 53, 58, 66, 103],
        $Vq = [1, 144],
        $Vr = [1, 145],
        $Vs = [1, 122],
        $Vt = [1, 123],
        $Vu = [1, 124],
        $Vv = [1, 138],
        $Vw = [1, 142],
        $Vx = [1, 143],
        $Vy = [1, 147],
        $Vz = [1, 149],
        $VA = [1, 151],
        $VB = [1, 152],
        $VC = [1, 153],
        $VD = [1, 154],
        $VE = [1, 155],
        $VF = [1, 156],
        $VG = [1, 157],
        $VH = [1, 158],
        $VI = [1, 181],
        $VJ = [1, 179],
        $VK = [20, 24, 26, 37, 48, 50, 53, 56, 62, 68, 71, 96, 101, 105, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148],
        $VL = [1, 185],
        $VM = [1, 190],
        $VN = [1, 189],
        $VO = [1, 188],
        $VP = [1, 191],
        $VQ = [1, 192],
        $VR = [1, 193],
        $VS = [1, 194],
        $VT = [1, 195],
        $VU = [1, 200],
        $VV = [1, 199],
        $VW = [1, 201],
        $VX = [1, 202],
        $VY = [1, 209],
        $VZ = [1, 210],
        $V_ = [19, 20, 24, 26, 37, 48, 50, 53, 56, 59, 62, 68, 71, 96, 101, 105, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148],
        $V$ = [20, 24, 26, 37, 48, 50, 53, 56, 62, 68, 71, 96, 101, 105, 120, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148],
        $V01 = [19, 32, 53, 56, 58, 59, 66, 103],
        $V11 = [68, 71],
        $V21 = [1, 243],
        $V31 = [2, 92],
        $V41 = [2, 90],
        $V51 = [20, 24, 26, 37, 48, 50, 53, 56, 62, 68, 71, 96, 101, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148],
        $V61 = [1, 282],
        $V71 = [26, 48, 101],
        $V81 = [1, 300],
        $V91 = [1, 303],
        $Va1 = [19, 22, 46, 100, 107, 108, 115, 117, 119, 129, 131, 136, 149, 150, 151, 152],
        $Vb1 = [20, 24, 26, 37, 46, 48, 50, 53, 56, 62, 68, 71, 96, 100, 101, 105, 113, 120, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148],
        $Vc1 = [2, 94],
        $Vd1 = [1, 343],
        $Ve1 = [1, 355];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "module": 3, "module_option0": 4, "module_option1": 5, "module_option2": 6, "EOF": 7, "imports": 8, "import_statement": 9, "IMPORT": 10, "import_member": 11, "FROM": 12, "string_literal": 13, "import_statement_option0": 14, "default_member": 15, "alias_member": 16, "aggregate_member": 17, "composite_member": 18, "IDENTIFIER": 19, "AS": 20, "*": 21, "{": 22, "member_list": 23, "}": 24, "member_list_group0": 25, ",": 26, "member_list_group1": 27, "exports": 28, "export": 29, "export_group0": 30, "view_statement": 31, "{%": 32, "VIEW": 33, "identifier": 34, "USING": 35, "type": 36, "%}": 37, "tag": 38, "ENDVIEW": 39, "type_classes": 40, "frag_statement": 41, "FRAG": 42, "children": 43, "ENDFRAG": 44, "parameters": 45, "[": 46, "type_class_list": 47, "]": 48, "type_class": 49, ":": 50, "export_from_statement": 51, "EXPORT": 52, "<": 53, "tagname": 54, "attributes": 55, ">": 56, "tag_option0": 57, "</": 58, "/>": 59, "attribute": 60, "attribute_name": 61, "=": 62, "attribute_value": 63, "attribute_value_group0": 64, "interpolation": 65, "{{": 66, "expression": 67, "}}": 68, "filters": 69, "filter": 70, "|": 71, "arguments": 72, "child": 73, "child_group0": 74, "text_interpolation": 75, "control": 76, "control_group0": 77, "for_statement": 78, "FOR": 79, "typable_identifier": 80, "IN": 81, "ENDFOR": 82, "ELSE": 83, "if_statement": 84, "IF": 85, "ENDIF": 86, "else_clause": 87, "match_statement": 88, "MATCH": 89, "case_statements": 90, "ENDMATCH": 91, "case_statement": 92, "CASE": 93, "TYPEOF": 94, "ENDCASE": 95, "INSTANCEOF": 96, "call_statement": 97, "CALL": 98, "member_expression": 99, "(": 100, ")": 101, "characters": 102, "CHARACTERS": 103, "argument_list": 104, "?": 105, "binary_operator": 106, "!": 107, "@@": 108, "expression_group0": 109, "binary_operator_group0": 110, "call_expression": 111, "bind_expression": 112, "::": 113, "new_expression": 114, "NEW": 115, "function_expression": 116, "\\\\": 117, "parameter_list": 118, "=>": 119, ".": 120, "context_property": 121, "context_variable": 122, "array_literal": 123, "object_literal": 124, "type_assertion": 125, "key_value_pairs": 126, "key_value_pair": 127, "key_value_pair_group0": 128, "STRING_LITERAL": 129, "number_literal": 130, "NUMBER_LITERAL": 131, "boolean_literal": 132, "boolean_literal_group0": 133, "variable": 134, "variable_group0": 135, "CONTEXT_PROP": 136, "context_variable_group0": 137, ";": 138, ">=": 139, "<=": 140, "==": 141, "!=": 142, "+": 143, "/": 144, "-": 145, "&&": 146, "||": 147, "^": 148, "TRUE": 149, "FALSE": 150, "@": 151, "THIS": 152, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 7: "EOF", 10: "IMPORT", 12: "FROM", 19: "IDENTIFIER", 20: "AS", 21: "*", 22: "{", 24: "}", 26: ",", 32: "{%", 33: "VIEW", 35: "USING", 37: "%}", 39: "ENDVIEW", 42: "FRAG", 44: "ENDFRAG", 46: "[", 48: "]", 50: ":", 52: "EXPORT", 53: "<", 56: ">", 58: "</", 59: "/>", 62: "=", 66: "{{", 68: "}}", 71: "|", 79: "FOR", 81: "IN", 82: "ENDFOR", 83: "ELSE", 85: "IF", 86: "ENDIF", 89: "MATCH", 91: "ENDMATCH", 93: "CASE", 94: "TYPEOF", 95: "ENDCASE", 96: "INSTANCEOF", 98: "CALL", 100: "(", 101: ")", 103: "CHARACTERS", 105: "?", 107: "!", 108: "@@", 113: "::", 115: "NEW", 117: "\\\\", 119: "=>", 120: ".", 129: "STRING_LITERAL", 131: "NUMBER_LITERAL", 136: "CONTEXT_PROP", 138: ";", 139: ">=", 140: "<=", 141: "==", 142: "!=", 143: "+", 144: "/", 145: "-", 146: "&&", 147: "||", 148: "^", 149: "TRUE", 150: "FALSE", 151: "@", 152: "THIS" },
        productions_: [0, [3, 4], [8, 1], [8, 2], [9, 5], [11, 1], [11, 1], [11, 1], [11, 1], [15, 1], [16, 3], [17, 3], [18, 3], [23, 1], [23, 3], [28, 1], [28, 2], [29, 1], [31, 10], [31, 11], [41, 10], [41, 11], [41, 11], [41, 12], [40, 3], [47, 1], [47, 3], [49, 1], [49, 3], [36, 1], [36, 2], [51, 6], [38, 8], [38, 4], [54, 1], [54, 3], [55, 2], [55, 0], [60, 3], [60, 1], [61, 1], [61, 3], [63, 1], [65, 3], [65, 4], [69, 1], [69, 2], [70, 2], [70, 3], [43, 1], [43, 2], [73, 1], [75, 1], [76, 1], [78, 10], [78, 12], [78, 14], [78, 14], [78, 16], [78, 18], [84, 8], [84, 6], [87, 7], [87, 9], [87, 7], [88, 12], [88, 8], [90, 1], [90, 2], [92, 9], [92, 9], [97, 5], [97, 4], [97, 4], [97, 5], [97, 7], [97, 6], [102, 1], [72, 2], [72, 3], [104, 1], [104, 3], [67, 3], [67, 5], [67, 5], [67, 2], [67, 4], [67, 6], [67, 1], [106, 1], [111, 2], [111, 3], [111, 2], [111, 3], [111, 4], [112, 3], [112, 4], [112, 3], [112, 4], [114, 2], [114, 3], [116, 4], [116, 2], [45, 2], [45, 3], [118, 1], [118, 3], [99, 3], [99, 3], [99, 3], [99, 3], [99, 3], [99, 3], [99, 3], [99, 3], [99, 5], [99, 3], [99, 3], [124, 2], [124, 3], [126, 1], [126, 3], [127, 3], [123, 2], [123, 3], [13, 1], [130, 1], [132, 1], [80, 1], [80, 3], [80, 5], [80, 4], [80, 6], [125, 5], [134, 1], [34, 1], [121, 1], [122, 1], [4, 0], [4, 1], [5, 0], [5, 1], [6, 0], [6, 1], [14, 0], [14, 1], [25, 1], [25, 1], [27, 1], [27, 1], [30, 1], [30, 1], [30, 1], [57, 0], [57, 1], [64, 1], [64, 1], [64, 1], [64, 1], [74, 1], [74, 1], [74, 1], [74, 1], [77, 1], [77, 1], [77, 1], [77, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [110, 1], [128, 1], [128, 1], [133, 1], [133, 1], [135, 1], [135, 1], [135, 1], [137, 1], [137, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    this.$ = new yy.ast.Module($$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0 - 1] || null, this._$);return this.$;

                    break;
                case 2:
                    this.$ = [$$[$0]];
                    break;
                case 3:case 46:case 50:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 4:
                    this.$ = new yy.ast.ImportStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 9:
                    this.$ = new yy.ast.DefaultMember($$[$0], this._$);
                    break;
                case 10:
                    this.$ = new yy.ast.AliasMember($$[$0 - 2], $$[$0], this._$);
                    break;
                case 11:
                    this.$ = new yy.ast.AggregateMember($$[$0], this._$);
                    break;
                case 12:
                    this.$ = new yy.ast.CompositeMember($$[$0 - 1], this._$);
                    break;
                case 13:
                    this.$ = [$$[$0]];
                    break;
                case 14:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 15:case 120:
                    this.$ = [$$[$0]];
                    break;
                case 16:case 36:case 68:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 17:case 34:
                    this.$ = $$[$0];
                    break;
                case 18:
                    this.$ = new yy.ast.ViewStatement($$[$0 - 7], $$[$0 - 5], [], $$[$0 - 3], this._$);
                    break;
                case 19:
                    this.$ = new yy.ast.ViewStatement($$[$0 - 7], $$[$0 - 5], $$[$0 - 8], $$[$0 - 3], this._$);
                    break;
                case 20:
                    this.$ = new yy.ast.FragmentStatement($$[$0 - 7], [], [], $$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 21:
                    this.$ = new yy.ast.FragmentStatement($$[$0 - 8], $$[$0 - 7], [], $$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 22:
                    this.$ = new yy.ast.FragmentStatement($$[$0 - 8], [], $$[$0 - 7], $$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 23:
                    this.$ = new yy.ast.FragmentStatement($$[$0 - 9], $$[$0 - 8], $$[$0 - 7], $$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 24:
                    this.$ = $$[$0 - 1];
                    break;
                case 25:
                    this.$ = [$$[$0]];
                    break;
                case 26:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 27:
                    this.$ = new yy.ast.TypeClass($$[$0], null, this._$);
                    break;
                case 28:
                    this.$ = new yy.ast.TypeClass($$[$0 - 2], $$[$0], this._$);
                    break;
                case 29:
                    this.$ = new yy.ast.Type($$[$0], [], this._$);
                    break;
                case 30:
                    this.$ = new yy.ast.Type($$[$0 - 1], $$[$0], this._$);
                    break;
                case 31:
                    this.$ = new yy.ast.ExportFromStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 32:
                    this.$ = new yy.ast.Tag($$[$0 - 6], $$[$0 - 5], $$[$0 - 3] ? $$[$0 - 3] : [], this._$);
                    break;
                case 33:
                    this.$ = new yy.ast.Tag($$[$0 - 2], $$[$0 - 1], [], this._$);
                    break;
                case 35:
                    this.$ = new yy.ast.MemberExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 37:case 103:
                    this.$ = [];
                    break;
                case 38:
                    this.$ = new yy.ast.Attribute($$[$0 - 2].name, $$[$0 - 2].namespace, $$[$0], this._$);
                    break;
                case 39:
                    this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace, new yy.ast.BooleanLiteral(true, this._$), this._$);
                    break;
                case 40:
                    this.$ = { namespace: null, name: $$[$0] };
                    break;
                case 41:
                    this.$ = { namespace: $$[$0 - 2], name: $$[$0] };
                    break;
                case 42:case 51:case 53:
                    this.$ = $$[$0];
                    break;
                case 43:
                    this.$ = new yy.ast.Interpolation($$[$0 - 1], [], this._$);
                    break;
                case 44:
                    this.$ = new yy.ast.Interpolation($$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 45:
                    this.$ = [$$[$0]];
                    break;
                case 47:
                    this.$ = new yy.ast.Filter($$[$0], [], this._$);
                    break;
                case 48:
                    this.$ = new yy.ast.Filter($$[$0 - 1], $$[$0], this._$);
                    break;
                case 49:
                    this.$ = [$$[$0]];
                    break;
                case 52:
                    this.$ = new yy.ast.TextInterpolation($$[$0], this._$);
                    break;
                case 54:
                    this.$ = new yy.ast.ForStatement($$[$0 - 7], null, null, $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 55:
                    this.$ = new yy.ast.ForStatement($$[$0 - 9], $$[$0 - 7], null, $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 56:
                    this.$ = new yy.ast.ForStatement($$[$0 - 11], $$[$0 - 9], $$[$0 - 7], $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 57:
                    this.$ = new yy.ast.ForStatement($$[$0 - 11], null, null, $$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 58:
                    this.$ = new yy.ast.ForStatement($$[$0 - 13], $$[$0 - 11], null, $$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 59:
                    this.$ = new yy.ast.ForStatement($$[$0 - 15], $$[$0 - 13], null, $$[$0 - 11], $$[$0 - 9], $$[$0 - 3], this._$);
                    break;
                case 60:
                    this.$ = new yy.ast.IfStatement($$[$0 - 5], $$[$0 - 3], null, this._$);
                    break;
                case 61:
                    this.$ = new yy.ast.IfStatement($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 62:
                    this.$ = new yy.ast.ElseClause($$[$0 - 3], this._$);
                    break;
                case 63:
                    this.$ = new yy.ast.ElseIfClause($$[$0 - 5], $$[$0 - 3], null, this._$);
                    break;
                case 64:
                    this.$ = new yy.ast.ElseIfClause($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 65:
                    this.$ = new yy.ast.MatchStatement($$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 66:
                    this.$ = new yy.ast.MatchStatement($$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 67:
                    this.$ = [$$[$0]];
                    break;
                case 69:
                    this.$ = new yy.ast.TypeOfCaseStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 70:
                    this.$ = new yy.ast.InstanceOfCaseStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 71:case 74:
                    this.$ = new yy.ast.CallStatement($$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 72:case 73:
                    this.$ = new yy.ast.CallStatement($$[$0 - 1], [], this._$);
                    break;
                case 75:
                    this.$ = new yy.ast.CallStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 76:
                    this.$ = new yy.ast.CallStatement($$[$0 - 2], [], this._$);
                    break;
                case 77:
                    this.$ = new yy.ast.Characters($$[$0], this._$);
                    break;
                case 78:
                    this.$ = [];
                    break;
                case 79:
                    this.$ = $$[$0 - 1];
                    break;
                case 80:
                    this.$ = [$$[$0]];
                    break;
                case 81:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 82:
                    this.$ = $$[$0 - 1];
                    break;
                case 83:
                    this.$ = new yy.ast.TernaryExpression($$[$0 - 4], $$[$0 - 2], $$[$0], this._$);
                    break;
                case 84:
                    this.$ = new yy.ast.BinaryExpression($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 85:
                    this.$ = new yy.ast.UnaryExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 86:
                    this.$ = new yy.ast.ReadExpression($$[$0 - 1], null, this._$);
                    break;
                case 87:
                    this.$ = new yy.ast.ReadExpression($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 88:
                    this.$ = $$[$0];
                    break;
                case 89:
                    this.$ = yy.help.convertOperator($$[$0]);
                    break;
                case 90:case 92:
                    this.$ = new yy.ast.CallExpression($$[$0 - 1], [], $$[$0], this._$);
                    break;
                case 91:case 93:
                    this.$ = new yy.ast.CallExpression($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 94:
                    this.$ = new yy.ast.CallExpression($$[$0 - 2], [], $$[$0], this._$);
                    break;
                case 95:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 96:
                    this.$ = new yy.ast.BindExpression($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 97:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 98:
                    this.$ = new yy.ast.BindExpression($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 99:
                    this.$ = new yy.ast.NewExpression($$[$0], [], this._$);
                    break;
                case 100:
                    this.$ = new yy.ast.NewExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 101:
                    this.$ = new yy.ast.FunctionExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 102:
                    this.$ = new yy.ast.FunctionExpression([], $$[$0], this._$);
                    break;
                case 104:
                    this.$ = $$[$0 - 1];
                    break;
                case 105:
                    this.$ = [$$[$0]];
                    break;
                case 106:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 116:case 117:
                    this.$ = new yy.ast.MemberExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 115:
                    this.$ = new yy.ast.MemberExpression($$[$0 - 3], $$[$0], this._$);
                    break;
                case 118:
                    this.$ = new yy.ast.ObjectLiteral([], this._$);
                    break;
                case 119:
                    this.$ = new yy.ast.ObjectLiteral($$[$0 - 1], this._$);
                    break;
                case 121:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 122:
                    this.$ = { key: $$[$0 - 2], value: $$[$0] };
                    break;
                case 123:
                    this.$ = new yy.ast.ArrayLiteral([], this._$);
                    break;
                case 124:
                    this.$ = new yy.ast.ArrayLiteral($$[$0 - 1], this._$);
                    break;
                case 125:
                    this.$ = new yy.ast.StringLiteral($$[$0], this._$);
                    break;
                case 126:
                    this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$);
                    break;
                case 127:
                    this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
                    break;
                case 128:
                    this.$ = $$[$0];
                    break;
                case 129:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 2], $$[$0], [], false, this._$);
                    break;
                case 130:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 4], $$[$0 - 2], [], true, this._$);
                    break;
                case 131:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 3], $$[$0 - 1], $$[$0], false, this._$);
                    break;
                case 132:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 5], $$[$0 - 3], $$[$0 - 2], true, this._$);
                    break;
                case 133:
                    this.$ = new yy.ast.TypeAssertion($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 134:
                    this.$ = $$[$0];
                    break;
                case 135:
                    this.$ = new yy.ast.Identifier($$[$0], '', this._$);
                    break;
                case 136:
                    this.$ = new yy.ast.ContextProperty($$[$0].slice(1), this._$);
                    break;
                case 137:
                    this.$ = new yy.ast.ContextVariable(this._$);
                    break;
            }
        },
        table: [o($V0, [2, 138], { 3: 1, 4: 2, 8: 3, 9: 4, 10: $V1 }), { 1: [3] }, o($V2, [2, 140], { 5: 6, 28: 7, 29: 8, 30: 9, 31: 10, 41: 11, 51: 12, 32: $V3 }), o($V0, [2, 139], { 9: 14, 10: $V1 }), o($V4, [2, 2]), { 11: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: $V5, 21: [1, 21], 22: [1, 22] }, { 6: 23, 7: [2, 142], 38: 24, 53: $V6 }, o($V2, [2, 141], { 30: 9, 31: 10, 41: 11, 51: 12, 29: 26, 32: $V3 }), o($V0, [2, 15]), o($V0, [2, 17]), o($V0, [2, 150]), o($V0, [2, 151]), o($V0, [2, 152]), { 33: [1, 27], 42: [1, 28], 52: [1, 29] }, o($V4, [2, 3]), { 12: [1, 30] }, { 12: [2, 5] }, { 12: [2, 6] }, { 12: [2, 7] }, { 12: [2, 8] }, o($V7, [2, 9], { 20: [1, 31] }), { 20: [1, 32] }, { 15: 35, 16: 36, 19: $V5, 23: 33, 25: 34 }, { 7: [1, 37] }, { 7: [2, 143] }, { 19: $V8, 34: 39, 54: 38 }, o($V0, [2, 16]), { 19: $V8, 34: 41 }, { 19: $V8, 34: 42 }, { 19: [1, 43] }, { 13: 44, 129: $V9 }, { 19: [1, 46] }, { 19: [1, 47] }, { 24: [1, 48], 26: [1, 49] }, o($Va, [2, 13]), o($Va, [2, 146]), o($Va, [2, 147]), { 1: [2, 1] }, o($Vb, [2, 37], { 55: 50 }), o($Vc, [2, 34], { 50: [1, 51] }), o([19, 20, 24, 26, 35, 37, 46, 48, 50, 53, 56, 59, 62, 68, 71, 81, 96, 100, 101, 105, 113, 119, 120, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [2, 135]), { 35: [1, 52], 40: 53, 46: $Vd }, { 35: [1, 55], 40: 56, 45: 57, 46: $Vd, 100: $Ve }, { 12: [1, 59] }, o($V4, [2, 144], { 14: 60, 138: [1, 61] }), o([7, 10, 19, 20, 24, 26, 32, 37, 48, 50, 53, 56, 59, 62, 68, 71, 96, 101, 105, 120, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [2, 125]), o($V7, [2, 10]), { 12: [2, 11] }, { 12: [2, 12] }, { 15: 63, 16: 64, 19: $V5, 27: 62 }, { 19: [1, 69], 56: [1, 65], 59: [1, 66], 60: 67, 61: 68 }, { 19: $V8, 34: 70 }, { 19: $V8, 34: 72, 36: 71 }, { 35: [1, 73] }, { 19: $V8, 34: 76, 47: 74, 49: 75 }, { 19: $V8, 34: 72, 36: 77 }, { 35: [1, 78], 45: 79, 100: $Ve }, { 35: [1, 80] }, { 19: $V8, 34: 84, 80: 83, 101: [1, 81], 118: 82 }, { 13: 85, 129: $V9 }, o($V4, [2, 4]), o($V4, [2, 145]), o($Va, [2, 14]), o($Va, [2, 148]), o($Va, [2, 149]), { 32: $Vf, 38: 90, 43: 87, 53: $V6, 57: 86, 58: [2, 153], 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, o($Vi, [2, 33]), o($Vb, [2, 36]), o($Vb, [2, 39], { 62: [1, 103] }), o($Vj, [2, 40], { 50: [1, 104] }), o($Vc, [2, 35]), { 37: [1, 105] }, o($Vk, [2, 29], { 40: 106, 46: $Vd }), { 19: $V8, 34: 72, 36: 107 }, { 26: [1, 109], 48: [1, 108] }, o($Vl, [2, 25]), o($Vl, [2, 27], { 50: [1, 110] }), { 37: [1, 111] }, { 19: $V8, 34: 72, 36: 112 }, { 35: [1, 113] }, { 19: $V8, 34: 72, 36: 114 }, { 35: [2, 103] }, { 26: $Vm, 101: [1, 115] }, o($Vn, [2, 105]), o($Vo, [2, 128], { 50: [1, 117] }), { 37: [1, 118] }, { 58: [1, 119] }, { 32: $Vf, 38: 90, 53: $V6, 58: [2, 154], 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, o($Vp, [2, 49]), o($Vp, [2, 51]), o($Vp, [2, 159]), o($Vp, [2, 160]), o($Vp, [2, 161]), o($Vp, [2, 162]), o($Vp, [2, 53]), o($Vp, [2, 52]), o($Vp, [2, 77]), o($Vp, [2, 163]), o($Vp, [2, 164]), o($Vp, [2, 165]), o($Vp, [2, 166]), { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 121, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, { 79: $VE, 85: $VF, 89: $VG, 98: $VH }, { 13: 162, 63: 159, 64: 160, 65: 161, 66: $Vg, 129: $V9, 130: 163, 131: $Vy, 132: 164, 133: 146, 149: $VA, 150: $VB }, { 19: [1, 165] }, { 38: 166, 53: $V6 }, o($Vk, [2, 30]), { 37: [1, 167] }, o([26, 35, 37, 46, 48, 81, 100, 101, 119], [2, 24]), { 19: $V8, 34: 76, 49: 168 }, { 19: $V8, 34: 72, 36: 169 }, { 32: $Vf, 38: 90, 43: 170, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 37: [1, 171] }, { 19: $V8, 34: 72, 36: 172 }, { 37: [1, 173] }, { 35: [2, 104] }, { 19: $V8, 34: 84, 80: 174 }, { 19: $V8, 34: 175 }, o($V0, [2, 31]), { 19: $V8, 34: 39, 54: 176 }, o($Vp, [2, 50]), { 68: [1, 177], 69: 178, 70: 180, 71: $VI, 105: $VJ }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 182, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 183, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, { 46: [1, 184] }, o($VK, [2, 88]), o($VK, [2, 167]), o($VK, [2, 168], { 120: $VL }), o($VK, [2, 169], { 72: 186, 40: 187, 46: $Vd, 100: $VM, 113: $VN, 120: $VO }), o($VK, [2, 170]), o($VK, [2, 171], { 120: $VP }), o($VK, [2, 172], { 120: $VQ }), o($VK, [2, 173], { 120: $VR }), o($VK, [2, 174], { 120: $VS }), o($VK, [2, 175]), o($VK, [2, 176]), o($VK, [2, 177], { 120: $VT }), o($VK, [2, 178]), { 19: $V8, 34: 196 }, o($VK, [2, 197], { 72: 197, 40: 198, 46: $Vd, 100: $VM, 113: $VU, 120: $VV }), o($VK, [2, 198], { 120: $VW }), o($VK, [2, 199], { 120: $VX }), { 19: $V8, 34: 84, 80: 83, 118: 203 }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 204, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, { 19: $VY, 24: [1, 205], 126: 206, 127: 207, 128: 208, 129: $VZ }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 48: [1, 211], 67: 213, 99: 128, 100: $Vs, 104: 212, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, o($V_, [2, 127]), o($V_, [2, 126]), o($VK, [2, 134]), o($V$, [2, 136]), o($V$, [2, 137]), o($V_, [2, 195]), o($V_, [2, 196]), o($V$, [2, 200]), o($V$, [2, 201]), { 19: $V8, 34: 84, 80: 214 }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 215, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, { 19: $V8, 34: 216 }, { 13: 224, 19: $V8, 22: $Vq, 34: 217, 46: $Vr, 99: 218, 100: [1, 219], 111: 225, 112: 226, 121: 220, 122: 221, 123: 222, 124: 223, 125: 227, 129: $V9, 136: $Vz, 137: 150, 151: $VC, 152: $VD }, o($Vb, [2, 38]), o($Vb, [2, 42]), o($Vb, [2, 155]), o($Vb, [2, 156]), o($Vb, [2, 157]), o($Vb, [2, 158]), o($Vj, [2, 41]), { 32: [1, 228] }, { 38: 229, 53: $V6 }, o($Vl, [2, 26]), o($Vl, [2, 28]), { 32: [1, 230], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 32: $Vf, 38: 90, 43: 231, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 37: [1, 232] }, { 32: $Vf, 38: 90, 43: 233, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, o($Vn, [2, 106]), o($Vo, [2, 129], { 40: 235, 46: [1, 234] }), { 56: [1, 236] }, o($V01, [2, 43]), { 68: [1, 237], 70: 238, 71: $VI }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 239, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, o($V11, [2, 45]), { 19: $V8, 34: 39, 54: 240 }, { 20: $V21, 53: [1, 247], 56: [1, 245], 62: [1, 254], 96: [1, 258], 101: [1, 241], 105: $VJ, 106: 242, 110: 244, 139: [1, 246], 140: [1, 248], 141: [1, 249], 142: [1, 250], 143: [1, 251], 144: [1, 252], 145: [1, 253], 146: [1, 255], 147: [1, 256], 148: [1, 257] }, o($VK, [2, 85]), { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 259, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, { 19: $V8, 34: 260 }, o($V$, $V31), { 72: 261, 100: $VM }, { 19: $V8, 34: 262 }, { 19: $V8, 34: 263 }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 213, 99: 128, 100: $Vs, 101: [1, 264], 104: 265, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, { 19: $V8, 34: 266 }, { 19: $V8, 34: 267 }, { 19: $V8, 34: 268 }, { 19: $V8, 34: 269 }, { 19: $V8, 34: 270 }, o($VK, [2, 99], { 72: 271, 100: $VM }), o($V$, $V41), { 72: 272, 100: $VM }, { 19: $V8, 34: 273 }, { 19: $V8, 34: 274 }, { 19: $V8, 34: 275 }, { 19: $V8, 34: 276 }, { 26: $Vm, 119: [1, 277] }, o($V51, [2, 102], { 105: $VJ }), o($V$, [2, 118]), { 24: [1, 278], 26: [1, 279] }, o($Va, [2, 120]), { 50: [1, 280] }, { 50: [2, 193] }, { 50: [2, 194] }, o($V$, [2, 123]), { 26: $V61, 48: [1, 281] }, o($V71, [2, 80], { 105: $VJ }), { 26: [1, 284], 81: [1, 283] }, { 37: [1, 285], 105: $VJ }, { 37: [1, 286] }, { 37: [1, 288], 40: 198, 46: $Vd, 72: 287, 100: $VM, 113: $VU, 120: $VV }, { 37: [1, 289], 40: 187, 46: $Vd, 72: 290, 100: $VM, 113: $VN, 120: $VO }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 291, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, { 120: $VW }, { 120: $VX }, { 120: $VR }, { 120: $VQ }, { 120: $VS }, { 120: $VL }, { 120: $VP }, { 120: $VT }, { 39: [1, 292] }, { 32: [1, 293] }, { 44: [1, 294], 79: $VE, 85: $VF, 89: $VG, 98: $VH }, { 32: [1, 295], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 32: $Vf, 38: 90, 43: 296, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 32: [1, 297], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 19: $V8, 34: 76, 47: 74, 48: [1, 298], 49: 75 }, o($Vo, [2, 131], { 46: [1, 299] }), o($Vi, [2, 32]), o($V01, [2, 44]), o($V11, [2, 46]), { 50: $V81, 105: $VJ }, o($V11, [2, 47], { 72: 301, 100: $VM }), o($VK, [2, 82], { 72: 302, 100: $VM, 120: $V91 }), { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 304, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, { 19: $V8, 34: 305 }, o($Va1, [2, 89]), o($Va1, [2, 179]), o($Va1, [2, 180]), o($Va1, [2, 181]), o($Va1, [2, 182]), o($Va1, [2, 183]), o($Va1, [2, 184]), o($Va1, [2, 185]), o($Va1, [2, 186]), o($Va1, [2, 187]), o($Va1, [2, 188]), o($Va1, [2, 189]), o($Va1, [2, 190]), o($Va1, [2, 191]), o($Va1, [2, 192]), { 48: [1, 306], 105: [1, 307] }, o($Vb1, [2, 113]), o($V$, [2, 93]), o($Vb1, [2, 117]), o($V$, [2, 97], { 72: 308, 100: $VM }), o($V$, [2, 78]), { 26: $V61, 101: [1, 309] }, o($Vb1, [2, 114]), o($Vb1, [2, 111]), o($Vb1, [2, 110]), o($Vb1, [2, 112]), o($Vb1, [2, 116]), o($VK, [2, 100]), o($V$, [2, 91]), o($Vb1, [2, 107]), o($V$, [2, 95], { 72: 310, 100: $VM }), o($Vb1, [2, 108]), o($Vb1, [2, 109]), { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 311, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, o($V$, [2, 119]), { 19: $VY, 127: 312, 128: 208, 129: $VZ }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 313, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, o($V$, [2, 124]), { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 314, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 315, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, { 19: $V8, 34: 84, 80: 316 }, { 32: $Vf, 38: 90, 43: 317, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 32: [1, 320], 90: 318, 92: 319 }, { 37: [1, 321], 120: $V41 }, o($Vp, [2, 72]), o($Vp, [2, 73]), { 37: [1, 322], 120: $V31 }, { 20: $V21, 101: [1, 323], 105: $VJ }, { 37: [1, 324] }, { 39: [1, 325] }, { 37: [1, 326] }, { 44: [1, 327], 79: $VE, 85: $VF, 89: $VG, 98: $VH }, { 32: [1, 328], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 44: [1, 329], 79: $VE, 85: $VF, 89: $VG, 98: $VH }, o($Vo, [2, 130]), { 48: [1, 330] }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 331, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, o($V11, [2, 48]), o($V$, $Vc1), { 19: $V8, 34: 332 }, { 101: [1, 333], 105: $VJ }, { 101: [1, 334] }, o($VK, [2, 86]), { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 335, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, o($V$, [2, 98]), o($V$, [2, 79]), o($V$, [2, 96]), o($V51, [2, 101], { 105: $VJ }), o($Va, [2, 121]), o($Va, [2, 122], { 105: $VJ }), o($V71, [2, 81], { 105: $VJ }), { 37: [1, 336], 105: $VJ }, { 26: [1, 338], 81: [1, 337] }, { 32: [1, 339], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 87: 340, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 32: [1, 341], 92: 342 }, { 32: [2, 67] }, { 93: $Vd1 }, o($Vp, [2, 71]), o($Vp, [2, 74]), { 37: [1, 345], 72: 344, 100: $VM, 120: $V91 }, o($V0, [2, 18]), { 37: [1, 346] }, o($V0, [2, 20]), { 37: [1, 347] }, { 44: [1, 348], 79: $VE, 85: $VF, 89: $VG, 98: $VH }, { 37: [1, 349] }, o($Vo, [2, 132]), o($V51, [2, 83], { 105: $VJ }), o($Vb1, [2, 115]), o($VK, [2, 84]), o($V$, [2, 133]), { 48: [1, 350], 50: $V81, 105: $VJ }, { 32: $Vf, 38: 90, 43: 351, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 352, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, { 19: $V8, 34: 84, 80: 353 }, { 79: $VE, 83: $Ve1, 85: $VF, 86: [1, 354], 89: $VG, 98: $VH }, o($Vp, [2, 61]), { 83: [1, 356], 91: [1, 357], 93: $Vd1 }, { 32: [2, 68] }, { 94: [1, 358], 96: [1, 359] }, { 37: [1, 360], 120: $Vc1 }, o($Vp, [2, 76]), o($V0, [2, 19]), o($V0, [2, 21]), { 37: [1, 361] }, o($V0, [2, 22]), o($VK, [2, 87]), { 32: [1, 362], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 37: [1, 363], 105: $VJ }, { 81: [1, 364] }, { 37: [1, 365] }, { 37: [1, 366], 85: [1, 367] }, { 37: [1, 368] }, { 37: [1, 369] }, { 13: 370, 129: $V9 }, { 19: $V8, 34: 371 }, o($Vp, [2, 75]), o($V0, [2, 23]), { 79: $VE, 82: [1, 372], 83: [1, 373], 85: $VF, 89: $VG, 98: $VH }, { 32: $Vf, 38: 90, 43: 374, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 375, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, o($Vp, [2, 60]), { 32: $Vf, 38: 90, 43: 376, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 13: 133, 19: $V8, 22: $Vq, 34: 139, 46: $Vr, 67: 377, 99: 128, 100: $Vs, 107: $Vt, 108: $Vu, 109: 125, 111: 127, 112: 130, 114: 126, 115: $Vv, 116: 129, 117: $Vw, 119: $Vx, 121: 140, 122: 141, 123: 132, 124: 131, 125: 136, 129: $V9, 130: 135, 131: $Vy, 132: 134, 133: 146, 134: 137, 135: 148, 136: $Vz, 137: 150, 149: $VA, 150: $VB, 151: $VC, 152: $VD }, { 32: $Vf, 38: 90, 43: 378, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, o($Vp, [2, 66]), { 37: [1, 379] }, { 37: [1, 380] }, { 37: [1, 381] }, { 37: [1, 382] }, { 32: [1, 383], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 37: [1, 384], 105: $VJ }, { 32: [1, 385], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 37: [1, 386], 105: $VJ }, { 32: [1, 387], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 32: $Vf, 38: 90, 43: 388, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 32: $Vf, 38: 90, 43: 389, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, o($Vp, [2, 54]), { 32: $Vf, 38: 90, 43: 390, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 79: $VE, 82: [1, 391], 83: [1, 392], 85: $VF, 89: $VG, 98: $VH }, { 32: $Vf, 38: 90, 43: 393, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 79: $VE, 85: $VF, 86: [1, 394], 89: $VG, 98: $VH }, { 32: $Vf, 38: 90, 43: 395, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 79: $VE, 85: $VF, 89: $VG, 91: [1, 396], 98: $VH }, { 32: [1, 397], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 32: [1, 398], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 32: [1, 399], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 37: [1, 400] }, { 37: [1, 401] }, { 32: [1, 402], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 37: [1, 403] }, { 32: [1, 404], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 87: 405, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 37: [1, 406] }, { 79: $VE, 85: $VF, 89: $VG, 95: [1, 407], 98: $VH }, { 79: $VE, 85: $VF, 89: $VG, 95: [1, 408], 98: $VH }, { 79: $VE, 82: [1, 409], 85: $VF, 89: $VG, 98: $VH }, o($Vp, [2, 55]), { 32: $Vf, 38: 90, 43: 410, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 79: $VE, 82: [1, 411], 83: [1, 412], 85: $VF, 89: $VG, 98: $VH }, o($Vp, [2, 62]), { 79: $VE, 83: $Ve1, 85: $VF, 86: [1, 413], 89: $VG, 98: $VH }, o($Vp, [2, 64]), o($Vp, [2, 65]), { 37: [1, 414] }, { 37: [1, 415] }, { 37: [1, 416] }, { 32: [1, 417], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, { 37: [1, 418] }, { 37: [1, 419] }, { 37: [1, 420] }, { 32: [2, 69] }, { 32: [2, 70] }, o($Vp, [2, 57]), { 79: $VE, 82: [1, 421], 85: $VF, 89: $VG, 98: $VH }, o($Vp, [2, 56]), { 32: $Vf, 38: 90, 43: 422, 53: $V6, 65: 95, 66: $Vg, 73: 88, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, o($Vp, [2, 63]), { 37: [1, 423] }, { 32: [1, 424], 38: 90, 53: $V6, 65: 95, 66: $Vg, 73: 120, 74: 89, 75: 92, 76: 91, 77: 94, 78: 97, 84: 98, 88: 99, 97: 100, 102: 93, 103: $Vh }, o($Vp, [2, 58]), { 79: $VE, 82: [1, 425], 85: $VF, 89: $VG, 98: $VH }, { 37: [1, 426] }, o($Vp, [2, 59])],
        defaultActions: { 16: [2, 5], 17: [2, 6], 18: [2, 7], 19: [2, 8], 24: [2, 143], 37: [2, 1], 47: [2, 11], 48: [2, 12], 81: [2, 103], 115: [2, 104], 209: [2, 193], 210: [2, 194], 319: [2, 67], 342: [2, 68], 414: [2, 69], 415: [2, 70] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "flex": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return;
                        break;
                    case 1:
                        return 10;
                        break;
                    case 2:
                        return 12;
                        break;
                    case 3:
                        return 58;
                        break;
                    case 4:
                        this.begin('CONTROL');return 32;
                        break;
                    case 5:
                        this.begin('COMMENT');return;
                        break;
                    case 6:
                        this.begin('CHILDREN');return 56;
                        break;
                    case 7:
                        this.begin('CHILDREN');return 59;
                        break;
                    case 8:
                        this.begin('EXPRESSION');return 66;
                        break;
                    case 9:
                        return 'MACRO';
                        break;
                    case 10:
                        return 'ENDMACRO';
                        break;
                    case 11:
                        return 42;
                        break;
                    case 12:
                        return 44;
                        break;
                    case 13:
                        return 79;
                        break;
                    case 14:
                        return 82;
                        break;
                    case 15:
                        return 85;
                        break;
                    case 16:
                        return 86;
                        break;
                    case 17:
                        return 83;
                        break;
                    case 18:
                        return 'ELSEIF';
                        break;
                    case 19:
                        return 81;
                        break;
                    case 20:
                        return 'SWITCH';
                        break;
                    case 21:
                        return 'ENDSWITCH';
                        break;
                    case 22:
                        return 'DEFAULT';
                        break;
                    case 23:
                        return 93;
                        break;
                    case 24:
                        return 95;
                        break;
                    case 25:
                        return 98;
                        break;
                    case 26:
                        return 52;
                        break;
                    case 27:
                        return 12;
                        break;
                    case 28:
                        return 'ENDEXPORT';
                        break;
                    case 29:
                        return 33;
                        break;
                    case 30:
                        return 35;
                        break;
                    case 31:
                        return 39;
                        break;
                    case 32:
                        return 89;
                        break;
                    case 33:
                        return 91;
                        break;
                    case 34:
                        return 'OTHERWISE';
                        break;
                    case 35:
                        return 'ENDOTHERWISE';
                        break;
                    case 36:
                        return 96;
                        break;
                    case 37:
                        return 94;
                        break;
                    case 38:
                        this.popState();return 37;
                        break;
                    case 39:
                        return 115;
                        break;
                    case 40:
                        return 71;
                        break;
                    case 41:
                        return 119;
                        break;
                    case 42:
                        return 113;
                        break;
                    case 43:
                        return '->';
                        break;
                    case 44:
                        return 96;
                        break;
                    case 45:
                        return 108;
                        break;
                    case 46:
                        this.popState();return 68;
                        break;
                    case 47:
                        this.begin('EXPRESSION');return 66;
                        break;
                    case 48:
                        this.begin('CONTROL');return 32;
                        break;
                    case 49:
                        this.begin('COMMENT');return;
                        break;
                    case 50:
                        this.popState();return 58;
                        break;
                    case 51:
                        this.popState();return 53;
                        break;
                    case 52:
                        this.popState();return 103;
                        break;
                    case 53:
                        this.popState();return;
                        break;
                    case 54:
                        return 149;
                        break;
                    case 55:
                        return 150;
                        break;
                    case 56:
                        return 131;
                        break;
                    case 57:
                        return 129;
                        break;
                    case 58:
                        return 56;
                        break;
                    case 59:
                        return 53;
                        break;
                    case 60:
                        return 100;
                        break;
                    case 61:
                        return 101;
                        break;
                    case 62:
                        return 46;
                        break;
                    case 63:
                        return 48;
                        break;
                    case 64:
                        return 138;
                        break;
                    case 65:
                        return 50;
                        break;
                    case 66:
                        return ':::';
                        break;
                    case 67:
                        return 62;
                        break;
                    case 68:
                        return 141;
                        break;
                    case 69:
                        return 142;
                        break;
                    case 70:
                        return 139;
                        break;
                    case 71:
                        return 140;
                        break;
                    case 72:
                        return 143;
                        break;
                    case 73:
                        return 145;
                        break;
                    case 74:
                        return 21;
                        break;
                    case 75:
                        return 144;
                        break;
                    case 76:
                        return 117;
                        break;
                    case 77:
                        return 146;
                        break;
                    case 78:
                        return 147;
                        break;
                    case 79:
                        return 148;
                        break;
                    case 80:
                        return 107;
                        break;
                    case 81:
                        return 26;
                        break;
                    case 82:
                        return 105;
                        break;
                    case 83:
                        return 120;
                        break;
                    case 84:
                        return 22;
                        break;
                    case 85:
                        return 24;
                        break;
                    case 86:
                        return 151;
                        break;
                    case 87:
                        return 20;
                        break;
                    case 88:
                        return 19;
                        break;
                    case 89:
                        return 136;
                        break;
                    case 90:
                        return 7;
                        break;
                    case 91:
                        console.log(yy_.yytext);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:import)/, /^(?:from)/, /^(?:<\/)/, /^(?:\{%)/, /^(?:<!--)/, /^(?:>)/, /^(?:\/>)/, /^(?:\{\{)/, /^(?:macro)/, /^(?:endmacro)/, /^(?:frag)/, /^(?:endfrag)/, /^(?:for)/, /^(?:endfor)/, /^(?:if)/, /^(?:endif)/, /^(?:else)/, /^(?:elseif)/, /^(?:in)/, /^(?:switch)/, /^(?:endswitch)/, /^(?:default)/, /^(?:case)/, /^(?:endcase)/, /^(?:call)/, /^(?:export)/, /^(?:from)/, /^(?:endexport)/, /^(?:view)/, /^(?:using)/, /^(?:endview)/, /^(?:match)/, /^(?:endmatch)/, /^(?:otherwise)/, /^(?:endotherwise)/, /^(?:instanceof)/, /^(?:typeof)/, /^(?:%\})/, /^(?:new)/, /^(?:\|)/, /^(?:=>)/, /^(?:::)/, /^(?:->)/, /^(?:instanceof)/, /^(?:@@)/, /^(?:\}\})/, /^(?:\{\{)/, /^(?:\{%)/, /^(?:<!--)/, /^(?:<\/)/, /^(?:<)/, /^(?:[^\/<>{%}]+)/, /^(?:(.|\r|\n)*?-->)/, /^(?:true)/, /^(?:false)/, /^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/, /^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/, /^(?:>)/, /^(?:<)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:;)/, /^(?::)/, /^(?::::)/, /^(?:=)/, /^(?:==)/, /^(?:!=)/, /^(?:>=)/, /^(?:<=)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:\\)/, /^(?:&&)/, /^(?:\|\|)/, /^(?:\^)/, /^(?:!)/, /^(?:,)/, /^(?:\?)/, /^(?:\.)/, /^(?:\{)/, /^(?:\})/, /^(?:@)/, /^(?:as)/, /^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/, /^(?:@([a-zA-Z$_][a-zA-Z$_0-9-]*))/, /^(?:$)/, /^(?:.)/],
            conditions: { "EXPRESSION": { "rules": [0, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "inclusive": false }, "CONTROL": { "rules": [0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "inclusive": false }, "COMMENT": { "rules": [0, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "inclusive": false }, "CHILDREN": { "rules": [0, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "inclusive": false }, "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = ParserImpl;
    exports.Parser = ParserImpl.Parser;
    exports.parse = function () {
        return ParserImpl.parse.apply(ParserImpl, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,