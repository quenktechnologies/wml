"use strict";

/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [7, 31, 42],
        $V1 = [1, 5],
        $V2 = [7, 42],
        $V3 = [1, 13],
        $V4 = [7, 10, 31, 42],
        $V5 = [1, 20],
        $V6 = [1, 25],
        $V7 = [12, 23, 25],
        $V8 = [1, 39],
        $V9 = [1, 44],
        $Va = [23, 25],
        $Vb = [18, 45, 48],
        $Vc = [1, 50],
        $Vd = [18, 45, 48, 49, 59, 62, 91],
        $Ve = [1, 54],
        $Vf = [1, 91],
        $Vg = [1, 87],
        $Vh = [1, 71],
        $Vi = [1, 72],
        $Vj = [1, 85],
        $Vk = [1, 86],
        $Vl = [1, 88],
        $Vm = [1, 89],
        $Vn = [1, 90],
        $Vo = [1, 92],
        $Vp = [1, 108],
        $Vq = [1, 102],
        $Vr = [1, 103],
        $Vs = [7, 31, 42, 47, 57, 94],
        $Vt = [18, 45, 48, 52],
        $Vu = [23, 25, 33, 42, 45, 49, 52, 54, 59, 62, 93, 96, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132],
        $Vv = [1, 115],
        $Vw = [25, 93, 118],
        $Vx = [1, 116],
        $Vy = [23, 25, 33, 42, 45, 52, 54, 59, 62, 93, 96, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132],
        $Vz = [1, 119],
        $VA = [1, 121],
        $VB = [1, 122],
        $VC = [1, 123],
        $VD = [1, 124],
        $VE = [1, 125],
        $VF = [1, 126],
        $VG = [1, 129],
        $VH = [1, 130],
        $VI = [1, 138],
        $VJ = [1, 139],
        $VK = [23, 25, 33, 42, 45, 49, 52, 54, 59, 62, 71, 91, 93, 96, 102, 108, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132],
        $VL = [2, 114],
        $VM = [31, 42, 47, 57, 94],
        $VN = [1, 146],
        $VO = [1, 147],
        $VP = [1, 148],
        $VQ = [1, 149],
        $VR = [2, 82],
        $VS = [2, 81],
        $VT = [25, 108],
        $VU = [1, 198],
        $VV = [18, 21, 91, 98, 104, 106, 117, 119, 120, 121, 122],
        $VW = [23, 25, 33, 42, 45, 49, 52, 54, 59, 62, 91, 93, 96, 102, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132],
        $VX = [18, 31, 42, 45, 47, 48, 57, 94],
        $VY = [59, 62],
        $VZ = [23, 25, 33, 42, 45, 52, 54, 59, 62, 93, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132],
        $V_ = [1, 256],
        $V$ = [1, 257],
        $V01 = [1, 264];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "module": 3, "module_option0": 4, "module_option1": 5, "module_option2": 6, "EOF": 7, "imports": 8, "import_statement": 9, "IMPORT": 10, "import_member": 11, "FROM": 12, "string_literal": 13, "default_member": 14, "alias_member": 15, "aggregate_member": 16, "composite_member": 17, "IDENTIFIER": 18, "AS": 19, "*": 20, "{": 21, "member_list": 22, "}": 23, "member_list_group0": 24, ",": 25, "member_list_group1": 26, "exports": 27, "export": 28, "export_group0": 29, "view_statement": 30, "{%": 31, "VIEW": 32, "%}": 33, "tag": 34, "ENDVIEW": 35, "macro_statement": 36, "MACRO": 37, "ENDMACRO": 38, "arguments": 39, "export_from_statement": 40, "EXPORT": 41, "<": 42, "tagname": 43, "attributes": 44, ">": 45, "tag_option0": 46, "</": 47, "/>": 48, ".": 49, "attribute": 50, "attribute_name": 51, "=": 52, "attribute_value": 53, ":": 54, "attribute_value_group0": 55, "interpolation": 56, "{{": 57, "expression": 58, "}}": 59, "filters": 60, "filter": 61, "|": 62, "children": 63, "child": 64, "control": 65, "characters": 66, "control_group0": 67, "for_statement": 68, "FOR": 69, "identifier": 70, "IN": 71, "ENDFOR": 72, "ELSE": 73, "if_statement": 74, "IF": 75, "ENDIF": 76, "else_clause": 77, "else_if_clause": 78, "switch_statement": 79, "SWITCH": 80, "case_statements": 81, "ENDSWITCH": 82, "case_statement": 83, "CASE": 84, "case_statement_group0": 85, "ENDCASE": 86, "DEFAULT": 87, "include_statement": 88, "INCLUDE": 89, "member_expression": 90, "(": 91, "call_expression": 92, ")": 93, "CHARACTERS": 94, "argument_list": 95, "?": 96, "binary_operator": 97, "!": 98, "expression_group0": 99, "binary_operator_group0": 100, "bind_expression": 101, "::": 102, "new_expression": 103, "NEW": 104, "function_expression": 105, "\\\\": 106, "parameter_list": 107, "=>": 108, "array_literal": 109, "object_literal": 110, "literal": 111, "number_literal": 112, "boolean_literal": 113, "key_value_pairs": 114, "key_value_pair": 115, "key_value_pair_group0": 116, "[": 117, "]": 118, "STRING_LITERAL": 119, "NUMBER_LITERAL": 120, "BOOLEAN": 121, "@": 122, ">=": 123, "<=": 124, "==": 125, "!=": 126, "+": 127, "/": 128, "-": 129, "&&": 130, "||": 131, "^": 132, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 7: "EOF", 10: "IMPORT", 12: "FROM", 18: "IDENTIFIER", 19: "AS", 20: "*", 21: "{", 23: "}", 25: ",", 31: "{%", 32: "VIEW", 33: "%}", 35: "ENDVIEW", 37: "MACRO", 38: "ENDMACRO", 41: "EXPORT", 42: "<", 45: ">", 47: "</", 48: "/>", 49: ".", 52: "=", 54: ":", 57: "{{", 59: "}}", 62: "|", 69: "FOR", 71: "IN", 72: "ENDFOR", 73: "ELSE", 75: "IF", 76: "ENDIF", 80: "SWITCH", 82: "ENDSWITCH", 84: "CASE", 86: "ENDCASE", 87: "DEFAULT", 89: "INCLUDE", 91: "(", 93: ")", 94: "CHARACTERS", 96: "?", 98: "!", 102: "::", 104: "NEW", 106: "\\\\", 108: "=>", 117: "[", 118: "]", 119: "STRING_LITERAL", 120: "NUMBER_LITERAL", 121: "BOOLEAN", 122: "@", 123: ">=", 124: "<=", 125: "==", 126: "!=", 127: "+", 128: "/", 129: "-", 130: "&&", 131: "||", 132: "^" },
        productions_: [0, [3, 4], [8, 1], [8, 2], [9, 4], [11, 1], [11, 1], [11, 1], [11, 1], [14, 1], [15, 3], [16, 3], [17, 3], [22, 1], [22, 3], [27, 1], [27, 2], [28, 1], [30, 8], [36, 8], [36, 9], [40, 6], [34, 8], [34, 4], [43, 1], [43, 3], [44, 2], [44, 0], [50, 3], [50, 1], [51, 1], [51, 3], [53, 1], [56, 3], [56, 4], [60, 1], [60, 2], [61, 2], [61, 3], [63, 1], [63, 2], [64, 1], [64, 1], [64, 1], [64, 1], [65, 1], [68, 10], [68, 12], [68, 14], [68, 14], [68, 16], [68, 18], [74, 8], [74, 6], [77, 7], [77, 9], [77, 7], [78, 6], [78, 6], [79, 8], [81, 1], [81, 2], [83, 8], [83, 8], [88, 5], [88, 4], [88, 5], [88, 4], [88, 7], [88, 6], [66, 1], [39, 2], [39, 3], [95, 1], [95, 3], [58, 3], [58, 5], [58, 5], [58, 2], [58, 1], [97, 1], [92, 2], [92, 2], [101, 3], [101, 4], [101, 3], [101, 4], [103, 2], [103, 3], [105, 4], [107, 1], [107, 3], [90, 3], [90, 3], [90, 3], [90, 3], [90, 3], [90, 3], [90, 3], [111, 1], [111, 1], [111, 1], [111, 1], [111, 1], [110, 2], [110, 3], [114, 1], [114, 3], [115, 3], [109, 2], [109, 3], [13, 1], [112, 1], [113, 1], [70, 1], [70, 1], [4, 0], [4, 1], [5, 0], [5, 1], [6, 0], [6, 1], [24, 1], [24, 1], [26, 1], [26, 1], [29, 1], [29, 1], [29, 1], [46, 0], [46, 1], [55, 1], [55, 1], [55, 1], [67, 1], [67, 1], [67, 1], [67, 1], [85, 1], [85, 1], [85, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 2], [99, 1], [100, 1], [100, 1], [100, 1], [100, 1], [100, 1], [100, 1], [100, 1], [100, 1], [100, 1], [100, 1], [100, 1], [100, 1], [100, 1], [116, 1], [116, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    this.$ = new yy.ast.Module($$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0 - 1] || null, this._$);return this.$;

                    break;
                case 2:
                    this.$ = [$$[$0]];
                    break;
                case 3:case 36:case 40:case 61:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 4:
                    this.$ = new yy.ast.ImportStatement($$[$0 - 2], $$[$0], this._$);
                    break;
                case 9:
                    this.$ = new yy.ast.DefaultMember($$[$0], this._$);
                    break;
                case 10:
                    this.$ = new yy.ast.AliasMember($$[$0 - 2], $$[$0], this._$);
                    break;
                case 11:
                    this.$ = new yy.ast.AggregateMember($$[$0], this._$);
                    break;
                case 12:
                    this.$ = new yy.ast.CompositeMember($$[$0 - 1], this._$);
                    break;
                case 13:
                    this.$ = [$$[$0]];
                    break;
                case 14:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 15:case 106:
                    this.$ = [$$[$0]];
                    break;
                case 16:case 26:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 17:
                    this.$ = $$[$0];
                    break;
                case 18:
                    this.$ = new yy.ast.ViewStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 19:
                    this.$ = new yy.ast.MacroStatement($$[$0 - 5], [], $$[$0 - 3], this._$);
                    break;
                case 20:
                    this.$ = new yy.ast.MacroStatement($$[$0 - 6], $$[$0 - 4], $$[$0 - 1], this._$);
                    break;
                case 21:
                    this.$ = new yy.ast.ExportFromStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 22:

                    yy.help.ensureTagsMatch($$[$0 - 6], $$[$0]);
                    this.$ = new yy.ast.Tag($$[$0 - 6], $$[$0 - 5], $$[$0 - 3] ? $$[$0 - 3] : [], this._$);

                    break;
                case 23:
                    this.$ = new yy.ast.Tag($$[$0 - 2], $$[$0 - 1], [], this._$);
                    break;
                case 24:
                    this.$ = $$[$0];
                    break;
                case 25:
                    this.$ = [$$[$0 - 2], $$[$0]].join('.');
                    break;
                case 27:
                    this.$ = [];
                    break;
                case 28:
                    this.$ = new yy.ast.Attribute($$[$0 - 2].name, $$[$0 - 2].namespace, $$[$0], this._$);
                    break;
                case 29:
                    this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace, new yy.ast.BooleanLiteral(true, this._$), this._$);
                    break;
                case 30:
                    this.$ = { namespace: null, name: $$[$0] };
                    break;
                case 31:
                    this.$ = { namespace: $$[$0 - 2], name: $$[$0] };
                    break;
                case 32:case 45:
                    this.$ = $$[$0];
                    break;
                case 33:
                    this.$ = new yy.ast.Interpolation($$[$0 - 1], [], this._$);
                    break;
                case 34:
                    this.$ = new yy.ast.Interpolation($$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 35:
                    this.$ = [$$[$0]];
                    break;
                case 37:
                    this.$ = new yy.ast.Filter($$[$0], [], this._$);
                    break;
                case 38:
                    this.$ = new yy.ast.Filter($$[$0 - 1], $$[$0], this._$);
                    break;
                case 39:case 60:
                    this.$ = [$$[$0]];
                    break;
                case 46:
                    this.$ = new yy.ast.ForStatement($$[$0 - 7], null, null, $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 47:
                    this.$ = new yy.ast.ForStatement($$[$0 - 9], $$[$0 - 7], null, $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 48:
                    this.$ = new yy.ast.ForStatement($$[$0 - 11], $$[$0 - 9], $$[$0 - 7], $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 49:
                    this.$ = new yy.ast.ForStatement($$[$0 - 11], null, null, $$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 50:
                    this.$ = new yy.ast.ForStatement($$[$0 - 13], $$[$0 - 11], null, $$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 51:
                    this.$ = new yy.ast.ForStatement($$[$0 - 15], $$[$0 - 13], null, $$[$0 - 11], $$[$0 - 9], $$[$0 - 3], this._$);
                    break;
                case 52:
                    this.$ = new yy.ast.IfStatement($$[$0 - 5], $$[$0 - 3], null, this._$);
                    break;
                case 53:
                    this.$ = new yy.ast.IfStatement($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 54:
                    this.$ = new yy.ast.ElseClause($$[$0 - 3], this._$);
                    break;
                case 55:
                    this.$ = new yy.ast.ElseIfClause($$[$0 - 5], $$[$0 - 3], null, this._$);
                    break;
                case 56:
                    this.$ = new yy.ast.ElseIfClause($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 57:
                    this.$ = new yy.ast.ElseIfStatement($$[$0 - 2], $$[$0], this._$);
                    break;
                case 59:
                    this.$ = new yy.ast.SwitchStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 62:
                    this.$ = new yy.ast.CaseStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 63:
                    this.$ = new yy.ast.CaseStatement(null, $$[$0 - 3], this._$);
                    break;
                case 64:case 66:
                    this.$ = new yy.ast.IncludeStatement($$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 65:case 67:
                    this.$ = new yy.ast.IncludeStatement($$[$0 - 1], null, this._$);
                    break;
                case 68:
                    this.$ = new yy.ast.IncludeStatement($$[$0 - 4], $$[$0 - 3], this._$);
                    break;
                case 69:
                    this.$ = new yy.ast.IncludeStatement($$[$0 - 3], null, this._$);
                    break;
                case 70:
                    this.$ = new yy.ast.Characters($$[$0], this._$);
                    break;
                case 71:
                    this.$ = [];
                    break;
                case 72:
                    this.$ = $$[$0 - 1];
                    break;
                case 73:
                    this.$ = [$$[$0]];
                    break;
                case 74:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 75:
                    this.$ = $$[$0 - 1];
                    break;
                case 76:
                    this.$ = new yy.ast.TernaryExpression($$[$0 - 4], $$[$0 - 2], $$[$0], this._$);
                    break;
                case 77:
                    this.$ = new yy.ast.BinaryExpression($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 78:
                    this.$ = new yy.ast.UnaryExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 79:
                    this.$ = $$[$0];
                    break;
                case 80:
                    this.$ = yy.help.convertOperator($$[$0]);
                    break;
                case 81:case 82:
                    this.$ = new yy.ast.CallExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 83:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 84:
                    this.$ = new yy.ast.BindExpression($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 85:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 86:
                    this.$ = new yy.ast.BindExpression($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 87:
                    this.$ = new yy.ast.NewExpression($$[$0], [], this._$);
                    break;
                case 88:
                    this.$ = new yy.ast.NewExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 89:
                    this.$ = new yy.ast.FunctionExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 90:
                    this.$ = [$$[$0]];
                    break;
                case 91:
                    this.$ = [$$[$0 - 2], $$[$0]];
                    break;
                case 92:case 93:case 94:case 95:case 96:case 97:case 98:
                    this.$ = new yy.ast.MemberExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 104:
                    this.$ = new yy.ast.ObjectLiteral([], this._$);
                    break;
                case 105:
                    this.$ = new yy.ast.ObjectLiteral($$[$0 - 1], this._$);
                    break;
                case 107:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 108:
                    this.$ = { key: $$[$0 - 2], value: $$[$0] };
                    break;
                case 109:
                    this.$ = new yy.ast.ArrayLiteral([], this._$);
                    break;
                case 110:
                    this.$ = new yy.ast.ArrayLiteral($$[$0 - 1], this._$);
                    break;
                case 111:
                    this.$ = new yy.ast.StringLiteral($$[$0], this._$);
                    break;
                case 112:
                    this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$);
                    break;
                case 113:
                    this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
                    break;
                case 114:
                    this.$ = new yy.ast.Identifier($$[$0], this._$);
                    break;
                case 115:
                    this.$ = new yy.ast.Identifier('this.attributes', this._$);
                    break;
            }
        },
        table: [o($V0, [2, 116], { 3: 1, 4: 2, 8: 3, 9: 4, 10: $V1 }), { 1: [3] }, o($V2, [2, 118], { 5: 6, 27: 7, 28: 8, 29: 9, 30: 10, 36: 11, 40: 12, 31: $V3 }), o($V0, [2, 117], { 9: 14, 10: $V1 }), o($V4, [2, 2]), { 11: 15, 14: 16, 15: 17, 16: 18, 17: 19, 18: $V5, 20: [1, 21], 21: [1, 22] }, { 6: 23, 7: [2, 120], 34: 24, 42: $V6 }, o($V2, [2, 119], { 29: 9, 30: 10, 36: 11, 40: 12, 28: 26, 31: $V3 }), o($V0, [2, 15]), o($V0, [2, 17]), o($V0, [2, 126]), o($V0, [2, 127]), o($V0, [2, 128]), { 32: [1, 27], 37: [1, 28], 41: [1, 29] }, o($V4, [2, 3]), { 12: [1, 30] }, { 12: [2, 5] }, { 12: [2, 6] }, { 12: [2, 7] }, { 12: [2, 8] }, o($V7, [2, 9], { 19: [1, 31] }), { 19: [1, 32] }, { 14: 35, 15: 36, 18: $V5, 22: 33, 24: 34 }, { 7: [1, 37] }, { 7: [2, 121] }, { 18: $V8, 43: 38 }, o($V0, [2, 16]), { 18: [1, 40] }, { 18: [1, 41] }, { 18: [1, 42] }, { 13: 43, 119: $V9 }, { 18: [1, 45] }, { 18: [1, 46] }, { 23: [1, 47], 25: [1, 48] }, o($Va, [2, 13]), o($Va, [2, 122]), o($Va, [2, 123]), { 1: [2, 1] }, o($Vb, [2, 27], { 44: 49, 49: $Vc }), o($Vd, [2, 24]), { 33: [1, 51] }, { 33: [1, 52], 39: 53, 91: $Ve }, { 12: [1, 55] }, o($V4, [2, 4]), o([7, 10, 18, 23, 25, 31, 33, 42, 45, 48, 49, 52, 54, 59, 62, 93, 96, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], [2, 111]), o($V7, [2, 10]), { 12: [2, 11] }, { 12: [2, 12] }, { 14: 57, 15: 58, 18: $V5, 26: 56 }, { 18: [1, 63], 45: [1, 59], 48: [1, 60], 50: 61, 51: 62 }, { 18: [1, 64] }, { 34: 65, 42: $V6 }, { 34: 66, 42: $V6 }, { 33: [1, 67] }, { 13: 81, 18: $Vf, 21: $Vg, 58: 70, 70: 84, 90: 76, 91: $Vh, 92: 75, 93: [1, 68], 95: 69, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, { 13: 93, 119: $V9 }, o($Va, [2, 14]), o($Va, [2, 124]), o($Va, [2, 125]), { 31: $Vp, 34: 97, 42: $V6, 46: 94, 47: [2, 129], 56: 99, 57: $Vq, 63: 95, 64: 96, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, o($Vs, [2, 23]), o($Vb, [2, 26]), o($Vb, [2, 29], { 52: [1, 109] }), o($Vt, [2, 30], { 54: [1, 110] }), o($Vd, [2, 25]), { 31: [1, 111] }, { 31: [1, 112] }, { 34: 113, 42: $V6 }, o($Vu, [2, 71]), { 25: $Vv, 93: [1, 114] }, o($Vw, [2, 73], { 96: $Vx }), { 13: 81, 18: $Vf, 21: $Vg, 58: 117, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, { 13: 81, 18: $Vf, 21: $Vg, 58: 118, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, o($Vy, [2, 79]), o($Vy, [2, 141]), o($Vy, [2, 142], { 49: $Vz }), o($Vy, [2, 143], { 39: 120, 49: $VA, 91: $Ve, 102: $VB }), o($Vy, [2, 144]), o($Vy, [2, 145], { 49: $VC }), o($Vy, [2, 146], { 49: $VD }), o($Vy, [2, 147], { 49: $VE }), o($Vy, [2, 148], { 49: $VF }), o($Vy, [2, 149]), { 112: 127, 120: $Vm }, o($Vy, [2, 151], { 39: 128, 49: $VG, 91: $Ve, 102: $VH }), { 18: $Vf, 70: 131, 122: $Vo }, { 18: $Vf, 70: 133, 107: 132, 122: $Vo }, { 18: $VI, 23: [1, 134], 114: 135, 115: 136, 116: 137, 119: $VJ }, { 13: 81, 18: $Vf, 21: $Vg, 58: 70, 70: 84, 90: 76, 91: $Vh, 92: 75, 95: 141, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 118: [1, 140], 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, o([18, 23, 25, 33, 42, 45, 48, 52, 54, 59, 62, 93, 96, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], [2, 112]), o([33, 120], [2, 113]), o($VK, $VL), o($VK, [2, 115]), { 33: [1, 142] }, { 47: [1, 143] }, { 31: $Vp, 34: 97, 42: $V6, 47: [2, 130], 56: 99, 57: $Vq, 64: 144, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, o($VM, [2, 39]), o($VM, [2, 41]), o($VM, [2, 42]), o($VM, [2, 43]), o($VM, [2, 44]), o($VM, [2, 45]), { 13: 81, 18: $Vf, 21: $Vg, 58: 145, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, o($VM, [2, 70]), o($VM, [2, 134]), o($VM, [2, 135]), o($VM, [2, 136]), o($VM, [2, 137]), { 69: $VN, 75: $VO, 80: $VP, 89: $VQ }, { 13: 153, 53: 150, 55: 151, 56: 152, 57: $Vq, 112: 154, 119: $V9, 120: $Vm }, { 18: [1, 155] }, { 35: [1, 156] }, { 38: [1, 157] }, { 31: [1, 158] }, o($Vu, [2, 72]), { 13: 81, 18: $Vf, 21: $Vg, 58: 159, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, { 13: 81, 18: $Vf, 21: $Vg, 58: 160, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, { 42: [1, 166], 45: [1, 164], 52: [1, 173], 93: [1, 161], 96: $Vx, 97: 162, 100: 163, 123: [1, 165], 124: [1, 167], 125: [1, 168], 126: [1, 169], 127: [1, 170], 128: [1, 171], 129: [1, 172], 130: [1, 174], 131: [1, 175], 132: [1, 176] }, o($Vy, [2, 78]), { 18: $Vf, 70: 177, 122: $Vo }, o($Vu, $VR), { 18: $Vf, 70: 178, 122: $Vo }, { 18: [1, 180], 70: 179, 122: $Vo }, { 18: $Vf, 70: 181, 122: $Vo }, { 18: $Vf, 70: 182, 122: $Vo }, { 18: $Vf, 70: 183, 122: $Vo }, { 18: $Vf, 70: 184, 122: $Vo }, o($Vy, [2, 150]), o($Vu, $VS), { 18: $Vf, 70: 185, 122: $Vo }, { 18: $Vf, 70: 186, 122: $Vo }, o($Vy, [2, 87], { 39: 187, 91: $Ve }), { 25: [1, 189], 108: [1, 188] }, o($VT, [2, 90]), o($Vu, [2, 104]), { 23: [1, 190], 25: [1, 191] }, o($Va, [2, 106]), { 54: [1, 192] }, { 54: [2, 165] }, { 54: [2, 166] }, o($Vu, [2, 109]), { 25: $Vv, 118: [1, 193] }, o($V0, [2, 21]), { 18: $V8, 43: 194 }, o($VM, [2, 40]), { 59: [1, 195], 60: 196, 61: 197, 62: $VU, 96: $Vx }, { 18: $Vf, 70: 199, 122: $Vo }, { 13: 81, 18: $Vf, 21: $Vg, 58: 200, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, { 13: 81, 18: $Vf, 21: $Vg, 58: 201, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, { 13: 207, 18: $Vf, 21: $Vg, 70: 202, 90: 203, 91: [1, 204], 92: 208, 101: 209, 109: 205, 110: 206, 117: $Vl, 119: $V9, 122: $Vo }, o($Vb, [2, 28]), o($Vb, [2, 32]), o($Vb, [2, 131]), o($Vb, [2, 132]), o($Vb, [2, 133]), o($Vt, [2, 31]), { 33: [1, 210] }, { 33: [1, 211] }, { 38: [1, 212] }, o($Vw, [2, 74], { 96: $Vx }), { 54: [1, 213], 96: $Vx }, o($Vy, [2, 75]), { 13: 81, 18: $Vf, 21: $Vg, 58: 214, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, o($VV, [2, 80]), o($VV, [2, 152]), o($VV, [2, 153]), o($VV, [2, 154]), o($VV, [2, 155]), o($VV, [2, 156]), o($VV, [2, 157]), o($VV, [2, 158]), o($VV, [2, 159]), o($VV, [2, 160]), o($VV, [2, 161]), o($VV, [2, 162]), o($VV, [2, 163]), o($VV, [2, 164]), o($VW, [2, 96]), o($VW, [2, 98]), o($Vu, [2, 85]), o($Vu, $VL, { 39: 215, 91: $Ve }), o($VW, [2, 97]), o($VW, [2, 94]), o($VW, [2, 93]), o($VW, [2, 95]), o($VW, [2, 92]), o($Vu, [2, 83], { 39: 216, 91: $Ve }), o($Vy, [2, 88]), { 13: 81, 18: $Vf, 21: $Vg, 58: 217, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, { 18: $Vf, 70: 218, 122: $Vo }, o($Vu, [2, 105]), { 18: $VI, 115: 219, 116: 137, 119: $VJ }, { 13: 81, 18: $Vf, 21: $Vg, 58: 220, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, o($Vu, [2, 110]), { 45: [1, 221], 49: $Vc }, o($VX, [2, 33]), { 59: [1, 222], 61: 223, 62: $VU }, o($VY, [2, 35]), { 18: $V8, 43: 224 }, { 25: [1, 226], 71: [1, 225] }, { 33: [1, 227], 96: $Vx }, { 33: [1, 228], 96: $Vx }, { 33: [1, 230], 39: 229, 49: $VG, 91: $Ve, 102: $VH }, { 33: [1, 232], 39: 231, 49: $VA, 91: $Ve, 102: $VB }, { 13: 207, 18: $Vf, 21: $Vg, 70: 234, 90: 235, 92: 233, 101: 209, 109: 205, 110: 206, 117: $Vl, 119: $V9, 122: $Vo }, { 49: $VE }, { 49: $VD }, { 49: $VF }, { 49: $Vz }, { 49: $VC }, o($V0, [2, 18]), o($V0, [2, 19]), { 33: [1, 236] }, { 13: 81, 18: $Vf, 21: $Vg, 58: 237, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, { 93: [1, 238], 96: $Vx }, o($Vu, [2, 86]), o($Vu, [2, 84]), o($VZ, [2, 89], { 96: $Vx }), o($VT, [2, 91]), o($Va, [2, 107]), o($Va, [2, 108], { 96: $Vx }), o($Vs, [2, 22]), o($VX, [2, 34]), o($VY, [2, 36]), o($VY, [2, 37], { 39: 239, 49: $Vc, 91: $Ve }), { 13: 81, 18: $Vf, 21: $Vg, 58: 240, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, { 18: $Vf, 70: 241, 122: $Vo }, { 31: $Vp, 34: 97, 42: $V6, 56: 99, 57: $Vq, 63: 242, 64: 96, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 31: [1, 245], 81: 243, 83: 244 }, { 33: [1, 246], 49: $VS }, o($VM, [2, 65]), { 33: [1, 247], 49: $VR }, o($VM, [2, 67]), { 49: $Vz, 93: [1, 248] }, { 39: 128, 49: $VG, 91: $Ve, 102: $VH }, { 39: 120, 49: $VA, 91: $Ve, 102: $VB }, o($V0, [2, 20]), o($VZ, [2, 76], { 96: $Vx }), o($Vy, [2, 77]), o($VY, [2, 38]), { 33: [1, 249], 96: $Vx }, { 25: [1, 251], 71: [1, 250] }, { 31: [1, 252], 34: 97, 42: $V6, 56: 99, 57: $Vq, 64: 144, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 77: 253, 79: 106, 88: 107, 94: $Vr }, { 31: [1, 254], 83: 255 }, { 31: [2, 60] }, { 84: $V_, 87: $V$ }, o($VM, [2, 64]), o($VM, [2, 66]), { 33: [1, 259], 39: 258, 91: $Ve }, { 31: $Vp, 34: 97, 42: $V6, 56: 99, 57: $Vq, 63: 260, 64: 96, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 13: 81, 18: $Vf, 21: $Vg, 58: 261, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, { 18: $Vf, 70: 262, 122: $Vo }, { 69: $VN, 73: $V01, 75: $VO, 76: [1, 263], 80: $VP, 89: $VQ }, o($VM, [2, 53]), { 82: [1, 265], 84: $V_, 87: $V$ }, { 31: [2, 61] }, { 13: 267, 85: 266, 112: 268, 113: 269, 119: $V9, 120: $Vm, 121: $Vn }, { 84: [1, 270] }, { 33: [1, 271] }, o($VM, [2, 69]), { 31: [1, 272], 34: 97, 42: $V6, 56: 99, 57: $Vq, 64: 144, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 33: [1, 273], 96: $Vx }, { 71: [1, 274] }, { 33: [1, 275] }, { 33: [1, 276], 75: [1, 277] }, { 33: [1, 278] }, { 33: [1, 279] }, { 33: [2, 138] }, { 33: [2, 139] }, { 33: [2, 140] }, { 33: [1, 280] }, o($VM, [2, 68]), { 69: $VN, 72: [1, 281], 73: [1, 282], 75: $VO, 80: $VP, 89: $VQ }, { 31: $Vp, 34: 97, 42: $V6, 56: 99, 57: $Vq, 63: 283, 64: 96, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 13: 81, 18: $Vf, 21: $Vg, 58: 284, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, o($VM, [2, 52]), { 31: $Vp, 34: 97, 42: $V6, 56: 99, 57: $Vq, 63: 285, 64: 96, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 13: 81, 18: $Vf, 21: $Vg, 58: 286, 70: 84, 90: 76, 91: $Vh, 92: 75, 98: $Vi, 99: 73, 101: 78, 103: 74, 104: $Vj, 105: 77, 106: $Vk, 109: 80, 110: 79, 112: 82, 113: 83, 117: $Vl, 119: $V9, 120: $Vm, 121: $Vn, 122: $Vo }, o($VM, [2, 59]), { 31: $Vp, 34: 97, 42: $V6, 56: 99, 57: $Vq, 63: 287, 64: 96, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 31: $Vp, 34: 97, 42: $V6, 56: 99, 57: $Vq, 63: 288, 64: 96, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 33: [1, 289] }, { 33: [1, 290] }, { 31: [1, 291], 34: 97, 42: $V6, 56: 99, 57: $Vq, 64: 144, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 33: [1, 292], 96: $Vx }, { 31: [1, 293], 34: 97, 42: $V6, 56: 99, 57: $Vq, 64: 144, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 33: [1, 294], 96: $Vx }, { 31: [1, 295], 34: 97, 42: $V6, 56: 99, 57: $Vq, 64: 144, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 31: [1, 296], 34: 97, 42: $V6, 56: 99, 57: $Vq, 64: 144, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, o($VM, [2, 46]), { 31: $Vp, 34: 97, 42: $V6, 56: 99, 57: $Vq, 63: 297, 64: 96, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 69: $VN, 72: [1, 298], 73: [1, 299], 75: $VO, 80: $VP, 89: $VQ }, { 31: $Vp, 34: 97, 42: $V6, 56: 99, 57: $Vq, 63: 300, 64: 96, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 69: $VN, 75: $VO, 76: [1, 301], 80: $VP, 89: $VQ }, { 31: $Vp, 34: 97, 42: $V6, 56: 99, 57: $Vq, 63: 302, 64: 96, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 69: $VN, 75: $VO, 80: $VP, 86: [1, 303], 89: $VQ }, { 69: $VN, 75: $VO, 80: $VP, 86: [1, 304], 89: $VQ }, { 31: [1, 305], 34: 97, 42: $V6, 56: 99, 57: $Vq, 64: 144, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 33: [1, 306] }, { 33: [1, 307] }, { 31: [1, 308], 34: 97, 42: $V6, 56: 99, 57: $Vq, 64: 144, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 33: [1, 309] }, { 31: [1, 310], 34: 97, 42: $V6, 56: 99, 57: $Vq, 64: 144, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 77: 311, 79: 106, 88: 107, 94: $Vr }, { 33: [1, 312] }, { 33: [1, 313] }, { 69: $VN, 72: [1, 314], 75: $VO, 80: $VP, 89: $VQ }, o($VM, [2, 47]), { 31: $Vp, 34: 97, 42: $V6, 56: 99, 57: $Vq, 63: 315, 64: 96, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 69: $VN, 72: [1, 316], 73: [1, 317], 75: $VO, 80: $VP, 89: $VQ }, o($VM, [2, 54]), { 69: $VN, 73: $V01, 75: $VO, 76: [1, 318], 80: $VP, 89: $VQ }, o($VM, [2, 56]), { 31: [2, 62] }, { 31: [2, 63] }, { 33: [1, 319] }, { 31: [1, 320], 34: 97, 42: $V6, 56: 99, 57: $Vq, 64: 144, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, { 33: [1, 321] }, { 33: [1, 322] }, { 33: [1, 323] }, o($VM, [2, 49]), { 69: $VN, 72: [1, 324], 75: $VO, 80: $VP, 89: $VQ }, o($VM, [2, 48]), { 31: $Vp, 34: 97, 42: $V6, 56: 99, 57: $Vq, 63: 325, 64: 96, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, o($VM, [2, 55]), { 33: [1, 326] }, { 31: [1, 327], 34: 97, 42: $V6, 56: 99, 57: $Vq, 64: 144, 65: 98, 66: 100, 67: 101, 68: 104, 74: 105, 79: 106, 88: 107, 94: $Vr }, o($VM, [2, 50]), { 69: $VN, 72: [1, 328], 75: $VO, 80: $VP, 89: $VQ }, { 33: [1, 329] }, o($VM, [2, 51])],
        defaultActions: { 16: [2, 5], 17: [2, 6], 18: [2, 7], 19: [2, 8], 24: [2, 121], 37: [2, 1], 46: [2, 11], 47: [2, 12], 138: [2, 165], 139: [2, 166], 244: [2, 60], 255: [2, 61], 267: [2, 138], 268: [2, 139], 269: [2, 140], 312: [2, 62], 313: [2, 63] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "flex": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return;
                        break;
                    case 1:
                        return 10;
                        break;
                    case 2:
                        return 12;
                        break;
                    case 3:
                        return 19;
                        break;
                    case 4:
                        return 47;
                        break;
                    case 5:
                        this.begin('CONTROL');return 31;
                        break;
                    case 6:
                        this.begin('COMMENT');return;
                        break;
                    case 7:
                        this.begin('CHILDREN');return 45;
                        break;
                    case 8:
                        this.begin('CHILDREN');return 48;
                        break;
                    case 9:
                        this.begin('EXPRESSION');return 57;
                        break;
                    case 10:
                        return 37;
                        break;
                    case 11:
                        return 38;
                        break;
                    case 12:
                        return 69;
                        break;
                    case 13:
                        return 72;
                        break;
                    case 14:
                        return 75;
                        break;
                    case 15:
                        return 76;
                        break;
                    case 16:
                        return 73;
                        break;
                    case 17:
                        return 'ELSEIF';
                        break;
                    case 18:
                        return 71;
                        break;
                    case 19:
                        return 80;
                        break;
                    case 20:
                        return 82;
                        break;
                    case 21:
                        return 87;
                        break;
                    case 22:
                        return 84;
                        break;
                    case 23:
                        return 86;
                        break;
                    case 24:
                        return 89;
                        break;
                    case 25:
                        return 41;
                        break;
                    case 26:
                        return 12;
                        break;
                    case 27:
                        return 'ENDEXPORT';
                        break;
                    case 28:
                        return 32;
                        break;
                    case 29:
                        return 35;
                        break;
                    case 30:
                        this.popState();return 33;
                        break;
                    case 31:
                        return 104;
                        break;
                    case 32:
                        return 62;
                        break;
                    case 33:
                        return 108;
                        break;
                    case 34:
                        return 102;
                        break;
                    case 35:
                        return '->';
                        break;
                    case 36:
                        return '..';
                        break;
                    case 37:
                        this.popState();return 59;
                        break;
                    case 38:
                        this.begin('EXPRESSION');return 57;
                        break;
                    case 39:
                        this.begin('CONTROL');return 31;
                        break;
                    case 40:
                        this.begin('COMMENT');return;
                        break;
                    case 41:
                        this.popState();return 47;
                        break;
                    case 42:
                        this.popState();return 42;
                        break;
                    case 43:
                        this.popState();return 94;
                        break;
                    case 44:
                        this.popState();return;
                        break;
                    case 45:
                        return 121;
                        break;
                    case 46:
                        return 120;
                        break;
                    case 47:
                        return 119;
                        break;
                    case 48:
                        return 45;
                        break;
                    case 49:
                        return 42;
                        break;
                    case 50:
                        return 91;
                        break;
                    case 51:
                        return 93;
                        break;
                    case 52:
                        return 117;
                        break;
                    case 53:
                        return 118;
                        break;
                    case 54:
                        return ';';
                        break;
                    case 55:
                        return 54;
                        break;
                    case 56:
                        return 52;
                        break;
                    case 57:
                        return 125;
                        break;
                    case 58:
                        return 126;
                        break;
                    case 59:
                        return 123;
                        break;
                    case 60:
                        return 124;
                        break;
                    case 61:
                        return 127;
                        break;
                    case 62:
                        return 129;
                        break;
                    case 63:
                        return 20;
                        break;
                    case 64:
                        return 128;
                        break;
                    case 65:
                        return 106;
                        break;
                    case 66:
                        return 130;
                        break;
                    case 67:
                        return 131;
                        break;
                    case 68:
                        return 132;
                        break;
                    case 69:
                        return 98;
                        break;
                    case 70:
                        return 25;
                        break;
                    case 71:
                        return 96;
                        break;
                    case 72:
                        return 49;
                        break;
                    case 73:
                        return 21;
                        break;
                    case 74:
                        return 23;
                        break;
                    case 75:
                        return 122;
                        break;
                    case 76:
                        return 18;
                        break;
                    case 77:
                        return 7;
                        break;
                    case 78:
                        console.log(yy_.yytext);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:import)/, /^(?:from)/, /^(?:as)/, /^(?:<\/)/, /^(?:\{%)/, /^(?:<!--)/, /^(?:>)/, /^(?:\/>)/, /^(?:\{\{)/, /^(?:macro)/, /^(?:endmacro)/, /^(?:for)/, /^(?:endfor)/, /^(?:if)/, /^(?:endif)/, /^(?:else)/, /^(?:elseif)/, /^(?:in)/, /^(?:switch)/, /^(?:endswitch)/, /^(?:default)/, /^(?:case)/, /^(?:endcase)/, /^(?:include)/, /^(?:export)/, /^(?:from)/, /^(?:endexport)/, /^(?:view)/, /^(?:endview)/, /^(?:%\})/, /^(?:new)/, /^(?:\|)/, /^(?:=>)/, /^(?:::)/, /^(?:->)/, /^(?:\.\.)/, /^(?:\}\})/, /^(?:\{\{)/, /^(?:\{%)/, /^(?:<!--)/, /^(?:<\/)/, /^(?:<)/, /^(?:[^\/<>{%}]+)/, /^(?:(.|\r|\n)*?-->)/, /^(?:true|false)/, /^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/, /^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/, /^(?:>)/, /^(?:<)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:;)/, /^(?::)/, /^(?:=)/, /^(?:==)/, /^(?:!=)/, /^(?:>=)/, /^(?:<=)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:\\)/, /^(?:&&)/, /^(?:\|\|)/, /^(?:\^)/, /^(?:!)/, /^(?:,)/, /^(?:\?)/, /^(?:\.)/, /^(?:\{)/, /^(?:\})/, /^(?:@)/, /^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/, /^(?:$)/, /^(?:.)/],
            conditions: { "EXPRESSION": { "rules": [0, 31, 32, 33, 34, 35, 36, 37, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "inclusive": false }, "CONTROL": { "rules": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "inclusive": false }, "COMMENT": { "rules": [0, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "inclusive": false }, "CHILDREN": { "rules": [0, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "inclusive": false }, "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = ParserImpl;
    exports.Parser = ParserImpl.Parser;
    exports.parse = function () {
        return ParserImpl.parse.apply(ParserImpl, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,