"use strict";

/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [29, 31],
        $V1 = [1, 5],
        $V2 = [10, 29, 31],
        $V3 = [1, 18],
        $V4 = [1, 20],
        $V5 = [1, 38],
        $V6 = [1, 39],
        $V7 = [1, 40],
        $V8 = [1, 41],
        $V9 = [1, 42],
        $Va = [1, 37],
        $Vb = [12, 24, 26],
        $Vc = [1, 55],
        $Vd = [26, 31, 47, 111],
        $Ve = [24, 26, 31, 34, 41, 47, 48, 53, 57, 67, 92, 111, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133],
        $Vf = [2, 75],
        $Vg = [1, 56],
        $Vh = [1, 57],
        $Vi = [1, 58],
        $Vj = [2, 95],
        $Vk = [1, 59],
        $Vl = [1, 70],
        $Vm = [24, 26],
        $Vn = [34, 37, 43, 122],
        $Vo = [34, 37, 43, 45, 53, 57, 122],
        $Vp = [24, 26, 31, 34, 41, 47, 48, 53, 57, 67, 92, 110, 111, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133],
        $Vq = [24, 26, 31, 34, 37, 41, 43, 45, 47, 48, 53, 57, 67, 92, 110, 111, 115, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133],
        $Vr = [1, 115],
        $Vs = [1, 116],
        $Vt = [1, 125],
        $Vu = [1, 131],
        $Vv = [1, 126],
        $Vw = [7, 31, 36, 51, 64, 86],
        $Vx = [34, 37, 41, 43, 122],
        $Vy = [1, 139],
        $Vz = [24, 26, 48, 53, 57, 67, 92],
        $VA = [1, 144],
        $VB = [1, 142],
        $VC = [1, 151],
        $VD = [1, 143],
        $VE = [1, 145],
        $VF = [1, 146],
        $VG = [1, 147],
        $VH = [1, 148],
        $VI = [1, 149],
        $VJ = [1, 150],
        $VK = [1, 152],
        $VL = [1, 153],
        $VM = [1, 154],
        $VN = [31, 36, 51, 64, 86],
        $VO = [1, 167],
        $VP = [1, 168],
        $VQ = [1, 169],
        $VR = [1, 170],
        $VS = [1, 171],
        $VT = [22, 45, 110, 112, 113, 114, 116, 122],
        $VU = [1, 191],
        $VV = [24, 26, 47, 48, 53, 57, 67, 92],
        $VW = [31, 34, 36, 37, 43, 51, 64, 86, 122],
        $VX = [53, 57],
        $VY = [26, 120],
        $VZ = [67, 110],
        $V_ = [1, 242],
        $V$ = [1, 246];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "template": 3, "template_option0": 4, "template_option1": 5, "tag": 6, "EOF": 7, "imports": 8, "import_statement": 9, "IMPORT": 10, "import_member": 11, "FROM": 12, "string_literal": 13, ";": 14, "default_member": 15, "alias_member": 16, "aggregate_member": 17, "composite_member": 18, "identifier": 19, "AS": 20, "*": 21, "{": 22, "member_list": 23, "}": 24, "member_list_group0": 25, ",": 26, "member_list_group1": 27, "usage": 28, "USES": 29, "arguments": 30, "<": 31, "tagname": 32, "attributes": 33, ">": 34, "tag_option0": 35, "</": 36, "/>": 37, "tagname_group0": 38, "attribute": 39, "attribute_name": 40, "=": 41, "attribute_value": 42, "..": 43, "member_access": 44, "(": 45, "attribute_group0": 46, ")": 47, ":": 48, "interpolation": 49, "attribute_value_group0": 50, "{{": 51, "interpolation_group0": 52, "}}": 53, "expression": 54, "filters": 55, "filter": 56, "|": 57, "children": 58, "child": 59, "control": 60, "characters": 61, "control_group0": 62, "for_statement": 63, "{%": 64, "FOR": 65, "IN": 66, "%}": 67, "for_children": 68, "ENDFOR": 69, "ELSE": 70, "if_statement": 71, "IF": 72, "ENDIF": 73, "switch_statement": 74, "SWITCH": 75, "case_statements": 76, "ENDSWITCH": 77, "case_statement": 78, "CASE": 79, "case_statement_group0": 80, "ENDCASE": 81, "include_statement": 82, "INCLUDE": 83, "include_statement_group0": 84, "include_statement_option0": 85, "CHARACTERS": 86, "value_expression": 87, "grouped_expression": 88, "ternary_expression": 89, "binary_expression": 90, "unary_expression": 91, "?": 92, "binary_operator": 93, "binary_operator_group0": 94, "!": 95, "variable_expression": 96, "literal_expression": 97, "property_expression": 98, "function_expression": 99, "method_expression": 100, "bind_expression": 101, "new_expression": 102, "object_literal": 103, "array_literal": 104, "number_literal": 105, "boolean_literal": 106, "key_value_pairs": 107, "key_value_pair": 108, "key_value_pair_group0": 109, "[": 110, "]": 111, "STRING_LITERAL": 112, "NUMBER_LITERAL": 113, "BOOLEAN": 114, "::": 115, "NEW": 116, "new_expression_group0": 117, "function_literal": 118, "parameters": 119, "=>": 120, ".": 121, "IDENTIFIER": 122, "DEFAULT": 123, ">=": 124, "<=": 125, "==": 126, "!=": 127, "+": 128, "/": 129, "-": 130, "&&": 131, "||": 132, "^": 133, "indentifier": 134, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 7: "EOF", 10: "IMPORT", 12: "FROM", 14: ";", 20: "AS", 21: "*", 22: "{", 24: "}", 26: ",", 29: "USES", 31: "<", 34: ">", 36: "</", 37: "/>", 41: "=", 43: "..", 45: "(", 47: ")", 48: ":", 51: "{{", 53: "}}", 57: "|", 64: "{%", 65: "FOR", 66: "IN", 67: "%}", 69: "ENDFOR", 70: "ELSE", 72: "IF", 73: "ENDIF", 75: "SWITCH", 77: "ENDSWITCH", 79: "CASE", 81: "ENDCASE", 83: "INCLUDE", 86: "CHARACTERS", 92: "?", 95: "!", 110: "[", 111: "]", 112: "STRING_LITERAL", 113: "NUMBER_LITERAL", 114: "BOOLEAN", 115: "::", 116: "NEW", 120: "=>", 121: ".", 122: "IDENTIFIER", 123: "DEFAULT", 124: ">=", 125: "<=", 126: "==", 127: "!=", 128: "+", 129: "/", 130: "-", 131: "&&", 132: "||", 133: "^", 134: "indentifier" },
        productions_: [0, [3, 4], [8, 1], [8, 2], [9, 5], [11, 1], [11, 1], [11, 1], [11, 1], [15, 1], [16, 3], [17, 3], [18, 3], [23, 1], [23, 3], [28, 2], [6, 8], [6, 4], [32, 1], [33, 2], [33, 0], [39, 3], [39, 1], [39, 2], [39, 5], [40, 1], [40, 3], [42, 1], [42, 1], [49, 3], [49, 4], [55, 1], [55, 2], [56, 2], [56, 5], [58, 1], [58, 2], [59, 1], [59, 1], [59, 1], [59, 1], [60, 1], [63, 7], [63, 9], [63, 11], [68, 4], [68, 7], [71, 8], [71, 12], [74, 8], [76, 1], [76, 2], [78, 8], [82, 5], [61, 1], [30, 1], [30, 3], [54, 1], [54, 1], [54, 1], [54, 1], [54, 1], [88, 3], [89, 5], [90, 3], [90, 3], [93, 1], [91, 2], [87, 1], [87, 1], [87, 1], [87, 1], [87, 1], [87, 1], [87, 1], [96, 1], [97, 1], [97, 1], [97, 1], [97, 1], [97, 1], [103, 2], [103, 3], [107, 1], [107, 3], [108, 3], [104, 2], [104, 3], [13, 1], [105, 1], [106, 1], [99, 4], [99, 3], [100, 4], [100, 3], [98, 1], [101, 3], [101, 6], [101, 3], [101, 6], [102, 5], [118, 3], [118, 3], [119, 2], [119, 3], [119, 5], [44, 3], [44, 3], [19, 1], [4, 0], [4, 1], [5, 0], [5, 1], [25, 1], [25, 1], [27, 1], [27, 1], [35, 0], [35, 1], [38, 1], [38, 1], [46, 1], [46, 1], [50, 1], [50, 1], [52, 1], [52, 1], [62, 1], [62, 1], [62, 1], [62, 1], [80, 1], [80, 1], [80, 1], [80, 1], [84, 1], [84, 1], [84, 1], [84, 1], [85, 0], [85, 1], [94, 1], [94, 1], [94, 1], [94, 1], [94, 1], [94, 1], [94, 1], [94, 1], [94, 1], [94, 1], [94, 1], [94, 1], [94, 1], [109, 1], [109, 1], [117, 1], [117, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    this.$ = new yy.ast.Template($$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0 - 1], this._$);return this.$;

                    break;
                case 2:
                    this.$ = [$$[$0]];
                    break;
                case 3:case 32:case 36:case 51:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 4:
                    this.$ = new yy.ast.ImportStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 9:
                    this.$ = new yy.ast.DefaultMember($$[$0], this._$);
                    break;
                case 10:
                    this.$ = new yy.ast.AliasMember($$[$0 - 2], $$[$0], this._$);
                    break;
                case 11:
                    this.$ = new yy.ast.AggregateMember($$[$0], this._$);
                    break;
                case 12:
                    this.$ = new yy.ast.CompositeMember($$[$0 - 1], this._$);
                    break;
                case 13:
                    this.$ = [$$[$0]];
                    break;
                case 14:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 15:
                    this.$ = $$[$0];
                    break;
                case 16:

                    yy.help.ensureTagsMatch($$[$0 - 6], $$[$0]);
                    this.$ = new yy.ast.Tag($$[$0 - 6], $$[$0 - 5], $$[$0 - 3] ? $$[$0 - 3] : [], this._$);

                    break;
                case 17:
                    this.$ = new yy.ast.Tag($$[$0 - 2], $$[$0 - 1], [], this._$);
                    break;
                case 18:case 27:case 28:case 41:case 108:
                    this.$ = $$[$0];
                    break;
                case 19:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 20:
                    this.$ = [];
                    break;
                case 21:
                    this.$ = new yy.ast.Attribute($$[$0 - 2].name, $$[$0 - 2].namespace, $$[$0], this._$);
                    break;
                case 22:
                    this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace, new yy.ast.BooleanLiteral(true, this._$), this._$);
                    break;
                case 23:
                    this.$ = new yy.ast.AttributeSpread($$[$0], '', this._$);
                    break;
                case 24:
                    this.$ = new yy.ast.AttributeSpread($$[$0], $$[$0 - 2], this._$);
                    break;
                case 25:
                    this.$ = { namespace: null, name: $$[$0] };
                    break;
                case 26:
                    this.$ = { namespace: $$[$0 - 2], name: $$[$0] };
                    break;
                case 29:
                    this.$ = new yy.ast.Interpolation($$[$0 - 1], [], this._$);
                    break;
                case 30:
                    this.$ = new yy.ast.Interpolation($$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 31:
                    this.$ = [$$[$0]];
                    break;
                case 33:
                    this.$ = new yy.ast.Filter($$[$0], [], this._$);
                    break;
                case 34:
                    this.$ = new yy.ast.Filter($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 35:case 50:case 55:
                    this.$ = [$$[$0]];
                    break;
                case 42:
                    this.$ = new yy.ast.ForStatement($$[$0 - 4], 'index', 'array', $$[$0 - 2], $$[$0], this._$);
                    break;
                case 43:
                    this.$ = new yy.ast.ForStatement($$[$0 - 6], $$[$0 - 4], 'array', $$[$0 - 2], $$[$0], this._$);
                    break;
                case 44:
                    this.$ = new yy.ast.ForStatement($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 2], $$[$0], this._$);
                    break;
                case 45:case 46:
                    this.$ = $$[$0 - 3];
                    break;
                case 47:
                    this.$ = new yy.ast.IfStatement($$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 48:
                    this.$ = new yy.ast.IfStatement($$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 49:
                    this.$ = new yy.ast.SwitchStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 52:
                    this.$ = new yy.ast.CaseStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 53:
                    this.$ = new yy.ast.IncludeStatement($$[$0 - 2], $$[$0 - 1] ? $$[$0 - 1] : null, this._$);
                    break;
                case 54:
                    this.$ = new yy.ast.Characters($$[$0], this._$);
                    break;
                case 56:case 84:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 62:
                    this.$ = $$[$0 - 1];
                    break;
                case 63:
                    this.$ = new yy.ast.TernaryExpression($$[$0 - 4], $$[$0 - 2], $$[$0], this._$);
                    break;
                case 64:case 65:
                    this.$ = new yy.ast.BinaryExpression($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 66:
                    this.$ = yy.help.convertOperator($$[$0]);
                    break;
                case 67:
                    this.$ = new yy.ast.UnaryExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 75:
                    this.$ = new yy.ast.VariableExpression($$[$0], this._$);
                    break;
                case 81:
                    this.$ = new yy.ast.ObjectLiteral([], this._$);
                    break;
                case 82:
                    this.$ = new yy.ast.ObjectLiteral($$[$0 - 1], this._$);
                    break;
                case 83:
                    this.$ = [$$[$0]];
                    break;
                case 85:
                    this.$ = { key: $$[$0 - 2], value: $$[$0] };
                    break;
                case 86:
                    this.$ = new yy.ast.ArrayLiteral([], this._$);
                    break;
                case 87:
                    this.$ = new yy.ast.ArrayLiteral($$[$0 - 1], this._$);
                    break;
                case 88:
                    this.$ = new yy.ast.StringLiteral($$[$0], this._$);
                    break;
                case 89:
                    this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$);
                    break;
                case 90:
                    this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
                    break;
                case 91:
                    this.$ = new yy.ast.FunctionExpression($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 92:
                    this.$ = new yy.ast.FunctionExpression($$[$0 - 2], [], this._$);
                    break;
                case 93:
                    this.$ = new yy.ast.MethodExpression($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 94:
                    this.$ = new yy.ast.MethodExpression($$[$0 - 2], [], this._$);
                    break;
                case 95:
                    this.$ = new yy.ast.PropertyExpression($$[$0], this._$);
                    break;
                case 96:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 97:
                    this.$ = new yy.ast.BindExpression($$[$0 - 5], $$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 98:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 99:
                    this.$ = new yy.ast.BindExpression($$[$0 - 5], $$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 100:
                    this.$ = new yy.ast.NewExpression($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 101:
                    this.$ = new yy.ast.FunctionLiteral($$[$0 - 2], $$[$0], this._$);
                    break;
                case 102:
                    this.$ = new yy.ast.FunctionLiteral([$$[$0 - 2]], $$[$0], this._$);
                    break;
                case 103:
                    this.$ = [];
                    break;
                case 104:
                    this.$ = [$$[$0 - 1]];
                    break;
                case 105:
                    this.$ = $$[$0 - 3].concat($$[$0 - 1]);
                    break;
                case 106:case 107:
                    this.$ = $$[$0 - 2] + '.' + $$[$0];
                    break;
            }
        },
        table: [o($V0, [2, 109], { 3: 1, 4: 2, 8: 3, 9: 4, 10: $V1 }), { 1: [3] }, { 5: 6, 28: 7, 29: [1, 8], 31: [2, 111] }, o($V0, [2, 110], { 9: 9, 10: $V1 }), o($V2, [2, 2]), { 11: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 21: [1, 16], 22: [1, 17], 122: $V3 }, { 6: 19, 31: $V4 }, { 31: [2, 112] }, { 13: 33, 19: 30, 22: $V5, 30: 21, 44: 36, 87: 22, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, o($V2, [2, 3]), { 12: [1, 43] }, { 12: [2, 5] }, { 12: [2, 6] }, { 12: [2, 7] }, { 12: [2, 8] }, o($Vb, [2, 9], { 20: [1, 44] }), { 20: [1, 45] }, { 15: 48, 16: 49, 19: 15, 23: 46, 25: 47, 122: $V3 }, o([12, 20, 24, 26, 31, 34, 37, 41, 43, 45, 47, 48, 53, 57, 66, 67, 92, 110, 111, 115, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], [2, 108]), { 7: [1, 50] }, { 19: 53, 32: 51, 38: 52, 44: 54, 122: $V3 }, { 26: $Vc, 31: [2, 15] }, o($Vd, [2, 55]), o($Ve, [2, 68]), o($Ve, [2, 69]), o($Ve, [2, 70]), o($Ve, [2, 71]), o($Ve, [2, 72]), o($Ve, [2, 73]), o($Ve, [2, 74]), o($Ve, $Vf, { 45: $Vg, 115: $Vh, 121: $Vi }), o($Ve, [2, 76]), o($Ve, [2, 77]), o($Ve, [2, 78]), o($Ve, [2, 79]), o($Ve, [2, 80]), o($Ve, $Vj, { 45: $Vk, 115: [1, 60] }), { 19: 64, 44: 63, 117: 61, 122: $V3, 134: [1, 62] }, { 19: 69, 24: [1, 65], 107: 66, 108: 67, 109: 68, 112: $Vl, 122: $V3 }, { 13: 33, 19: 30, 22: $V5, 30: 72, 44: 36, 87: 22, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 111: [1, 71], 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, o([14, 24, 26, 31, 34, 37, 41, 43, 47, 48, 53, 57, 67, 92, 111, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], [2, 88]), o([24, 26, 31, 34, 37, 41, 43, 47, 48, 53, 57, 67, 92, 111, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], [2, 89]), o($Ve, [2, 90]), { 13: 73, 112: $V7 }, { 19: 74, 122: $V3 }, { 19: 75, 122: $V3 }, { 24: [1, 76], 26: [1, 77] }, o($Vm, [2, 13]), o($Vm, [2, 113]), o($Vm, [2, 114]), { 1: [2, 1] }, o($Vn, [2, 20], { 33: 78 }), o($Vo, [2, 18]), o($Vo, [2, 119], { 121: $Vi }), o($Vo, [2, 120]), { 13: 33, 19: 30, 22: $V5, 44: 36, 87: 79, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 13: 33, 19: 30, 22: $V5, 30: 80, 44: 36, 47: [1, 81], 87: 22, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 19: 82, 122: $V3 }, { 19: 83, 44: 84, 122: $V3 }, { 13: 33, 19: 30, 22: $V5, 30: 85, 44: 36, 47: [1, 86], 87: 22, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 19: 87, 122: $V3 }, { 45: [1, 88] }, { 45: [2, 156] }, { 45: [2, 157] }, { 121: $Vi }, o($Ve, [2, 81]), { 24: [1, 89], 26: [1, 90] }, o($Vm, [2, 83]), { 48: [1, 91] }, { 48: [2, 154] }, { 48: [2, 155] }, o($Ve, [2, 86]), { 26: $Vc, 111: [1, 92] }, { 14: [1, 93] }, o($Vb, [2, 10]), { 12: [2, 11] }, { 12: [2, 12] }, { 15: 95, 16: 96, 19: 15, 27: 94, 122: $V3 }, { 19: 102, 34: [1, 97], 37: [1, 98], 39: 99, 40: 100, 43: [1, 101], 122: $V3 }, o($Vd, [2, 56]), { 26: $Vc, 47: [1, 103] }, o($Vp, [2, 92]), o($Ve, [2, 96], { 45: [1, 104] }), o($Vq, [2, 106], { 121: $Vi }), o($Vq, [2, 107]), { 26: $Vc, 47: [1, 105] }, o($Vp, [2, 94]), o($Ve, [2, 98], { 45: [1, 106] }), { 13: 33, 19: 30, 22: $V5, 30: 107, 44: 36, 87: 22, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, o($Ve, [2, 82]), { 19: 69, 108: 108, 109: 68, 112: $Vl, 122: $V3 }, { 13: 33, 19: 30, 22: $V5, 44: 36, 45: $Vr, 54: 109, 87: 114, 88: 110, 89: 111, 90: 112, 91: 113, 95: $Vs, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, o($Ve, [2, 87]), o($V2, [2, 4]), o($Vm, [2, 14]), o($Vm, [2, 115]), o($Vm, [2, 116]), { 6: 120, 31: $V4, 35: 117, 36: [2, 117], 49: 122, 51: $Vt, 58: 118, 59: 119, 60: 121, 61: 123, 62: 124, 63: 127, 64: $Vu, 71: 128, 74: 129, 82: 130, 86: $Vv }, o($Vw, [2, 17]), o($Vn, [2, 19]), o($Vn, [2, 22], { 41: [1, 132] }), { 19: 64, 44: 133, 45: [1, 134], 122: $V3 }, o($Vx, [2, 25], { 48: [1, 135] }), o($Vp, [2, 91]), { 13: 33, 19: 30, 22: $V5, 30: 136, 44: 36, 87: 22, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, o($Vp, [2, 93]), { 13: 33, 19: 30, 22: $V5, 30: 137, 44: 36, 87: 22, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 26: $Vc, 47: [1, 138] }, o($Vm, [2, 84]), o($Vm, [2, 85], { 92: $Vy }), o($Vz, [2, 57], { 93: 140, 94: 141, 31: $VA, 34: $VB, 41: $VC, 124: $VD, 125: $VE, 126: $VF, 127: $VG, 128: $VH, 129: $VI, 130: $VJ, 131: $VK, 132: $VL, 133: $VM }), o($Vz, [2, 58]), o($Vz, [2, 59]), o($Vz, [2, 60]), o($Vz, [2, 61], { 94: 141, 93: 155, 31: $VA, 34: $VB, 41: $VC, 124: $VD, 125: $VE, 126: $VF, 127: $VG, 128: $VH, 129: $VI, 130: $VJ, 131: $VK, 132: $VL, 133: $VM }), { 13: 33, 19: 30, 22: $V5, 44: 36, 45: $Vr, 87: 157, 88: 158, 90: 156, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 13: 33, 19: 30, 22: $V5, 44: 36, 45: $Vr, 54: 159, 87: 114, 88: 110, 89: 111, 90: 112, 91: 113, 95: $Vs, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 36: [1, 160] }, { 6: 120, 31: $V4, 36: [2, 118], 49: 122, 51: $Vt, 59: 161, 60: 121, 61: 123, 62: 124, 63: 127, 64: $Vu, 71: 128, 74: 129, 82: 130, 86: $Vv }, o($VN, [2, 35]), o($VN, [2, 37]), o($VN, [2, 38]), o($VN, [2, 39]), o($VN, [2, 40]), o($VN, [2, 41]), { 13: 33, 19: 166, 22: $V5, 44: 36, 45: $VO, 52: 162, 54: 163, 87: 114, 88: 110, 89: 111, 90: 112, 91: 113, 95: $Vs, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 118: 164, 119: 165, 122: $V3 }, o($VN, [2, 54]), o($VN, [2, 127]), o($VN, [2, 128]), o($VN, [2, 129]), o($VN, [2, 130]), { 65: $VP, 72: $VQ, 75: $VR, 83: $VS }, { 13: 175, 42: 172, 49: 173, 50: 174, 51: $Vt, 105: 176, 112: $V7, 113: $V8 }, o($Vn, [2, 23]), { 19: 179, 44: 178, 46: 177, 122: $V3 }, { 19: 180, 122: $V3 }, { 26: $Vc, 47: [1, 181] }, { 26: $Vc, 47: [1, 182] }, o($Ve, [2, 100]), { 13: 33, 19: 30, 22: $V5, 44: 36, 45: $Vr, 54: 183, 87: 114, 88: 110, 89: 111, 90: 112, 91: 113, 95: $Vs, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 45: $Vr, 88: 184 }, o($VT, [2, 66]), o($VT, [2, 141]), o($VT, [2, 142]), o($VT, [2, 143]), o($VT, [2, 144]), o($VT, [2, 145]), o($VT, [2, 146]), o($VT, [2, 147]), o($VT, [2, 148]), o($VT, [2, 149]), o($VT, [2, 150]), o($VT, [2, 151]), o($VT, [2, 152]), o($VT, [2, 153]), { 13: 33, 19: 30, 22: $V5, 44: 36, 87: 185, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 47: [1, 186] }, { 31: $VA, 34: $VB, 41: $VC, 93: 155, 94: 141, 124: $VD, 125: $VE, 126: $VF, 127: $VG, 128: $VH, 129: $VI, 130: $VJ, 131: $VK, 132: $VL, 133: $VM }, { 31: $VA, 34: $VB, 41: $VC, 93: 140, 94: 141, 124: $VD, 125: $VE, 126: $VF, 127: $VG, 128: $VH, 129: $VI, 130: $VJ, 131: $VK, 132: $VL, 133: $VM }, o($Vz, [2, 67]), { 19: 53, 32: 187, 38: 52, 44: 54, 122: $V3 }, o($VN, [2, 36]), { 53: [1, 188] }, { 53: [2, 125], 55: 189, 56: 190, 57: $VU, 92: $Vy }, { 53: [2, 126] }, { 120: [1, 192] }, o([31, 34, 41, 53, 57, 92, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], $Vf, { 45: $Vg, 115: $Vh, 120: [1, 193], 121: $Vi }), { 13: 33, 19: 195, 22: $V5, 44: 36, 45: $VO, 47: [1, 194], 87: 157, 88: 158, 90: 156, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 119: 196, 122: $V3 }, { 19: 197, 122: $V3 }, { 13: 33, 19: 30, 22: $V5, 44: 36, 45: $Vr, 54: 198, 87: 114, 88: 110, 89: 111, 90: 112, 91: 113, 95: $Vs, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 13: 33, 19: 30, 22: $V5, 44: 36, 45: $Vr, 54: 199, 87: 114, 88: 110, 89: 111, 90: 112, 91: 113, 95: $Vs, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 19: 205, 44: 206, 84: 200, 96: 201, 98: 202, 99: 203, 100: 204, 122: $V3 }, o($Vn, [2, 21]), o($Vn, [2, 27]), o($Vn, [2, 28]), o($Vn, [2, 123]), o($Vn, [2, 124]), { 47: [1, 207] }, { 47: [2, 121] }, { 47: [2, 122], 121: $Vi }, o($Vx, [2, 26]), o($Ve, [2, 97]), o($Ve, [2, 99]), { 48: [1, 208], 92: $Vy }, o($VV, [2, 65]), o($VV, [2, 64]), o([24, 26, 31, 34, 41, 47, 48, 53, 57, 67, 92, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], [2, 62]), { 34: [1, 209] }, o($VW, [2, 29]), { 53: [1, 210], 56: 211, 57: $VU }, o($VX, [2, 31]), { 19: 53, 32: 212, 38: 52, 44: 54, 122: $V3 }, { 13: 33, 19: 30, 22: $V5, 44: 36, 45: $Vr, 54: 213, 87: 114, 88: 110, 89: 111, 90: 112, 91: 113, 95: $Vs, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 13: 33, 19: 30, 22: $V5, 44: 36, 45: $Vr, 54: 214, 87: 114, 88: 110, 89: 111, 90: 112, 91: 113, 95: $Vs, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, o($VY, [2, 103]), o([31, 34, 41, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], $Vf, { 45: $Vg, 47: [1, 215], 115: $Vh, 121: $Vi }), { 26: [1, 216] }, { 26: [1, 218], 66: [1, 217] }, { 67: [1, 219], 92: $Vy }, { 67: [1, 220], 92: $Vy }, { 67: [2, 139], 85: 221, 104: 222, 110: $V6 }, o($VZ, [2, 135]), o($VZ, [2, 136]), o($VZ, [2, 137]), o($VZ, [2, 138]), o($VZ, $Vf, { 45: $Vg, 121: $Vi }), o($VZ, $Vj, { 45: $Vk }), { 19: 64, 44: 223, 122: $V3 }, { 13: 33, 19: 30, 22: $V5, 44: 36, 45: $Vr, 54: 224, 87: 114, 88: 110, 89: 111, 90: 112, 91: 113, 95: $Vs, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, o($Vw, [2, 16]), o($VW, [2, 30]), o($VX, [2, 32]), o($VX, [2, 33], { 45: [1, 225] }), { 53: [2, 101], 92: $Vy }, { 53: [2, 102], 92: $Vy }, o($VY, [2, 104]), { 19: 226, 122: $V3 }, { 13: 33, 19: 30, 22: $V5, 44: 36, 45: $Vr, 54: 227, 87: 114, 88: 110, 89: 111, 90: 112, 91: 113, 95: $Vs, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 19: 228, 122: $V3 }, { 6: 120, 31: $V4, 49: 122, 51: $Vt, 58: 229, 59: 119, 60: 121, 61: 123, 62: 124, 63: 127, 64: $Vu, 71: 128, 74: 129, 82: 130, 86: $Vv }, { 64: [1, 232], 76: 230, 78: 231 }, { 67: [1, 233] }, { 67: [2, 140] }, o($Vn, [2, 24]), o([24, 26, 48, 53, 57, 67], [2, 63], { 92: $Vy }), { 13: 33, 19: 30, 22: $V5, 30: 234, 44: 36, 87: 22, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 47: [1, 235] }, { 67: [1, 236], 92: $Vy }, { 26: [1, 238], 66: [1, 237] }, { 6: 120, 31: $V4, 49: 122, 51: $Vt, 59: 161, 60: 121, 61: 123, 62: 124, 63: 127, 64: [1, 239], 71: 128, 74: 129, 82: 130, 86: $Vv }, { 64: [1, 240], 78: 241 }, { 64: [2, 50] }, { 79: $V_ }, o($VN, [2, 53]), { 26: $Vc, 47: [1, 243] }, o($VY, [2, 105]), { 6: 120, 31: $V4, 49: 122, 51: $Vt, 58: 245, 59: 119, 60: 121, 61: 123, 62: 124, 63: 127, 64: $V$, 68: 244, 71: 128, 74: 129, 82: 130, 86: $Vv }, { 13: 33, 19: 30, 22: $V5, 44: 36, 45: $Vr, 54: 247, 87: 114, 88: 110, 89: 111, 90: 112, 91: 113, 95: $Vs, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, { 19: 248, 122: $V3 }, { 65: $VP, 70: [1, 250], 72: $VQ, 73: [1, 249], 75: $VR, 83: $VS }, { 77: [1, 251], 79: $V_ }, { 64: [2, 51] }, { 13: 253, 80: 252, 105: 254, 106: 255, 112: $V7, 113: $V8, 114: $V9, 123: [1, 256] }, o($VX, [2, 34]), o($VN, [2, 42]), { 6: 120, 31: $V4, 49: 122, 51: $Vt, 59: 161, 60: 121, 61: 123, 62: 124, 63: 127, 64: [1, 257], 71: 128, 74: 129, 82: 130, 86: $Vv }, { 65: $VP, 70: [1, 258], 72: $VQ, 75: $VR, 83: $VS }, { 67: [1, 259], 92: $Vy }, { 66: [1, 260] }, { 67: [1, 261] }, { 67: [1, 262] }, { 67: [1, 263] }, { 67: [1, 264] }, { 67: [2, 131] }, { 67: [2, 132] }, { 67: [2, 133] }, { 67: [2, 134] }, { 65: $VP, 69: [1, 265], 72: $VQ, 75: $VR, 83: $VS }, { 67: [1, 266] }, { 6: 120, 31: $V4, 49: 122, 51: $Vt, 58: 245, 59: 119, 60: 121, 61: 123, 62: 124, 63: 127, 64: $V$, 68: 267, 71: 128, 74: 129, 82: 130, 86: $Vv }, { 13: 33, 19: 30, 22: $V5, 44: 36, 45: $Vr, 54: 268, 87: 114, 88: 110, 89: 111, 90: 112, 91: 113, 95: $Vs, 96: 23, 97: 24, 98: 25, 99: 26, 100: 27, 101: 28, 102: 29, 103: 31, 104: 32, 105: 34, 106: 35, 110: $V6, 112: $V7, 113: $V8, 114: $V9, 116: $Va, 122: $V3 }, o($VN, [2, 47]), { 6: 120, 31: $V4, 49: 122, 51: $Vt, 58: 269, 59: 119, 60: 121, 61: 123, 62: 124, 63: 127, 64: $Vu, 71: 128, 74: 129, 82: 130, 86: $Vv }, o($VN, [2, 49]), { 6: 120, 31: $V4, 49: 122, 51: $Vt, 58: 270, 59: 119, 60: 121, 61: 123, 62: 124, 63: 127, 64: $Vu, 71: 128, 74: 129, 82: 130, 86: $Vv }, { 67: [1, 271] }, { 6: 120, 31: $V4, 49: 122, 51: $Vt, 58: 272, 59: 119, 60: 121, 61: 123, 62: 124, 63: 127, 64: $Vu, 71: 128, 74: 129, 82: 130, 86: $Vv }, o($VN, [2, 43]), { 67: [1, 273], 92: $Vy }, { 6: 120, 31: $V4, 49: 122, 51: $Vt, 59: 161, 60: 121, 61: 123, 62: 124, 63: 127, 64: [1, 274], 71: 128, 74: 129, 82: 130, 86: $Vv }, { 6: 120, 31: $V4, 49: 122, 51: $Vt, 59: 161, 60: 121, 61: 123, 62: 124, 63: 127, 64: [1, 275], 71: 128, 74: 129, 82: 130, 86: $Vv }, o($VN, [2, 45]), { 6: 120, 31: $V4, 49: 122, 51: $Vt, 59: 161, 60: 121, 61: 123, 62: 124, 63: 127, 64: [1, 276], 71: 128, 74: 129, 82: 130, 86: $Vv }, { 6: 120, 31: $V4, 49: 122, 51: $Vt, 58: 245, 59: 119, 60: 121, 61: 123, 62: 124, 63: 127, 64: $V$, 68: 277, 71: 128, 74: 129, 82: 130, 86: $Vv }, { 65: $VP, 72: $VQ, 73: [1, 278], 75: $VR, 83: $VS }, { 65: $VP, 72: $VQ, 75: $VR, 81: [1, 279], 83: $VS }, { 65: $VP, 69: [1, 280], 72: $VQ, 75: $VR, 83: $VS }, o($VN, [2, 44]), { 67: [1, 281] }, { 67: [1, 282] }, { 67: [1, 283] }, o($VN, [2, 48]), { 64: [2, 52] }, o($VN, [2, 46])],
        defaultActions: { 7: [2, 112], 11: [2, 5], 12: [2, 6], 13: [2, 7], 14: [2, 8], 50: [2, 1], 62: [2, 156], 63: [2, 157], 69: [2, 154], 70: [2, 155], 75: [2, 11], 76: [2, 12], 164: [2, 126], 178: [2, 121], 222: [2, 140], 231: [2, 50], 241: [2, 51], 253: [2, 131], 254: [2, 132], 255: [2, 133], 256: [2, 134], 282: [2, 52] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "flex": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return;
                        break;
                    case 1:
                        return 10;
                        break;
                    case 2:
                        return 12;
                        break;
                    case 3:
                        return 29;
                        break;
                    case 4:
                        return 20;
                        break;
                    case 5:
                        return 116;
                        break;
                    case 6:
                        return 65;
                        break;
                    case 7:
                        return 69;
                        break;
                    case 8:
                        return 72;
                        break;
                    case 9:
                        return 73;
                        break;
                    case 10:
                        return 70;
                        break;
                    case 11:
                        return 'ELSEIF';
                        break;
                    case 12:
                        return 66;
                        break;
                    case 13:
                        return 75;
                        break;
                    case 14:
                        return 77;
                        break;
                    case 15:
                        return 123;
                        break;
                    case 16:
                        return 79;
                        break;
                    case 17:
                        return 81;
                        break;
                    case 18:
                        return 83;
                        break;
                    case 19:
                        return 114;
                        break;
                    case 20:
                        return 113;
                        break;
                    case 21:
                        return 112;
                        break;
                    case 22:
                        this.begin('COMMENT');return;
                        break;
                    case 23:
                        this.popState();return;
                        break;
                    case 24:
                        return;
                        break;
                    case 25:
                        return 51;
                        break;
                    case 26:
                        return 53;
                        break;
                    case 27:
                        return 57;
                        break;
                    case 28:
                        return 120;
                        break;
                    case 29:
                        return 115;
                        break;
                    case 30:
                        return '->';
                        break;
                    case 31:
                        return 43;
                        break;
                    case 32:
                        this.begin('CONTROL');return 64;
                        break;
                    case 33:
                        this.begin('CHILDREN');return 67;
                        break;
                    case 34:
                        return 36;
                        break;
                    case 35:
                        this.begin('CHILDREN');return 37;
                        break;
                    case 36:
                        this.begin('CHILDREN');return 34;
                        break;
                    case 37:
                        return 31;
                        break;
                    case 38:
                        return 45;
                        break;
                    case 39:
                        return 47;
                        break;
                    case 40:
                        return 110;
                        break;
                    case 41:
                        return 111;
                        break;
                    case 42:
                        return 14;
                        break;
                    case 43:
                        return 48;
                        break;
                    case 44:
                        return 41;
                        break;
                    case 45:
                        return 126;
                        break;
                    case 46:
                        return 127;
                        break;
                    case 47:
                        return 124;
                        break;
                    case 48:
                        return 125;
                        break;
                    case 49:
                        return 128;
                        break;
                    case 50:
                        return 130;
                        break;
                    case 51:
                        return 21;
                        break;
                    case 52:
                        return 129;
                        break;
                    case 53:
                        return 131;
                        break;
                    case 54:
                        return 132;
                        break;
                    case 55:
                        return 133;
                        break;
                    case 56:
                        return 95;
                        break;
                    case 57:
                        return 26;
                        break;
                    case 58:
                        return 92;
                        break;
                    case 59:
                        return 121;
                        break;
                    case 60:
                        return 22;
                        break;
                    case 61:
                        return 24;
                        break;
                    case 62:
                        return 122;
                        break;
                    case 63:
                        this.popState();return 51;
                        break;
                    case 64:
                        this.begin('CONTROL');return 64;
                        break;
                    case 65:
                        this.popState();return 36;
                        break;
                    case 66:
                        this.popState();return 31;
                        break;
                    case 67:
                        this.popState();return 86;
                        break;
                    case 68:
                        return 7;
                        break;
                    case 69:
                        console.log(yy_.yytext);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:import)/, /^(?:from)/, /^(?:uses)/, /^(?:as)/, /^(?:new)/, /^(?:for)/, /^(?:endfor)/, /^(?:if)/, /^(?:endif)/, /^(?:else)/, /^(?:elseif)/, /^(?:in)/, /^(?:switch)/, /^(?:endswitch)/, /^(?:default)/, /^(?:case)/, /^(?:endcase)/, /^(?:include)/, /^(?:true|false)/, /^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/, /^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/, /^(?:<!--)/, /^(?:-->)/, /^(?:[.\n]+)/, /^(?:\{\{)/, /^(?:\}\})/, /^(?:\|)/, /^(?:=>)/, /^(?:::)/, /^(?:->)/, /^(?:\.\.)/, /^(?:\{%)/, /^(?:%\})/, /^(?:<\/)/, /^(?:\/>)/, /^(?:>)/, /^(?:<)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:;)/, /^(?::)/, /^(?:=)/, /^(?:==)/, /^(?:!=)/, /^(?:>=)/, /^(?:<=)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:&&)/, /^(?:\|\|)/, /^(?:\^)/, /^(?:!)/, /^(?:,)/, /^(?:\?)/, /^(?:\.)/, /^(?:\{)/, /^(?:\})/, /^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/, /^(?:\{\{)/, /^(?:\{%)/, /^(?:<\/)/, /^(?:<)/, /^(?:[^\/<>{%}]+)/, /^(?:$)/, /^(?:.)/],
            conditions: { "CONTROL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 69], "inclusive": true }, "COMMENT": { "rules": [0, 23, 24, 68], "inclusive": false }, "CHILDREN": { "rules": [0, 63, 64, 65, 66, 67, 68], "inclusive": false }, "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 69], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = ParserImpl;
    exports.Parser = ParserImpl.Parser;
    exports.parse = function () {
        return ParserImpl.parse.apply(ParserImpl, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
//# sourceMappingURL=data:application/json;base64,