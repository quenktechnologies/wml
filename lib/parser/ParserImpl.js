"use strict";

/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [7, 32, 51],
        $V1 = [1, 5],
        $V2 = [7, 51],
        $V3 = [1, 13],
        $V4 = [7, 10, 32, 51],
        $V5 = [1, 20],
        $V6 = [1, 25],
        $V7 = [12, 24, 26],
        $V8 = [1, 39],
        $V9 = [1, 44],
        $Va = [24, 26],
        $Vb = [19, 54, 57],
        $Vc = [1, 50],
        $Vd = [19, 54, 57, 58, 68, 71, 100],
        $Ve = [1, 55],
        $Vf = [1, 84],
        $Vg = [1, 83],
        $Vh = [1, 78],
        $Vi = [1, 90],
        $Vj = [1, 91],
        $Vk = [7, 32, 51, 56, 66, 103],
        $Vl = [19, 54, 57, 61],
        $Vm = [32, 51, 56, 66, 103],
        $Vn = [1, 119],
        $Vo = [1, 120],
        $Vp = [1, 101],
        $Vq = [1, 102],
        $Vr = [1, 116],
        $Vs = [1, 117],
        $Vt = [1, 118],
        $Vu = [1, 122],
        $Vv = [1, 123],
        $Vw = [1, 124],
        $Vx = [1, 125],
        $Vy = [1, 126],
        $Vz = [1, 127],
        $VA = [1, 128],
        $VB = [26, 46],
        $VC = [20, 24, 26, 34, 44, 46, 51, 54, 58, 61, 63, 68, 71, 81, 96, 100, 101, 105, 112, 118, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141],
        $VD = [1, 150],
        $VE = [1, 148],
        $VF = [20, 24, 26, 34, 46, 51, 54, 61, 63, 68, 71, 96, 101, 105, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141],
        $VG = [1, 153],
        $VH = [1, 156],
        $VI = [1, 158],
        $VJ = [1, 157],
        $VK = [1, 159],
        $VL = [1, 160],
        $VM = [1, 161],
        $VN = [1, 162],
        $VO = [1, 163],
        $VP = [1, 166],
        $VQ = [1, 167],
        $VR = [1, 175],
        $VS = [1, 176],
        $VT = [1, 194],
        $VU = [26, 101, 118],
        $VV = [26, 81, 101, 118],
        $VW = [19, 32, 51, 54, 56, 57, 66, 103],
        $VX = [68, 71],
        $VY = [1, 206],
        $VZ = [20, 24, 26, 34, 46, 51, 54, 58, 61, 63, 68, 71, 96, 101, 105, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141],
        $V_ = [2, 84],
        $V$ = [2, 82],
        $V01 = [20, 24, 26, 34, 46, 51, 54, 61, 63, 68, 71, 96, 101, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141],
        $V11 = [1, 242],
        $V21 = [26, 46, 101],
        $V31 = [1, 259],
        $V41 = [19, 22, 44, 100, 107, 114, 116, 118, 125, 127, 130, 142, 143],
        $V51 = [20, 24, 26, 34, 44, 46, 51, 54, 58, 61, 63, 68, 71, 96, 100, 101, 105, 112, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141],
        $V61 = [2, 86],
        $V71 = [1, 292],
        $V81 = [1, 302];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "module": 3, "module_option0": 4, "module_option1": 5, "module_option2": 6, "EOF": 7, "imports": 8, "import_statement": 9, "IMPORT": 10, "import_member": 11, "FROM": 12, "string_literal": 13, "import_statement_option0": 14, "default_member": 15, "alias_member": 16, "aggregate_member": 17, "composite_member": 18, "IDENTIFIER": 19, "AS": 20, "*": 21, "{": 22, "member_list": 23, "}": 24, "member_list_group0": 25, ",": 26, "member_list_group1": 27, "exports": 28, "export": 29, "export_group0": 30, "view_statement": 31, "{%": 32, "VIEW": 33, "%}": 34, "tag": 35, "ENDVIEW": 36, "macro_statement": 37, "MACRO": 38, "children": 39, "ENDMACRO": 40, "macro_statement_option0": 41, "parameters": 42, "type_classes": 43, "[": 44, "type_class_list": 45, "]": 46, "type_class": 47, "identifier": 48, "export_from_statement": 49, "EXPORT": 50, "<": 51, "tagname": 52, "attributes": 53, ">": 54, "tag_option0": 55, "</": 56, "/>": 57, ".": 58, "attribute": 59, "attribute_name": 60, "=": 61, "attribute_value": 62, ":": 63, "attribute_value_group0": 64, "interpolation": 65, "{{": 66, "expression": 67, "}}": 68, "filters": 69, "filter": 70, "|": 71, "arguments": 72, "child": 73, "child_group0": 74, "text_interpolation": 75, "control": 76, "control_group0": 77, "for_statement": 78, "FOR": 79, "typable_identifier": 80, "IN": 81, "ENDFOR": 82, "ELSE": 83, "if_statement": 84, "IF": 85, "ENDIF": 86, "else_clause": 87, "match_statement": 88, "MATCH": 89, "case_statements": 90, "ENDMATCH": 91, "case_statement": 92, "CASE": 93, "TYPEOF": 94, "ENDCASE": 95, "INSTANCEOF": 96, "call_statement": 97, "CALL": 98, "member_expression": 99, "(": 100, ")": 101, "characters": 102, "CHARACTERS": 103, "argument_list": 104, "?": 105, "binary_operator": 106, "!": 107, "expression_group0": 108, "binary_operator_group0": 109, "call_expression": 110, "bind_expression": 111, "::": 112, "new_expression": 113, "NEW": 114, "function_expression": 115, "\\\\": 116, "parameter_list": 117, "=>": 118, "array_literal": 119, "object_literal": 120, "type_assertion": 121, "key_value_pairs": 122, "key_value_pair": 123, "key_value_pair_group0": 124, "STRING_LITERAL": 125, "number_literal": 126, "NUMBER_LITERAL": 127, "boolean_literal": 128, "boolean_literal_group0": 129, "@": 130, ";": 131, ">=": 132, "<=": 133, "==": 134, "!=": 135, "+": 136, "/": 137, "-": 138, "&&": 139, "||": 140, "^": 141, "TRUE": 142, "FALSE": 143, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 7: "EOF", 10: "IMPORT", 12: "FROM", 19: "IDENTIFIER", 20: "AS", 21: "*", 22: "{", 24: "}", 26: ",", 32: "{%", 33: "VIEW", 34: "%}", 36: "ENDVIEW", 38: "MACRO", 40: "ENDMACRO", 44: "[", 46: "]", 50: "EXPORT", 51: "<", 54: ">", 56: "</", 57: "/>", 58: ".", 61: "=", 63: ":", 66: "{{", 68: "}}", 71: "|", 79: "FOR", 81: "IN", 82: "ENDFOR", 83: "ELSE", 85: "IF", 86: "ENDIF", 89: "MATCH", 91: "ENDMATCH", 93: "CASE", 94: "TYPEOF", 95: "ENDCASE", 96: "INSTANCEOF", 98: "CALL", 100: "(", 101: ")", 103: "CHARACTERS", 105: "?", 107: "!", 112: "::", 114: "NEW", 116: "\\\\", 118: "=>", 125: "STRING_LITERAL", 127: "NUMBER_LITERAL", 130: "@", 131: ";", 132: ">=", 133: "<=", 134: "==", 135: "!=", 136: "+", 137: "/", 138: "-", 139: "&&", 140: "||", 141: "^", 142: "TRUE", 143: "FALSE" },
        productions_: [0, [3, 4], [8, 1], [8, 2], [9, 5], [11, 1], [11, 1], [11, 1], [11, 1], [15, 1], [16, 3], [17, 3], [18, 3], [23, 1], [23, 3], [28, 1], [28, 2], [29, 1], [31, 8], [37, 8], [37, 10], [43, 3], [45, 1], [45, 3], [47, 1], [49, 6], [35, 8], [35, 4], [52, 1], [52, 3], [53, 2], [53, 0], [59, 3], [59, 1], [60, 1], [60, 3], [62, 1], [65, 3], [65, 4], [69, 1], [69, 2], [70, 2], [70, 3], [39, 1], [39, 2], [73, 1], [75, 1], [76, 1], [78, 10], [78, 12], [78, 14], [78, 14], [78, 16], [78, 18], [84, 8], [84, 6], [87, 7], [87, 9], [87, 7], [88, 12], [88, 8], [90, 1], [90, 2], [92, 9], [92, 9], [97, 5], [97, 4], [97, 4], [97, 5], [97, 7], [97, 6], [102, 1], [72, 2], [72, 3], [104, 1], [104, 3], [67, 3], [67, 5], [67, 5], [67, 2], [67, 1], [106, 1], [110, 2], [110, 3], [110, 2], [110, 3], [110, 4], [111, 3], [111, 4], [111, 3], [111, 4], [113, 2], [113, 3], [115, 4], [115, 2], [42, 2], [42, 3], [117, 1], [117, 3], [99, 3], [99, 3], [99, 3], [99, 3], [99, 3], [99, 3], [99, 5], [99, 3], [99, 3], [120, 2], [120, 3], [122, 1], [122, 3], [123, 3], [119, 2], [119, 3], [13, 1], [126, 1], [128, 1], [80, 1], [80, 3], [80, 5], [80, 4], [80, 6], [121, 5], [48, 1], [48, 1], [4, 0], [4, 1], [5, 0], [5, 1], [6, 0], [6, 1], [14, 0], [14, 1], [25, 1], [25, 1], [27, 1], [27, 1], [30, 1], [30, 1], [30, 1], [41, 0], [41, 1], [55, 0], [55, 1], [64, 1], [64, 1], [64, 1], [74, 1], [74, 1], [74, 1], [74, 1], [77, 1], [77, 1], [77, 1], [77, 1], [108, 1], [108, 1], [108, 1], [108, 1], [108, 1], [108, 1], [108, 1], [108, 1], [108, 1], [108, 1], [108, 1], [108, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [109, 1], [124, 1], [124, 1], [129, 1], [129, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    this.$ = new yy.ast.Module($$[$0 - 3] || [], $$[$0 - 2] || [], $$[$0 - 1] || null, this._$);return this.$;

                    break;
                case 2:
                    this.$ = [$$[$0]];
                    break;
                case 3:case 40:case 44:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 4:
                    this.$ = new yy.ast.ImportStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 9:
                    this.$ = new yy.ast.DefaultMember($$[$0], this._$);
                    break;
                case 10:
                    this.$ = new yy.ast.AliasMember($$[$0 - 2], $$[$0], this._$);
                    break;
                case 11:
                    this.$ = new yy.ast.AggregateMember($$[$0], this._$);
                    break;
                case 12:
                    this.$ = new yy.ast.CompositeMember($$[$0 - 1], this._$);
                    break;
                case 13:
                    this.$ = [$$[$0]];
                    break;
                case 14:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 15:case 110:
                    this.$ = [$$[$0]];
                    break;
                case 16:case 30:case 62:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 17:
                    this.$ = $$[$0];
                    break;
                case 18:
                    this.$ = new yy.ast.ViewStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 19:
                    this.$ = new yy.ast.MacroStatement($$[$0 - 5], [], [], $$[$0 - 3], this._$);
                    break;
                case 20:
                    this.$ = new yy.ast.MacroStatement($$[$0 - 7], $$[$0 - 6] || [], $$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 21:
                    this.$ = $$[$0 - 1];
                    break;
                case 22:
                    this.$ = [$$[$0]];
                    break;
                case 23:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 25:
                    this.$ = new yy.ast.ExportFromStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 26:

                    yy.help.ensureTagsMatch($$[$0 - 6], $$[$0]);
                    this.$ = new yy.ast.Tag($$[$0 - 6], $$[$0 - 5], $$[$0 - 3] ? $$[$0 - 3] : [], this._$);

                    break;
                case 27:
                    this.$ = new yy.ast.Tag($$[$0 - 2], $$[$0 - 1], [], this._$);
                    break;
                case 28:
                    this.$ = $$[$0];
                    break;
                case 29:
                    this.$ = [$$[$0 - 2], $$[$0]].join('.');
                    break;
                case 31:case 95:
                    this.$ = [];
                    break;
                case 32:
                    this.$ = new yy.ast.Attribute($$[$0 - 2].name, $$[$0 - 2].namespace, $$[$0], this._$);
                    break;
                case 33:
                    this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace, new yy.ast.BooleanLiteral(true, this._$), this._$);
                    break;
                case 34:
                    this.$ = { namespace: null, name: $$[$0] };
                    break;
                case 35:
                    this.$ = { namespace: $$[$0 - 2], name: $$[$0] };
                    break;
                case 36:case 45:case 47:
                    this.$ = $$[$0];
                    break;
                case 37:
                    this.$ = new yy.ast.Interpolation($$[$0 - 1], [], this._$);
                    break;
                case 38:
                    this.$ = new yy.ast.Interpolation($$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 39:
                    this.$ = [$$[$0]];
                    break;
                case 41:
                    this.$ = new yy.ast.Filter($$[$0], [], this._$);
                    break;
                case 42:
                    this.$ = new yy.ast.Filter($$[$0 - 1], $$[$0], this._$);
                    break;
                case 43:
                    this.$ = [$$[$0]];
                    break;
                case 46:
                    this.$ = new yy.ast.TextInterpolation($$[$0], this._$);
                    break;
                case 48:
                    this.$ = new yy.ast.ForStatement($$[$0 - 7], null, null, $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 49:
                    this.$ = new yy.ast.ForStatement($$[$0 - 9], $$[$0 - 7], null, $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 50:
                    this.$ = new yy.ast.ForStatement($$[$0 - 11], $$[$0 - 9], $$[$0 - 7], $$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 51:
                    this.$ = new yy.ast.ForStatement($$[$0 - 11], null, null, $$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 52:
                    this.$ = new yy.ast.ForStatement($$[$0 - 13], $$[$0 - 11], null, $$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 53:
                    this.$ = new yy.ast.ForStatement($$[$0 - 15], $$[$0 - 13], null, $$[$0 - 11], $$[$0 - 9], $$[$0 - 3], this._$);
                    break;
                case 54:
                    this.$ = new yy.ast.IfStatement($$[$0 - 5], $$[$0 - 3], null, this._$);
                    break;
                case 55:
                    this.$ = new yy.ast.IfStatement($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 56:
                    this.$ = new yy.ast.ElseClause($$[$0 - 3], this._$);
                    break;
                case 57:
                    this.$ = new yy.ast.ElseIfClause($$[$0 - 5], $$[$0 - 3], null, this._$);
                    break;
                case 58:
                    this.$ = new yy.ast.ElseIfClause($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 59:
                    this.$ = new yy.ast.MatchStatement($$[$0 - 9], $$[$0 - 7], $$[$0 - 3], this._$);
                    break;
                case 60:
                    this.$ = new yy.ast.MatchStatement($$[$0 - 5], $$[$0 - 3], [], this._$);
                    break;
                case 61:
                    this.$ = [$$[$0]];
                    break;
                case 63:
                    this.$ = new yy.ast.TypeOfCaseStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 64:
                    this.$ = new yy.ast.InstanceOfCaseStatement($$[$0 - 5], $$[$0 - 3], this._$);
                    break;
                case 65:case 68:
                    this.$ = new yy.ast.CallStatement($$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 66:case 67:
                    this.$ = new yy.ast.CallStatement($$[$0 - 1], [], this._$);
                    break;
                case 69:
                    this.$ = new yy.ast.CallStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 70:
                    this.$ = new yy.ast.CallStatement($$[$0 - 2], [], this._$);
                    break;
                case 71:
                    this.$ = new yy.ast.Characters($$[$0], this._$);
                    break;
                case 72:
                    this.$ = [];
                    break;
                case 73:
                    this.$ = $$[$0 - 1];
                    break;
                case 74:
                    this.$ = [$$[$0]];
                    break;
                case 75:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 76:
                    this.$ = $$[$0 - 1];
                    break;
                case 77:
                    this.$ = new yy.ast.TernaryExpression($$[$0 - 4], $$[$0 - 2], $$[$0], this._$);
                    break;
                case 78:
                    this.$ = new yy.ast.BinaryExpression($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 79:
                    this.$ = new yy.ast.UnaryExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 80:
                    this.$ = $$[$0];
                    break;
                case 81:
                    this.$ = yy.help.convertOperator($$[$0]);
                    break;
                case 82:case 84:
                    this.$ = new yy.ast.CallExpression($$[$0 - 1], [], $$[$0], this._$);
                    break;
                case 83:case 85:
                    this.$ = new yy.ast.CallExpression($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 86:
                    this.$ = new yy.ast.CallExpression($$[$0 - 2], [], $$[$0], this._$);
                    break;
                case 87:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 88:
                    this.$ = new yy.ast.BindExpression($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 89:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 90:
                    this.$ = new yy.ast.BindExpression($$[$0 - 3], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 91:
                    this.$ = new yy.ast.NewExpression($$[$0], [], this._$);
                    break;
                case 92:
                    this.$ = new yy.ast.NewExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 93:
                    this.$ = new yy.ast.FunctionExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 94:
                    this.$ = new yy.ast.FunctionExpression([], $$[$0], this._$);
                    break;
                case 96:
                    this.$ = $$[$0 - 1];
                    break;
                case 97:
                    this.$ = [$$[$0]];
                    break;
                case 98:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 99:case 100:case 101:case 102:case 103:case 104:case 106:case 107:
                    this.$ = new yy.ast.MemberExpression($$[$0 - 2], $$[$0], this._$);
                    break;
                case 105:
                    this.$ = new yy.ast.MemberExpression($$[$0 - 3], $$[$0], this._$);
                    break;
                case 108:
                    this.$ = new yy.ast.ObjectLiteral([], this._$);
                    break;
                case 109:
                    this.$ = new yy.ast.ObjectLiteral($$[$0 - 1], this._$);
                    break;
                case 111:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 112:
                    this.$ = { key: $$[$0 - 2], value: $$[$0] };
                    break;
                case 113:
                    this.$ = new yy.ast.ArrayLiteral([], this._$);
                    break;
                case 114:
                    this.$ = new yy.ast.ArrayLiteral($$[$0 - 1], this._$);
                    break;
                case 115:
                    this.$ = new yy.ast.StringLiteral($$[$0], this._$);
                    break;
                case 116:
                    this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$);
                    break;
                case 117:
                    this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
                    break;
                case 118:
                    this.$ = $$[$0];
                    break;
                case 119:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 2], $$[$0], [], false, this._$);
                    break;
                case 120:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 4], $$[$0 - 2], [], true, this._$);
                    break;
                case 121:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 3], $$[$0 - 1], $$[$0], false, this._$);
                    break;
                case 122:
                    this.$ = new yy.ast.TypableIdentifier($$[$0 - 5], $$[$0 - 3], $$[$0 - 2], true, this._$);
                    break;
                case 123:
                    this.$ = new yy.ast.TypeAssertion($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 124:
                    this.$ = new yy.ast.Identifier($$[$0], '', this._$);
                    break;
                case 125:
                    this.$ = new yy.ast.Identifier('this.attributes', '', this._$);
                    break;
            }
        },
        table: [o($V0, [2, 126], { 3: 1, 4: 2, 8: 3, 9: 4, 10: $V1 }), { 1: [3] }, o($V2, [2, 128], { 5: 6, 28: 7, 29: 8, 30: 9, 31: 10, 37: 11, 49: 12, 32: $V3 }), o($V0, [2, 127], { 9: 14, 10: $V1 }), o($V4, [2, 2]), { 11: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: $V5, 21: [1, 21], 22: [1, 22] }, { 6: 23, 7: [2, 130], 35: 24, 51: $V6 }, o($V2, [2, 129], { 30: 9, 31: 10, 37: 11, 49: 12, 29: 26, 32: $V3 }), o($V0, [2, 15]), o($V0, [2, 17]), o($V0, [2, 138]), o($V0, [2, 139]), o($V0, [2, 140]), { 33: [1, 27], 38: [1, 28], 50: [1, 29] }, o($V4, [2, 3]), { 12: [1, 30] }, { 12: [2, 5] }, { 12: [2, 6] }, { 12: [2, 7] }, { 12: [2, 8] }, o($V7, [2, 9], { 20: [1, 31] }), { 20: [1, 32] }, { 15: 35, 16: 36, 19: $V5, 23: 33, 25: 34 }, { 7: [1, 37] }, { 7: [2, 131] }, { 19: $V8, 52: 38 }, o($V0, [2, 16]), { 19: [1, 40] }, { 19: [1, 41] }, { 19: [1, 42] }, { 13: 43, 125: $V9 }, { 19: [1, 45] }, { 19: [1, 46] }, { 24: [1, 47], 26: [1, 48] }, o($Va, [2, 13]), o($Va, [2, 134]), o($Va, [2, 135]), { 1: [2, 1] }, o($Vb, [2, 31], { 53: 49, 58: $Vc }), o($Vd, [2, 28]), { 34: [1, 51] }, { 34: [1, 52], 41: 53, 43: 54, 44: $Ve, 100: [2, 141] }, { 12: [1, 56] }, o($V4, [2, 132], { 14: 57, 131: [1, 58] }), o([7, 10, 19, 20, 24, 26, 32, 34, 46, 51, 54, 57, 58, 61, 63, 68, 71, 96, 101, 105, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], [2, 115]), o($V7, [2, 10]), { 12: [2, 11] }, { 12: [2, 12] }, { 15: 60, 16: 61, 19: $V5, 27: 59 }, { 19: [1, 66], 54: [1, 62], 57: [1, 63], 59: 64, 60: 65 }, { 19: [1, 67] }, { 35: 68, 51: $V6 }, { 32: $Vf, 35: 72, 39: 69, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 42: 85, 100: [1, 86] }, { 100: [2, 142] }, { 19: $Vi, 45: 87, 47: 88, 48: 89, 130: $Vj }, { 13: 92, 125: $V9 }, o($V4, [2, 4]), o($V4, [2, 133]), o($Va, [2, 14]), o($Va, [2, 136]), o($Va, [2, 137]), { 32: $Vf, 35: 72, 39: 94, 51: $V6, 55: 93, 56: [2, 143], 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, o($Vk, [2, 27]), o($Vb, [2, 30]), o($Vb, [2, 33], { 61: [1, 95] }), o($Vl, [2, 34], { 63: [1, 96] }), o($Vd, [2, 29]), { 32: [1, 97] }, { 32: [1, 98], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, o($Vm, [2, 43]), o($Vm, [2, 45]), o($Vm, [2, 148]), o($Vm, [2, 149]), o($Vm, [2, 150]), o($Vm, [2, 151]), o($Vm, [2, 47]), o($Vm, [2, 46]), o($Vm, [2, 71]), o($Vm, [2, 152]), o($Vm, [2, 153]), o($Vm, [2, 154]), o($Vm, [2, 155]), { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 100, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, { 79: $Vx, 85: $Vy, 89: $Vz, 98: $VA }, { 34: [1, 129] }, { 19: $Vi, 48: 133, 80: 132, 101: [1, 130], 117: 131, 130: $Vj }, { 26: [1, 135], 46: [1, 134] }, o($VB, [2, 22]), o($VB, [2, 24]), o($VC, [2, 124]), o($VC, [2, 125]), { 34: [1, 136] }, { 56: [1, 137] }, { 32: $Vf, 35: 72, 51: $V6, 56: [2, 144], 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 13: 141, 62: 138, 64: 139, 65: 140, 66: $Vg, 125: $V9, 126: 142, 127: $Vu }, { 19: [1, 143] }, { 36: [1, 144] }, { 40: [1, 145], 79: $Vx, 85: $Vy, 89: $Vz, 98: $VA }, o($Vm, [2, 44]), { 68: [1, 146], 69: 147, 70: 149, 71: $VD, 105: $VE }, { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 151, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 152, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, o($VF, [2, 80]), o($VF, [2, 156]), o($VF, [2, 157], { 58: $VG }), o($VF, [2, 158], { 72: 154, 43: 155, 44: $Ve, 58: $VH, 100: $VI, 112: $VJ }), o($VF, [2, 159]), o($VF, [2, 160], { 58: $VK }), o($VF, [2, 161], { 58: $VL }), o($VF, [2, 162], { 58: $VM }), o($VF, [2, 163], { 58: $VN }), o($VF, [2, 164]), o($VF, [2, 165]), o($VF, [2, 166], { 58: $VO }), o($VF, [2, 167], { 72: 164, 43: 165, 44: $Ve, 58: $VP, 100: $VI, 112: $VQ }), { 19: $Vi, 48: 168, 130: $Vj }, { 19: $Vi, 48: 133, 80: 132, 117: 169, 130: $Vj }, { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 170, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, { 19: $VR, 24: [1, 171], 122: 172, 123: 173, 124: 174, 125: $VS }, { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 46: [1, 177], 48: 115, 67: 179, 99: 106, 100: $Vp, 104: 178, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, o($VF, [2, 117]), o([19, 20, 24, 26, 34, 46, 51, 54, 57, 61, 63, 68, 71, 96, 101, 105, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], [2, 116]), o($VF, [2, 184]), o($VF, [2, 185]), { 19: $Vi, 48: 133, 80: 180, 130: $Vj }, { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 181, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, { 19: $Vi, 48: 182, 130: $Vj }, { 13: 188, 19: $Vi, 22: $Vn, 44: $Vo, 48: 183, 99: 184, 100: [1, 185], 110: 189, 111: 190, 119: 186, 120: 187, 121: 191, 125: $V9, 130: $Vj }, { 32: $Vf, 35: 72, 39: 192, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 34: [2, 95] }, { 26: $VT, 101: [1, 193] }, o($VU, [2, 97]), o($VV, [2, 118], { 63: [1, 195] }), o([26, 44, 81, 100, 101, 118], [2, 21]), { 19: $Vi, 47: 196, 48: 89, 130: $Vj }, o($V0, [2, 25]), { 19: $V8, 52: 197 }, o($Vb, [2, 32]), o($Vb, [2, 36]), o($Vb, [2, 145]), o($Vb, [2, 146]), o($Vb, [2, 147]), o($Vl, [2, 35]), { 34: [1, 198] }, { 34: [1, 199] }, o($VW, [2, 37]), { 68: [1, 200], 70: 201, 71: $VD }, { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 202, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, o($VX, [2, 39]), { 19: $V8, 52: 203 }, { 20: $VY, 51: [1, 210], 54: [1, 208], 61: [1, 217], 96: [1, 221], 101: [1, 204], 105: $VE, 106: 205, 109: 207, 132: [1, 209], 133: [1, 211], 134: [1, 212], 135: [1, 213], 136: [1, 214], 137: [1, 215], 138: [1, 216], 139: [1, 218], 140: [1, 219], 141: [1, 220] }, o($VF, [2, 79]), { 19: $Vi, 48: 222, 130: $Vj }, o($VZ, $V_), { 72: 223, 100: $VI }, { 19: $Vi, 48: 224, 130: $Vj }, { 19: $Vi, 48: 225, 130: $Vj }, { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 179, 99: 106, 100: $Vp, 101: [1, 226], 104: 227, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, { 19: $Vi, 48: 228, 130: $Vj }, { 19: $Vi, 48: 229, 130: $Vj }, { 19: $Vi, 48: 230, 130: $Vj }, { 19: $Vi, 48: 231, 130: $Vj }, { 19: $Vi, 48: 232, 130: $Vj }, o($VZ, $V$), { 72: 233, 100: $VI }, { 19: $Vi, 48: 234, 130: $Vj }, { 19: $Vi, 48: 235, 130: $Vj }, o($VF, [2, 91], { 72: 236, 100: $VI }), { 26: $VT, 118: [1, 237] }, o($V01, [2, 94], { 105: $VE }), o($VZ, [2, 108]), { 24: [1, 238], 26: [1, 239] }, o($Va, [2, 110]), { 63: [1, 240] }, { 63: [2, 182] }, { 63: [2, 183] }, o($VZ, [2, 113]), { 26: $V11, 46: [1, 241] }, o($V21, [2, 74], { 105: $VE }), { 26: [1, 244], 81: [1, 243] }, { 34: [1, 245], 105: $VE }, { 34: [1, 246] }, { 34: [1, 248], 43: 165, 44: $Ve, 58: $VP, 72: 247, 100: $VI, 112: $VQ }, { 34: [1, 249], 43: 155, 44: $Ve, 58: $VH, 72: 250, 100: $VI, 112: $VJ }, { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 251, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, { 58: $VM }, { 58: $VL }, { 58: $VN }, { 58: $VG }, { 58: $VK }, { 58: $VO }, { 32: [1, 252], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 34: [2, 96] }, { 19: $Vi, 48: 133, 80: 253, 130: $Vj }, { 19: $Vi, 48: 254, 130: $Vj }, o($VB, [2, 23]), { 54: [1, 255], 58: $Vc }, o($V0, [2, 18]), o($V0, [2, 19]), o($VW, [2, 38]), o($VX, [2, 40]), { 63: [1, 256], 105: $VE }, o($VX, [2, 41], { 72: 257, 58: $Vc, 100: $VI }), o($VF, [2, 76], { 72: 258, 58: $V31, 100: $VI }), { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 260, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, { 19: $Vi, 48: 261, 130: $Vj }, o($V41, [2, 81]), o($V41, [2, 168]), o($V41, [2, 169]), o($V41, [2, 170]), o($V41, [2, 171]), o($V41, [2, 172]), o($V41, [2, 173]), o($V41, [2, 174]), o($V41, [2, 175]), o($V41, [2, 176]), o($V41, [2, 177]), o($V41, [2, 178]), o($V41, [2, 179]), o($V41, [2, 180]), o($V41, [2, 181]), o($V51, [2, 103]), o($VZ, [2, 85]), o($V51, [2, 107]), o($VZ, [2, 89], { 72: 262, 100: $VI }), o($VZ, [2, 72]), { 26: $V11, 101: [1, 263] }, o($V51, [2, 104]), o($V51, [2, 101]), o($V51, [2, 100]), o($V51, [2, 102]), o($V51, [2, 106]), o($VZ, [2, 83]), o($V51, [2, 99]), o($VZ, [2, 87], { 72: 264, 100: $VI }), o($VF, [2, 92]), { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 265, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, o($VZ, [2, 109]), { 19: $VR, 123: 266, 124: 174, 125: $VS }, { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 267, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, o($VZ, [2, 114]), { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 268, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 269, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, { 19: $Vi, 48: 133, 80: 270, 130: $Vj }, { 32: $Vf, 35: 72, 39: 271, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 32: [1, 274], 90: 272, 92: 273 }, { 34: [1, 275], 58: $V$ }, o($Vm, [2, 66]), o($Vm, [2, 67]), { 34: [1, 276], 58: $V_ }, { 20: $VY, 101: [1, 277], 105: $VE }, { 40: [1, 278], 79: $Vx, 85: $Vy, 89: $Vz, 98: $VA }, o($VU, [2, 98]), o($VV, [2, 119], { 43: 280, 44: [1, 279] }), o($Vk, [2, 26]), { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 281, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, o($VX, [2, 42]), o($VZ, $V61), { 19: $Vi, 48: 282, 130: $Vj }, { 101: [1, 283], 105: $VE }, { 101: [1, 284] }, o($VZ, [2, 90]), o($VZ, [2, 73]), o($VZ, [2, 88]), o($V01, [2, 93], { 105: $VE }), o($Va, [2, 111]), o($Va, [2, 112], { 105: $VE }), o($V21, [2, 75], { 105: $VE }), { 34: [1, 285], 105: $VE }, { 26: [1, 287], 81: [1, 286] }, { 32: [1, 288], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 87: 289, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 32: [1, 290], 92: 291 }, { 32: [2, 61] }, { 93: $V71 }, o($Vm, [2, 65]), o($Vm, [2, 68]), { 34: [1, 294], 58: $V31, 72: 293, 100: $VI }, { 34: [1, 295] }, { 19: $Vi, 45: 87, 46: [1, 296], 47: 88, 48: 89, 130: $Vj }, o($VV, [2, 121], { 44: [1, 297] }), o($V01, [2, 77], { 105: $VE }), o($V51, [2, 105]), o($VF, [2, 78]), o($VZ, [2, 123]), { 32: $Vf, 35: 72, 39: 298, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 299, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, { 19: $Vi, 48: 133, 80: 300, 130: $Vj }, { 79: $Vx, 83: $V81, 85: $Vy, 86: [1, 301], 89: $Vz, 98: $VA }, o($Vm, [2, 55]), { 83: [1, 303], 91: [1, 304], 93: $V71 }, { 32: [2, 62] }, { 94: [1, 305], 96: [1, 306] }, { 34: [1, 307], 58: $V61 }, o($Vm, [2, 70]), o($V0, [2, 20]), o($VV, [2, 120]), { 46: [1, 308] }, { 32: [1, 309], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 34: [1, 310], 105: $VE }, { 81: [1, 311] }, { 34: [1, 312] }, { 34: [1, 313], 85: [1, 314] }, { 34: [1, 315] }, { 34: [1, 316] }, { 13: 317, 125: $V9 }, { 19: $Vi, 48: 318, 130: $Vj }, o($Vm, [2, 69]), o($VV, [2, 122]), { 79: $Vx, 82: [1, 319], 83: [1, 320], 85: $Vy, 89: $Vz, 98: $VA }, { 32: $Vf, 35: 72, 39: 321, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 322, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, o($Vm, [2, 54]), { 32: $Vf, 35: 72, 39: 323, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 13: 111, 19: $Vi, 22: $Vn, 44: $Vo, 48: 115, 67: 324, 99: 106, 100: $Vp, 107: $Vq, 108: 103, 110: 105, 111: 108, 113: 104, 114: $Vr, 115: 107, 116: $Vs, 118: $Vt, 119: 110, 120: 109, 121: 114, 125: $V9, 126: 113, 127: $Vu, 128: 112, 129: 121, 130: $Vj, 142: $Vv, 143: $Vw }, { 32: $Vf, 35: 72, 39: 325, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, o($Vm, [2, 60]), { 34: [1, 326] }, { 34: [1, 327] }, { 34: [1, 328] }, { 34: [1, 329] }, { 32: [1, 330], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 34: [1, 331], 105: $VE }, { 32: [1, 332], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 34: [1, 333], 105: $VE }, { 32: [1, 334], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 32: $Vf, 35: 72, 39: 335, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 32: $Vf, 35: 72, 39: 336, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, o($Vm, [2, 48]), { 32: $Vf, 35: 72, 39: 337, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 79: $Vx, 82: [1, 338], 83: [1, 339], 85: $Vy, 89: $Vz, 98: $VA }, { 32: $Vf, 35: 72, 39: 340, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 79: $Vx, 85: $Vy, 86: [1, 341], 89: $Vz, 98: $VA }, { 32: $Vf, 35: 72, 39: 342, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 79: $Vx, 85: $Vy, 89: $Vz, 91: [1, 343], 98: $VA }, { 32: [1, 344], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 32: [1, 345], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 32: [1, 346], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 34: [1, 347] }, { 34: [1, 348] }, { 32: [1, 349], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 34: [1, 350] }, { 32: [1, 351], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 87: 352, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 34: [1, 353] }, { 79: $Vx, 85: $Vy, 89: $Vz, 95: [1, 354], 98: $VA }, { 79: $Vx, 85: $Vy, 89: $Vz, 95: [1, 355], 98: $VA }, { 79: $Vx, 82: [1, 356], 85: $Vy, 89: $Vz, 98: $VA }, o($Vm, [2, 49]), { 32: $Vf, 35: 72, 39: 357, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 79: $Vx, 82: [1, 358], 83: [1, 359], 85: $Vy, 89: $Vz, 98: $VA }, o($Vm, [2, 56]), { 79: $Vx, 83: $V81, 85: $Vy, 86: [1, 360], 89: $Vz, 98: $VA }, o($Vm, [2, 58]), o($Vm, [2, 59]), { 34: [1, 361] }, { 34: [1, 362] }, { 34: [1, 363] }, { 32: [1, 364], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, { 34: [1, 365] }, { 34: [1, 366] }, { 34: [1, 367] }, { 32: [2, 63] }, { 32: [2, 64] }, o($Vm, [2, 51]), { 79: $Vx, 82: [1, 368], 85: $Vy, 89: $Vz, 98: $VA }, o($Vm, [2, 50]), { 32: $Vf, 35: 72, 39: 369, 51: $V6, 65: 77, 66: $Vg, 73: 70, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, o($Vm, [2, 57]), { 34: [1, 370] }, { 32: [1, 371], 35: 72, 51: $V6, 65: 77, 66: $Vg, 73: 99, 74: 71, 75: 74, 76: 73, 77: 76, 78: 79, 84: 80, 88: 81, 97: 82, 102: 75, 103: $Vh }, o($Vm, [2, 52]), { 79: $Vx, 82: [1, 372], 85: $Vy, 89: $Vz, 98: $VA }, { 34: [1, 373] }, o($Vm, [2, 53])],
        defaultActions: { 16: [2, 5], 17: [2, 6], 18: [2, 7], 19: [2, 8], 24: [2, 131], 37: [2, 1], 46: [2, 11], 47: [2, 12], 54: [2, 142], 130: [2, 95], 175: [2, 182], 176: [2, 183], 193: [2, 96], 273: [2, 61], 291: [2, 62], 361: [2, 63], 362: [2, 64] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "flex": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return;
                        break;
                    case 1:
                        return 10;
                        break;
                    case 2:
                        return 12;
                        break;
                    case 3:
                        return 56;
                        break;
                    case 4:
                        this.begin('CONTROL');return 32;
                        break;
                    case 5:
                        this.begin('COMMENT');return;
                        break;
                    case 6:
                        this.begin('CHILDREN');return 54;
                        break;
                    case 7:
                        this.begin('CHILDREN');return 57;
                        break;
                    case 8:
                        this.begin('EXPRESSION');return 66;
                        break;
                    case 9:
                        return 38;
                        break;
                    case 10:
                        return 40;
                        break;
                    case 11:
                        return 79;
                        break;
                    case 12:
                        return 82;
                        break;
                    case 13:
                        return 85;
                        break;
                    case 14:
                        return 86;
                        break;
                    case 15:
                        return 83;
                        break;
                    case 16:
                        return 'ELSEIF';
                        break;
                    case 17:
                        return 81;
                        break;
                    case 18:
                        return 'SWITCH';
                        break;
                    case 19:
                        return 'ENDSWITCH';
                        break;
                    case 20:
                        return 'DEFAULT';
                        break;
                    case 21:
                        return 93;
                        break;
                    case 22:
                        return 95;
                        break;
                    case 23:
                        return 98;
                        break;
                    case 24:
                        return 50;
                        break;
                    case 25:
                        return 12;
                        break;
                    case 26:
                        return 'ENDEXPORT';
                        break;
                    case 27:
                        return 33;
                        break;
                    case 28:
                        return 36;
                        break;
                    case 29:
                        return 89;
                        break;
                    case 30:
                        return 91;
                        break;
                    case 31:
                        return 'OTHERWISE';
                        break;
                    case 32:
                        return 'ENDOTHERWISE';
                        break;
                    case 33:
                        return 96;
                        break;
                    case 34:
                        return 94;
                        break;
                    case 35:
                        this.popState();return 34;
                        break;
                    case 36:
                        return 114;
                        break;
                    case 37:
                        return 71;
                        break;
                    case 38:
                        return 118;
                        break;
                    case 39:
                        return 112;
                        break;
                    case 40:
                        return '->';
                        break;
                    case 41:
                        return '..';
                        break;
                    case 42:
                        return 96;
                        break;
                    case 43:
                        this.popState();return 68;
                        break;
                    case 44:
                        this.begin('EXPRESSION');return 66;
                        break;
                    case 45:
                        this.begin('CONTROL');return 32;
                        break;
                    case 46:
                        this.begin('COMMENT');return;
                        break;
                    case 47:
                        this.popState();return 56;
                        break;
                    case 48:
                        this.popState();return 51;
                        break;
                    case 49:
                        this.popState();return 103;
                        break;
                    case 50:
                        this.popState();return;
                        break;
                    case 51:
                        return 142;
                        break;
                    case 52:
                        return 143;
                        break;
                    case 53:
                        return 127;
                        break;
                    case 54:
                        return 125;
                        break;
                    case 55:
                        return 54;
                        break;
                    case 56:
                        return 51;
                        break;
                    case 57:
                        return 100;
                        break;
                    case 58:
                        return 101;
                        break;
                    case 59:
                        return 44;
                        break;
                    case 60:
                        return 46;
                        break;
                    case 61:
                        return 131;
                        break;
                    case 62:
                        return 63;
                        break;
                    case 63:
                        return ':::';
                        break;
                    case 64:
                        return 61;
                        break;
                    case 65:
                        return 134;
                        break;
                    case 66:
                        return 135;
                        break;
                    case 67:
                        return 132;
                        break;
                    case 68:
                        return 133;
                        break;
                    case 69:
                        return 136;
                        break;
                    case 70:
                        return 138;
                        break;
                    case 71:
                        return 21;
                        break;
                    case 72:
                        return 137;
                        break;
                    case 73:
                        return 116;
                        break;
                    case 74:
                        return 139;
                        break;
                    case 75:
                        return 140;
                        break;
                    case 76:
                        return 141;
                        break;
                    case 77:
                        return 107;
                        break;
                    case 78:
                        return 26;
                        break;
                    case 79:
                        return 105;
                        break;
                    case 80:
                        return 58;
                        break;
                    case 81:
                        return 22;
                        break;
                    case 82:
                        return 24;
                        break;
                    case 83:
                        return 130;
                        break;
                    case 84:
                        return 20;
                        break;
                    case 85:
                        return 19;
                        break;
                    case 86:
                        return 7;
                        break;
                    case 87:
                        console.log(yy_.yytext);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:import)/, /^(?:from)/, /^(?:<\/)/, /^(?:\{%)/, /^(?:<!--)/, /^(?:>)/, /^(?:\/>)/, /^(?:\{\{)/, /^(?:macro)/, /^(?:endmacro)/, /^(?:for)/, /^(?:endfor)/, /^(?:if)/, /^(?:endif)/, /^(?:else)/, /^(?:elseif)/, /^(?:in)/, /^(?:switch)/, /^(?:endswitch)/, /^(?:default)/, /^(?:case)/, /^(?:endcase)/, /^(?:call)/, /^(?:export)/, /^(?:from)/, /^(?:endexport)/, /^(?:view)/, /^(?:endview)/, /^(?:match)/, /^(?:endmatch)/, /^(?:otherwise)/, /^(?:endotherwise)/, /^(?:instanceof)/, /^(?:typeof)/, /^(?:%\})/, /^(?:new)/, /^(?:\|)/, /^(?:=>)/, /^(?:::)/, /^(?:->)/, /^(?:\.\.)/, /^(?:instanceof)/, /^(?:\}\})/, /^(?:\{\{)/, /^(?:\{%)/, /^(?:<!--)/, /^(?:<\/)/, /^(?:<)/, /^(?:[^\/<>{%}]+)/, /^(?:(.|\r|\n)*?-->)/, /^(?:true)/, /^(?:false)/, /^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/, /^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/, /^(?:>)/, /^(?:<)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:;)/, /^(?::)/, /^(?::::)/, /^(?:=)/, /^(?:==)/, /^(?:!=)/, /^(?:>=)/, /^(?:<=)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:\\)/, /^(?:&&)/, /^(?:\|\|)/, /^(?:\^)/, /^(?:!)/, /^(?:,)/, /^(?:\?)/, /^(?:\.)/, /^(?:\{)/, /^(?:\})/, /^(?:@)/, /^(?:as)/, /^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/, /^(?:$)/, /^(?:.)/],
            conditions: { "EXPRESSION": { "rules": [0, 36, 37, 38, 39, 40, 41, 42, 43, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "inclusive": false }, "CONTROL": { "rules": [0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "inclusive": false }, "COMMENT": { "rules": [0, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "inclusive": false }, "CHILDREN": { "rules": [0, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "inclusive": false }, "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = ParserImpl;
    exports.Parser = ParserImpl.Parser;
    exports.parse = function () {
        return ParserImpl.parse.apply(ParserImpl, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,