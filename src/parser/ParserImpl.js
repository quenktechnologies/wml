/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[8,31,37,39],$V1=[1,5],$V2=[8,31,39],$V3=[8,11,31,37,39],$V4=[1,18],$V5=[8,39],$V6=[1,22],$V7=[1,40],$V8=[1,41],$V9=[1,42],$Va=[1,43],$Vb=[1,44],$Vc=[1,39],$Vd=[13,25,27],$Ve=[1,54],$Vf=[1,57],$Vg=[8,27,31,39,55,120],$Vh=[8,25,27,31,33,39,42,49,55,56,61,65,101,120,133,134,135,136,137,138,139,140,141,142],$Vi=[2,85],$Vj=[1,58],$Vk=[1,59],$Vl=[1,60],$Vm=[2,105],$Vn=[1,61],$Vo=[1,72],$Vp=[25,27],$Vq=[42,45,51,132],$Vr=[42,45,51,53,61,65,132],$Vs=[8,25,27,31,33,39,42,49,55,56,61,65,101,119,120,133,134,135,136,137,138,139,140,141,142],$Vt=[8,25,27,31,33,39,42,45,49,51,53,55,56,61,65,101,119,120,124,132,133,134,135,136,137,138,139,140,141,142],$Vu=[1,119],$Vv=[1,120],$Vw=[1,132],$Vx=[25,27,33,56,61,65,101],$Vy=[1,137],$Vz=[1,135],$VA=[1,144],$VB=[1,136],$VC=[1,138],$VD=[1,139],$VE=[1,140],$VF=[1,141],$VG=[1,142],$VH=[1,143],$VI=[1,145],$VJ=[1,146],$VK=[1,147],$VL=[1,167],$VM=[1,161],$VN=[1,162],$VO=[8,31,39,44,59,95],$VP=[42,45,49,51,132],$VQ=[23,53,119,121,122,123,125,132],$VR=[31,39,44,59,95],$VS=[1,188],$VT=[1,189],$VU=[1,190],$VV=[1,191],$VW=[25,27,33,55,56,61,65,101],$VX=[1,207],$VY=[31,39,42,44,45,51,59,95,132],$VZ=[61,65],$V_=[33,119],$V$=[27,55],$V01=[1,261],$V11=[1,262],$V21=[1,266],$V31=[1,270];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"module_option0":4,"module_option1":5,"module_option2":6,"module_option3":7,"EOF":8,"imports":9,"import_statement":10,"IMPORT":11,"import_member":12,"FROM":13,"string_literal":14,";":15,"default_member":16,"alias_member":17,"aggregate_member":18,"composite_member":19,"identifier":20,"AS":21,"*":22,"{":23,"member_list":24,"}":25,"member_list_group0":26,",":27,"member_list_group1":28,"exports":29,"export":30,"{%":31,"EXPORT":32,"%}":33,"tag":34,"ENDEXPORT":35,"usage":36,"USES":37,"arguments":38,"<":39,"tagname":40,"attributes":41,">":42,"tag_option0":43,"</":44,"/>":45,"tagname_group0":46,"attribute":47,"attribute_name":48,"=":49,"attribute_value":50,"..":51,"member_access":52,"(":53,"attribute_group0":54,")":55,":":56,"interpolation":57,"attribute_value_group0":58,"{{":59,"interpolation_group0":60,"}}":61,"expression":62,"filters":63,"filter":64,"|":65,"children":66,"child":67,"control":68,"characters":69,"control_group0":70,"for_statement":71,"FOR":72,"IN":73,"for_children":74,"ENDFOR":75,"ELSE":76,"if_statement":77,"IF":78,"ENDIF":79,"else_clause":80,"else_if_clause":81,"switch_statement":82,"SWITCH":83,"case_statements":84,"ENDSWITCH":85,"case_statement":86,"CASE":87,"case_statement_group0":88,"ENDCASE":89,"DEFAULT":90,"include_statement":91,"INCLUDE":92,"include_statement_group0":93,"include_statement_option0":94,"CHARACTERS":95,"value_expression":96,"grouped_expression":97,"ternary_expression":98,"binary_expression":99,"unary_expression":100,"?":101,"binary_operator":102,"binary_operator_group0":103,"!":104,"variable_expression":105,"literal_expression":106,"property_expression":107,"function_expression":108,"method_expression":109,"bind_expression":110,"new_expression":111,"object_literal":112,"array_literal":113,"number_literal":114,"boolean_literal":115,"key_value_pairs":116,"key_value_pair":117,"key_value_pair_group0":118,"[":119,"]":120,"STRING_LITERAL":121,"NUMBER_LITERAL":122,"BOOLEAN":123,"::":124,"NEW":125,"new_expression_group0":126,"function_literal":127,"=>":128,"parameters":129,"parameter_list":130,".":131,"IDENTIFIER":132,">=":133,"<=":134,"==":135,"!=":136,"+":137,"/":138,"-":139,"&&":140,"||":141,"^":142,"indentifier":143,"$accept":0,"$end":1},
terminals_: {2:"error",8:"EOF",11:"IMPORT",13:"FROM",15:";",21:"AS",22:"*",23:"{",25:"}",27:",",31:"{%",32:"EXPORT",33:"%}",35:"ENDEXPORT",37:"USES",39:"<",42:">",44:"</",45:"/>",49:"=",51:"..",53:"(",55:")",56:":",59:"{{",61:"}}",65:"|",72:"FOR",73:"IN",75:"ENDFOR",76:"ELSE",78:"IF",79:"ENDIF",83:"SWITCH",85:"ENDSWITCH",87:"CASE",89:"ENDCASE",90:"DEFAULT",92:"INCLUDE",95:"CHARACTERS",101:"?",104:"!",119:"[",120:"]",121:"STRING_LITERAL",122:"NUMBER_LITERAL",123:"BOOLEAN",124:"::",125:"NEW",128:"=>",131:".",132:"IDENTIFIER",133:">=",134:"<=",135:"==",136:"!=",137:"+",138:"/",139:"-",140:"&&",141:"||",142:"^",143:"indentifier"},
productions_: [0,[3,5],[9,1],[9,2],[10,5],[12,1],[12,1],[12,1],[12,1],[16,1],[17,3],[18,3],[19,3],[24,1],[24,3],[29,1],[29,2],[30,8],[30,6],[36,2],[34,8],[34,4],[40,1],[41,2],[41,0],[47,3],[47,1],[47,2],[47,5],[48,1],[48,3],[50,1],[50,1],[57,3],[57,4],[63,1],[63,2],[64,2],[64,5],[66,1],[66,2],[67,1],[67,1],[67,1],[67,1],[68,1],[71,7],[71,9],[71,11],[74,4],[74,7],[77,8],[77,6],[80,7],[80,9],[80,7],[81,6],[81,6],[82,8],[84,1],[84,2],[86,8],[86,8],[91,5],[69,1],[38,1],[38,3],[62,1],[62,1],[62,1],[62,1],[62,1],[97,3],[98,5],[99,3],[99,3],[102,1],[100,2],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[105,1],[106,1],[106,1],[106,1],[106,1],[106,1],[112,2],[112,3],[116,1],[116,3],[117,3],[113,2],[113,3],[14,1],[114,1],[115,1],[108,4],[108,3],[109,4],[109,3],[107,1],[110,3],[110,6],[110,3],[110,6],[111,5],[127,3],[127,3],[129,2],[129,3],[129,3],[130,3],[130,3],[52,3],[52,3],[20,1],[4,0],[4,1],[5,0],[5,1],[6,0],[6,1],[7,0],[7,1],[26,1],[26,1],[28,1],[28,1],[43,0],[43,1],[46,1],[46,1],[54,1],[54,1],[58,1],[58,1],[60,1],[60,1],[70,1],[70,1],[70,1],[70,1],[88,1],[88,1],[88,1],[93,1],[93,1],[93,1],[93,1],[94,0],[94,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[118,1],[118,1],[126,1],[126,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ =
            new yy.ast.Module(
            $$[$0-4] || [],
            $$[$0-3] || [],
            $$[$0-2] || [],
            $$[$0-1] || null, this._$); return this.$;
            
break;
case 2:
this.$ =  [$$[$0]];         
break;
case 3: case 36: case 40: case 60:
this.$ = $$[$0-1].concat($$[$0]); 
break;
case 4:
this.$ = new yy.ast.ImportStatement($$[$0-3], $$[$0-1], this._$);
break;
case 9:
this.$ = new yy.ast.DefaultMember($$[$0], this._$);
break;
case 10:
this.$ = new yy.ast.AliasMember($$[$0-2], $$[$0], this._$);
break;
case 11:
this.$ = new yy.ast.AggregateMember($$[$0], this._$);
break;
case 12:
this.$ = new yy.ast.CompositeMember($$[$0-1], this._$);
break;
case 13:
this.$ = [$$[$0]];
break;
case 14:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 15: case 93:
this.$ = [$$[$0]]; 
break;
case 16: case 23:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 17:
this.$ = new yy.ast.ExportStatement($$[$0-5], $$[$0-3], this._$);      
break;
case 18:
this.$ = new yy.ast.ExportFromStatement($$[$0-3], $$[$0-1], this._$);  
break;
case 19:
this.$ = $$[$0]; 
break;
case 20:

             yy.help.ensureTagsMatch($$[$0-6], $$[$0]);
             this.$ = new yy.ast.Tag($$[$0-6], $$[$0-5], $$[$0-3]?$$[$0-3]:[], this._$);
             
break;
case 21:
 this.$ = new yy.ast.Tag($$[$0-2], $$[$0-1], [], this._$); 
break;
case 22: case 31: case 32: case 45: case 120:
this.$ = $$[$0];
break;
case 24:
this.$ = [];
break;
case 25:
this.$ = new yy.ast.Attribute($$[$0-2].name, $$[$0-2].namespace, $$[$0], this._$);
break;
case 26:
this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace,
            new yy.ast.BooleanLiteral(true, this._$),this._$);
break;
case 27:
this.$ = new yy.ast.AttributeSpread($$[$0], '', this._$);
break;
case 28:
this.$ = new yy.ast.AttributeSpread($$[$0], $$[$0-2],  this._$);
break;
case 29:
this.$ = {namespace:null, name:$$[$0]};
break;
case 30:
this.$ = {namespace:$$[$0-2], name:$$[$0]};
break;
case 33:
this.$ = new yy.ast.Interpolation($$[$0-1], [], this._$);
break;
case 34:
this.$ = new yy.ast.Interpolation($$[$0-2], $$[$0-1], this._$);
break;
case 35:
this.$ =  [$$[$0]];     
break;
case 37:
this.$ = new yy.ast.Filter($$[$0], [], this._$);
break;
case 38:
this.$ = new yy.ast.Filter($$[$0-3], $$[$0-1], this._$);
break;
case 39: case 59: case 65:
this.$ = [$$[$0]];          
break;
case 46:
this.$ = new yy.ast.ForStatement($$[$0-4], 'index', 'array', $$[$0-2], $$[$0], this._$);
break;
case 47:
this.$ = new yy.ast.ForStatement($$[$0-6], $$[$0-4], 'array', $$[$0-2], $$[$0], this._$);
break;
case 48:
this.$ = new yy.ast.ForStatement($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2], $$[$0], this._$);
break;
case 49: case 50:
this.$ = $$[$0-3];
break;
case 51:
this.$ = new yy.ast.IfStatement($$[$0-5], $$[$0-3], null, this._$); 
break;
case 52:
this.$ = new yy.ast.IfStatement($$[$0-3], $$[$0-1], $$[$0], this._$); 
break;
case 53:
this.$ = new yy.ast.ElseClause($$[$0-3], this._$);                              
break;
case 54:
this.$ = new yy.ast.ElseIfClause($$[$0-5], $$[$0-3], null,  this._$);                 
break;
case 55:
this.$ = new yy.ast.ElseIfClause($$[$0-3], $$[$0-1], $$[$0], this._$);                    
break;
case 56:
this.$ = new yy.ast.ElseIfStatement($$[$0-2], $$[$0], this._$);           
break;
case 58:
this.$ = new yy.ast.SwitchStatement($$[$0-5], $$[$0-3], this._$);
break;
case 61:
this.$ = new yy.ast.CaseStatement($$[$0-5], $$[$0-3], this._$);
break;
case 62:
this.$ = new yy.ast.CaseStatement(null, $$[$0-3], this._$);
break;
case 63:
this.$ = new yy.ast.IncludeStatement($$[$0-2], $$[$0-1]? $$[$0-1] : null, this._$);
break;
case 64:
this.$ = new yy.ast.Characters($$[$0], this._$); 
break;
case 66: case 94:
this.$ = $$[$0-2].concat($$[$0]); 
break;
case 72:
this.$ = $$[$0-1];
break;
case 73:
this.$ = new yy.ast.TernaryExpression($$[$0-4], $$[$0-2], $$[$0], this._$);
break;
case 74: case 75:
this.$ = new yy.ast.BinaryExpression($$[$0-2], $$[$0-1], $$[$0], this._$);
break;
case 76:
 this.$ = yy.help.convertOperator($$[$0]);
break;
case 77:
this.$ = new yy.ast.UnaryExpression($$[$0-1], $$[$0], this._$);
break;
case 85:
this.$ = new yy.ast.VariableExpression($$[$0], this._$); 
break;
case 91:
this.$ = new yy.ast.ObjectLiteral([], this._$); 
break;
case 92:
this.$ = new yy.ast.ObjectLiteral($$[$0-1], this._$); 
break;
case 95:
this.$ = {key:$$[$0-2], value:$$[$0]}; 
break;
case 96:
this.$ = new yy.ast.ArrayLiteral([], this._$); 
break;
case 97:
this.$ = new yy.ast.ArrayLiteral($$[$0-1], this._$); 
break;
case 98:
this.$ = new yy.ast.StringLiteral($$[$0], this._$); 
break;
case 99:
this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$); 
break;
case 100:
this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
break;
case 101:
this.$ = new yy.ast.FunctionExpression($$[$0-3], $$[$0-1], this._$);
break;
case 102:
this.$ = new yy.ast.FunctionExpression($$[$0-2], [], this._$);
break;
case 103:
this.$ = new yy.ast.MethodExpression($$[$0-3], $$[$0-1], this._$);
break;
case 104:
this.$ = new yy.ast.MethodExpression($$[$0-2], [], this._$);
break;
case 105:
this.$ = new yy.ast.PropertyExpression($$[$0], this._$); 
break;
case 106:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [] , this._$);
break;
case 107:
this.$ = new yy.ast.BindExpression($$[$0-5], $$[$0-3], $$[$0-1] , this._$);
break;
case 108:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [], this._$);
break;
case 109:
this.$ = new yy.ast.BindExpression($$[$0-5], $$[$0-3], $$[$0-1], this._$);
break;
case 110:
this.$ = new yy.ast.NewExpression($$[$0-3], $$[$0-1], this._$);
break;
case 111:
this.$ = new yy.ast.FunctionLiteral([$$[$0-2]], $$[$0], this._$);   
break;
case 112:
this.$ = new yy.ast.FunctionLiteral($$[$0-2], $$[$0], this._$);   
break;
case 113:
this.$ = [];                                       
break;
case 114:
this.$ = [$$[$0-1]];                                     
break;
case 115:
this.$ = $$[$0-1];                                       
break;
case 116:
this.$ = [$$[$0-2], $$[$0]];                                 
break;
case 117:
this.$ = $$[$0-2].concat($$[$0]);                            
break;
case 118: case 119:
this.$ = $$[$0-2]+'.'+$$[$0];               
break;
}
},
table: [o($V0,[2,121],{3:1,4:2,9:3,10:4,11:$V1}),{1:[3]},o($V2,[2,123],{5:6,36:7,37:[1,8]}),o($V0,[2,122],{10:9,11:$V1}),o($V3,[2,2]),{12:10,16:11,17:12,18:13,19:14,20:15,22:[1,16],23:[1,17],132:$V4},o($V5,[2,125],{6:19,29:20,30:21,31:$V6}),o($V2,[2,124]),{14:35,20:32,23:$V7,38:23,52:38,96:24,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},o($V3,[2,3]),{13:[1,45]},{13:[2,5]},{13:[2,6]},{13:[2,7]},{13:[2,8]},o($Vd,[2,9],{21:[1,46]}),{21:[1,47]},{16:50,17:51,20:15,24:48,26:49,132:$V4},o([8,13,21,25,27,31,33,39,42,45,49,51,53,55,56,61,65,73,101,119,120,124,128,131,132,133,134,135,136,137,138,139,140,141,142],[2,120]),{7:52,8:[2,127],34:53,39:$Ve},o($V5,[2,126],{30:55,31:$V6}),o($V2,[2,15]),{32:[1,56]},o($V2,[2,19],{27:$Vf}),o($Vg,[2,65]),o($Vh,[2,78]),o($Vh,[2,79]),o($Vh,[2,80]),o($Vh,[2,81]),o($Vh,[2,82]),o($Vh,[2,83]),o($Vh,[2,84]),o($Vh,$Vi,{53:$Vj,124:$Vk,131:$Vl}),o($Vh,[2,86]),o($Vh,[2,87]),o($Vh,[2,88]),o($Vh,[2,89]),o($Vh,[2,90]),o($Vh,$Vm,{53:$Vn,124:[1,62]}),{20:66,52:65,126:63,132:$V4,143:[1,64]},{20:71,25:[1,67],116:68,117:69,118:70,121:$Vo,132:$V4},{14:35,20:32,23:$V7,38:74,52:38,96:24,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,120:[1,73],121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},o([8,15,25,27,31,33,39,42,45,49,51,55,56,61,65,101,120,132,133,134,135,136,137,138,139,140,141,142],[2,98]),o([8,25,27,31,33,39,42,45,49,51,55,56,61,65,101,120,132,133,134,135,136,137,138,139,140,141,142],[2,99]),o($Vh,[2,100]),{14:75,121:$V9},{20:76,132:$V4},{20:77,132:$V4},{25:[1,78],27:[1,79]},o($Vp,[2,13]),o($Vp,[2,129]),o($Vp,[2,130]),{8:[1,80]},{8:[2,128]},{20:83,40:81,46:82,52:84,132:$V4},o($V2,[2,16]),{20:85,132:$V4},{14:35,20:32,23:$V7,52:38,96:86,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{14:35,20:32,23:$V7,38:87,52:38,55:[1,88],96:24,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{20:89,132:$V4},{20:90,52:91,132:$V4},{14:35,20:32,23:$V7,38:92,52:38,55:[1,93],96:24,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{20:94,132:$V4},{53:[1,95]},{53:[2,171]},{53:[2,172]},{131:$Vl},o($Vh,[2,91]),{25:[1,96],27:[1,97]},o($Vp,[2,93]),{56:[1,98]},{56:[2,169]},{56:[2,170]},o($Vh,[2,96]),{27:$Vf,120:[1,99]},{15:[1,100]},o($Vd,[2,10]),{13:[2,11]},{13:[2,12]},{16:102,17:103,20:15,28:101,132:$V4},{1:[2,1]},o($Vq,[2,24],{41:104}),o($Vr,[2,22]),o($Vr,[2,135],{131:$Vl}),o($Vr,[2,136]),{13:[1,106],33:[1,105]},o($Vg,[2,66]),{27:$Vf,55:[1,107]},o($Vs,[2,102]),o($Vh,[2,106],{53:[1,108]}),o($Vt,[2,118],{131:$Vl}),o($Vt,[2,119]),{27:$Vf,55:[1,109]},o($Vs,[2,104]),o($Vh,[2,108],{53:[1,110]}),{14:35,20:32,23:$V7,38:111,52:38,96:24,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},o($Vh,[2,92]),{20:71,117:112,118:70,121:$Vo,132:$V4},{14:35,20:32,23:$V7,52:38,53:$Vu,62:113,96:118,97:114,98:115,99:116,100:117,104:$Vv,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},o($Vh,[2,97]),o($V3,[2,4]),o($Vp,[2,14]),o($Vp,[2,131]),o($Vp,[2,132]),{20:126,42:[1,121],45:[1,122],47:123,48:124,51:[1,125],132:$V4},{34:127,39:$Ve},{14:128,121:$V9},o($Vs,[2,101]),{14:35,20:32,23:$V7,38:129,52:38,96:24,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},o($Vs,[2,103]),{14:35,20:32,23:$V7,38:130,52:38,96:24,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{27:$Vf,55:[1,131]},o($Vp,[2,94]),o($Vp,[2,95],{101:$Vw}),o($Vx,[2,67],{102:133,103:134,39:$Vy,42:$Vz,49:$VA,133:$VB,134:$VC,135:$VD,136:$VE,137:$VF,138:$VG,139:$VH,140:$VI,141:$VJ,142:$VK}),o($Vx,[2,68]),o($Vx,[2,69]),o($Vx,[2,70]),o($Vx,[2,71],{103:134,102:148,39:$Vy,42:$Vz,49:$VA,133:$VB,134:$VC,135:$VD,136:$VE,137:$VF,138:$VG,139:$VH,140:$VI,141:$VJ,142:$VK}),{14:35,20:32,23:$V7,52:38,53:$Vu,96:150,97:151,99:149,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{14:35,20:32,23:$V7,52:38,53:$Vu,62:152,96:118,97:114,98:115,99:116,100:117,104:$Vv,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{31:$VL,34:156,39:$Ve,43:153,44:[2,133],57:158,59:$VM,66:154,67:155,68:157,69:159,70:160,71:163,77:164,82:165,91:166,95:$VN},o($VO,[2,21]),o($Vq,[2,23]),o($Vq,[2,26],{49:[1,168]}),{20:66,52:169,53:[1,170],132:$V4},o($VP,[2,29],{56:[1,171]}),{31:[1,172]},{33:[1,173]},{27:$Vf,55:[1,174]},{27:$Vf,55:[1,175]},o($Vh,[2,110]),{14:35,20:32,23:$V7,52:38,53:$Vu,62:176,96:118,97:114,98:115,99:116,100:117,104:$Vv,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{53:$Vu,97:177},o($VQ,[2,76]),o($VQ,[2,156]),o($VQ,[2,157]),o($VQ,[2,158]),o($VQ,[2,159]),o($VQ,[2,160]),o($VQ,[2,161]),o($VQ,[2,162]),o($VQ,[2,163]),o($VQ,[2,164]),o($VQ,[2,165]),o($VQ,[2,166]),o($VQ,[2,167]),o($VQ,[2,168]),{14:35,20:32,23:$V7,52:38,96:178,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{55:[1,179]},{39:$Vy,42:$Vz,49:$VA,102:148,103:134,133:$VB,134:$VC,135:$VD,136:$VE,137:$VF,138:$VG,139:$VH,140:$VI,141:$VJ,142:$VK},{39:$Vy,42:$Vz,49:$VA,102:133,103:134,133:$VB,134:$VC,135:$VD,136:$VE,137:$VF,138:$VG,139:$VH,140:$VI,141:$VJ,142:$VK},o($Vx,[2,77]),{44:[1,180]},{31:$VL,34:156,39:$Ve,44:[2,134],57:158,59:$VM,67:181,68:157,69:159,70:160,71:163,77:164,82:165,91:166,95:$VN},o($VR,[2,39]),o($VR,[2,41]),o($VR,[2,42]),o($VR,[2,43]),o($VR,[2,44]),o($VR,[2,45]),{14:35,20:185,23:$V7,52:38,53:[1,187],60:182,62:183,96:118,97:114,98:115,99:116,100:117,104:$Vv,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,127:184,129:186,132:$V4},o($VR,[2,64]),o($VR,[2,143]),o($VR,[2,144]),o($VR,[2,145]),o($VR,[2,146]),{72:$VS,78:$VT,83:$VU,92:$VV},{14:195,50:192,57:193,58:194,59:$VM,114:196,121:$V9,122:$Va},o($Vq,[2,27]),{20:199,52:198,54:197,132:$V4},{20:200,132:$V4},{35:[1,201]},o($V2,[2,18]),o($Vh,[2,107]),o($Vh,[2,109]),{56:[1,202],101:$Vw},o($VW,[2,75]),o($VW,[2,74]),o([25,27,33,39,42,49,55,56,61,65,101,133,134,135,136,137,138,139,140,141,142],[2,72]),{20:83,40:203,46:82,52:84,132:$V4},o($VR,[2,40]),{61:[1,204]},{61:[2,141],63:205,64:206,65:$VX,101:$Vw},{61:[2,142]},o([39,42,49,61,65,101,133,134,135,136,137,138,139,140,141,142],$Vi,{53:$Vj,124:$Vk,128:[1,208],131:$Vl}),{128:[1,209]},{14:35,20:211,23:$V7,52:38,53:$Vu,55:[1,210],96:150,97:151,99:149,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,130:212,132:$V4},{20:213,132:$V4},{14:35,20:32,23:$V7,52:38,53:$Vu,62:214,96:118,97:114,98:115,99:116,100:117,104:$Vv,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{14:35,20:32,23:$V7,52:38,53:$Vu,62:215,96:118,97:114,98:115,99:116,100:117,104:$Vv,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{20:221,52:222,93:216,105:217,107:218,108:219,109:220,132:$V4},o($Vq,[2,25]),o($Vq,[2,31]),o($Vq,[2,32]),o($Vq,[2,139]),o($Vq,[2,140]),{55:[1,223]},{55:[2,137]},{55:[2,138],131:$Vl},o($VP,[2,30]),{33:[1,224]},{14:35,20:32,23:$V7,52:38,53:$Vu,62:225,96:118,97:114,98:115,99:116,100:117,104:$Vv,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{42:[1,226]},o($VY,[2,33]),{61:[1,227],64:228,65:$VX},o($VZ,[2,35]),{20:83,40:229,46:82,52:84,132:$V4},{14:35,20:32,23:$V7,52:38,53:$Vu,62:230,96:118,97:114,98:115,99:116,100:117,104:$Vv,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{14:35,20:32,23:$V7,52:38,53:$Vu,62:231,96:118,97:114,98:115,99:116,100:117,104:$Vv,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{128:[2,113]},o([39,42,49,133,134,135,136,137,138,139,140,141,142],$Vi,{27:[1,233],53:$Vj,55:[1,232],124:$Vk,131:$Vl}),{27:[1,235],55:[1,234]},{27:[1,237],73:[1,236]},{33:[1,238],101:$Vw},{33:[1,239],101:$Vw},{33:[2,154],94:240,113:241,119:$V8},o($V_,[2,150]),o($V_,[2,151]),o($V_,[2,152]),o($V_,[2,153]),o($V_,$Vi,{53:$Vj,131:$Vl}),o($V_,$Vm,{53:$Vn}),{20:66,52:242,132:$V4},o($V2,[2,17]),o([25,27,33,56,61,65],[2,73],{101:$Vw}),o($VO,[2,20]),o($VY,[2,34]),o($VZ,[2,36]),o($VZ,[2,37],{53:[1,243]}),{61:[2,111],101:$Vw},{61:[2,112],101:$Vw},{128:[2,114]},{20:244,132:$V4},{128:[2,115]},{20:245,132:$V4},{14:35,20:32,23:$V7,52:38,53:$Vu,62:246,96:118,97:114,98:115,99:116,100:117,104:$Vv,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{20:247,132:$V4},{31:$VL,34:156,39:$Ve,57:158,59:$VM,66:248,67:155,68:157,69:159,70:160,71:163,77:164,82:165,91:166,95:$VN},{31:[1,251],84:249,86:250},{33:[1,252]},{33:[2,155]},o($Vq,[2,28]),{14:35,20:32,23:$V7,38:253,52:38,96:24,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},o($V$,[2,116]),o($V$,[2,117]),{33:[1,254],101:$Vw},{27:[1,256],73:[1,255]},{31:[1,257],34:156,39:$Ve,57:158,59:$VM,67:181,68:157,69:159,70:160,71:163,77:164,80:258,82:165,91:166,95:$VN},{31:[1,259],86:260},{31:[2,59]},{87:$V01,90:$V11},o($VR,[2,63]),{27:$Vf,55:[1,263]},{31:$V21,34:156,39:$Ve,57:158,59:$VM,66:265,67:155,68:157,69:159,70:160,71:163,74:264,77:164,82:165,91:166,95:$VN},{14:35,20:32,23:$V7,52:38,53:$Vu,62:267,96:118,97:114,98:115,99:116,100:117,104:$Vv,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},{20:268,132:$V4},{72:$VS,76:$V31,78:$VT,79:[1,269],83:$VU,92:$VV},o($VR,[2,52]),{85:[1,271],87:$V01,90:$V11},{31:[2,60]},{14:273,88:272,114:274,115:275,121:$V9,122:$Va,123:$Vb},{87:[1,276]},o($VZ,[2,38]),o($VR,[2,46]),{31:[1,277],34:156,39:$Ve,57:158,59:$VM,67:181,68:157,69:159,70:160,71:163,77:164,82:165,91:166,95:$VN},{72:$VS,76:[1,278],78:$VT,83:$VU,92:$VV},{33:[1,279],101:$Vw},{73:[1,280]},{33:[1,281]},{33:[1,282],78:[1,283]},{33:[1,284]},{33:[1,285]},{33:[2,147]},{33:[2,148]},{33:[2,149]},{33:[1,286]},{72:$VS,75:[1,287],78:$VT,83:$VU,92:$VV},{33:[1,288]},{31:$V21,34:156,39:$Ve,57:158,59:$VM,66:265,67:155,68:157,69:159,70:160,71:163,74:289,77:164,82:165,91:166,95:$VN},{14:35,20:32,23:$V7,52:38,53:$Vu,62:290,96:118,97:114,98:115,99:116,100:117,104:$Vv,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},o($VR,[2,51]),{31:$VL,34:156,39:$Ve,57:158,59:$VM,66:291,67:155,68:157,69:159,70:160,71:163,77:164,82:165,91:166,95:$VN},{14:35,20:32,23:$V7,52:38,53:$Vu,62:292,96:118,97:114,98:115,99:116,100:117,104:$Vv,105:25,106:26,107:27,108:28,109:29,110:30,111:31,112:33,113:34,114:36,115:37,119:$V8,121:$V9,122:$Va,123:$Vb,125:$Vc,132:$V4},o($VR,[2,58]),{31:$VL,34:156,39:$Ve,57:158,59:$VM,66:293,67:155,68:157,69:159,70:160,71:163,77:164,82:165,91:166,95:$VN},{31:$VL,34:156,39:$Ve,57:158,59:$VM,66:294,67:155,68:157,69:159,70:160,71:163,77:164,82:165,91:166,95:$VN},{33:[1,295]},{31:$VL,34:156,39:$Ve,57:158,59:$VM,66:296,67:155,68:157,69:159,70:160,71:163,77:164,82:165,91:166,95:$VN},o($VR,[2,47]),{33:[1,297],101:$Vw},{31:[1,298],34:156,39:$Ve,57:158,59:$VM,67:181,68:157,69:159,70:160,71:163,77:164,82:165,91:166,95:$VN},{33:[1,299],101:$Vw},{31:[1,300],34:156,39:$Ve,57:158,59:$VM,67:181,68:157,69:159,70:160,71:163,77:164,82:165,91:166,95:$VN},{31:[1,301],34:156,39:$Ve,57:158,59:$VM,67:181,68:157,69:159,70:160,71:163,77:164,82:165,91:166,95:$VN},o($VR,[2,49]),{31:[1,302],34:156,39:$Ve,57:158,59:$VM,67:181,68:157,69:159,70:160,71:163,77:164,82:165,91:166,95:$VN},{31:$V21,34:156,39:$Ve,57:158,59:$VM,66:265,67:155,68:157,69:159,70:160,71:163,74:303,77:164,82:165,91:166,95:$VN},{72:$VS,78:$VT,79:[1,304],83:$VU,92:$VV},{31:$VL,34:156,39:$Ve,57:158,59:$VM,66:305,67:155,68:157,69:159,70:160,71:163,77:164,82:165,91:166,95:$VN},{72:$VS,78:$VT,83:$VU,89:[1,306],92:$VV},{72:$VS,78:$VT,83:$VU,89:[1,307],92:$VV},{72:$VS,75:[1,308],78:$VT,83:$VU,92:$VV},o($VR,[2,48]),{33:[1,309]},{31:[1,310],34:156,39:$Ve,57:158,59:$VM,67:181,68:157,69:159,70:160,71:163,77:164,80:311,82:165,91:166,95:$VN},{33:[1,312]},{33:[1,313]},{33:[1,314]},o($VR,[2,53]),{72:$VS,76:$V31,78:$VT,79:[1,315],83:$VU,92:$VV},o($VR,[2,55]),{31:[2,61]},{31:[2,62]},o($VR,[2,50]),{33:[1,316]},o($VR,[2,54])],
defaultActions: {11:[2,5],12:[2,6],13:[2,7],14:[2,8],53:[2,128],64:[2,171],65:[2,172],71:[2,169],72:[2,170],77:[2,11],78:[2,12],80:[2,1],184:[2,142],198:[2,137],210:[2,113],232:[2,114],234:[2,115],241:[2,155],250:[2,59],260:[2,60],273:[2,147],274:[2,148],275:[2,149],312:[2,61],313:[2,62]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return;
break;
case 1:return 11;
break;
case 2:return 13;
break;
case 3:return 37;
break;
case 4:return 21;
break;
case 5:return 125;
break;
case 6:return 72;
break;
case 7:return 75;
break;
case 8:return 78;
break;
case 9:return 79;
break;
case 10:return 76;
break;
case 11:return 'ELSEIF';
break;
case 12:return 73;
break;
case 13:return 83;
break;
case 14:return 85;
break;
case 15:return 90;
break;
case 16:return 87;
break;
case 17:return 89;
break;
case 18:return 92;
break;
case 19:return 32;
break;
case 20:return 35;
break;
case 21:return 123;
break;
case 22:return 122;
break;
case 23:return 121;
break;
case 24:this.begin('COMMENT');     return;
break;
case 25:this.popState();           return;
break;
case 26:this.popState();           return;
break;
case 27:return 59;
break;
case 28:return 61;
break;
case 29:return 65;
break;
case 30:return 128;
break;
case 31:return 124;
break;
case 32:return '->';
break;
case 33:return 51;
break;
case 34:this.begin('CONTROL');      return 31;
break;
case 35:this.begin('CHILDREN');     return 33;
break;
case 36:return 44;
break;
case 37:this.begin('CHILDREN');     return 45;
break;
case 38:this.begin('CHILDREN');     return 42;
break;
case 39:return 39;
break;
case 40:return 53;
break;
case 41:return 55;
break;
case 42:return 119;
break;
case 43:return 120;
break;
case 44:return 15
break;
case 45:return 56;
break;
case 46:return 49
break;
case 47:return 135;
break;
case 48:return 136;
break;
case 49:return 133;
break;
case 50:return 134;
break;
case 51:return 137;
break;
case 52:return 139;
break;
case 53:return 22;
break;
case 54:return 138;
break;
case 55:return 140;
break;
case 56:return 141;
break;
case 57:return 142;
break;
case 58:return 104;
break;
case 59:return 27;
break;
case 60:return 101;
break;
case 61:return 131;
break;
case 62:return 23;
break;
case 63:return 25;
break;
case 64:return 132;
break;
case 65:this.popState();                    return 59;
break;
case 66:this.begin('CONTROL');              return 31;
break;
case 67:this.popState();                    return 44;
break;
case 68:this.popState();                    return 39;
break;
case 69:this.popState();                    return 95;
break;
case 70:return 8;
break;
case 71:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:import)/,/^(?:from)/,/^(?:uses)/,/^(?:as)/,/^(?:new)/,/^(?:for)/,/^(?:endfor)/,/^(?:if)/,/^(?:endif)/,/^(?:else)/,/^(?:elseif)/,/^(?:in)/,/^(?:switch)/,/^(?:endswitch)/,/^(?:default)/,/^(?:case)/,/^(?:endcase)/,/^(?:include)/,/^(?:export)/,/^(?:endexport)/,/^(?:true|false)/,/^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/,/^(?:<!--)/,/^(?:(.|\r|\n)*?-->)/,/^(?:-->)/,/^(?:\{\{)/,/^(?:\}\})/,/^(?:\|)/,/^(?:=>)/,/^(?:::)/,/^(?:->)/,/^(?:\.\.)/,/^(?:\{%)/,/^(?:%\})/,/^(?:<\/)/,/^(?:\/>)/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\^)/,/^(?:!)/,/^(?:,)/,/^(?:\?)/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/,/^(?:\{\{)/,/^(?:\{%)/,/^(?:<\/)/,/^(?:<)/,/^(?:[^\/<>{%}]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"CONTROL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,70,71],"inclusive":true},"COMMENT":{"rules":[0,25,26,70],"inclusive":false},"CHILDREN":{"rules":[0,24,65,66,67,68,69,70],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,21,22,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ParserImpl;
exports.Parser = ParserImpl.Parser;
exports.parse = function () { return ParserImpl.parse.apply(ParserImpl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}