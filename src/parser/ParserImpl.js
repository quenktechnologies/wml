/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,32,53],$V1=[1,5],$V2=[7,53],$V3=[1,13],$V4=[7,10,32,53],$V5=[1,20],$V6=[1,25],$V7=[12,24,26],$V8=[1,40],$V9=[1,41],$Va=[1,44],$Vb=[1,48],$Vc=[24,26],$Vd=[19,56,59],$Ve=[19,56,59,69,72,101],$Vf=[19,20,24,26,35,37,47,49,53,56,59,60,63,69,72,82,97,101,102,106,113,119,120,132,134,135,136,137,138,139,140,141,142,143],$Vg=[26,49],$Vh=[1,96],$Vi=[1,95],$Vj=[1,90],$Vk=[7,32,53,58,67,104],$Vl=[19,56,59,63],$Vm=[32,53,58,67,104],$Vn=[1,129],$Vo=[1,130],$Vp=[1,111],$Vq=[1,112],$Vr=[1,126],$Vs=[1,127],$Vt=[1,128],$Vu=[1,132],$Vv=[1,133],$Vw=[1,134],$Vx=[1,135],$Vy=[1,136],$Vz=[1,137],$VA=[1,138],$VB=[1,160],$VC=[1,158],$VD=[20,24,26,37,49,53,56,60,63,69,72,97,102,106,134,135,136,137,138,139,140,141,142,143],$VE=[1,163],$VF=[1,168],$VG=[1,167],$VH=[1,166],$VI=[1,169],$VJ=[1,170],$VK=[1,171],$VL=[1,172],$VM=[1,173],$VN=[1,177],$VO=[1,176],$VP=[1,185],$VQ=[1,186],$VR=[19,20,24,26,37,49,53,56,59,60,63,69,72,97,102,106,134,135,136,137,138,139,140,141,142,143],$VS=[1,204],$VT=[26,102,119],$VU=[26,82,102,119],$VV=[19,32,53,56,58,59,67,104],$VW=[69,72],$VX=[1,216],$VY=[20,24,26,37,49,53,56,60,63,69,72,97,102,106,120,134,135,136,137,138,139,140,141,142,143],$VZ=[2,86],$V_=[2,84],$V$=[20,24,26,37,49,53,56,60,63,69,72,97,102,134,135,136,137,138,139,140,141,142,143],$V01=[1,252],$V11=[26,49,102],$V21=[1,271],$V31=[19,22,47,101,108,115,117,119,127,129,132,144,145],$V41=[20,24,26,37,47,49,53,56,60,63,69,72,97,101,102,106,113,120,134,135,136,137,138,139,140,141,142,143],$V51=[2,88],$V61=[1,306],$V71=[1,317];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"module_option0":4,"module_option1":5,"module_option2":6,"EOF":7,"imports":8,"import_statement":9,"IMPORT":10,"import_member":11,"FROM":12,"string_literal":13,"import_statement_option0":14,"default_member":15,"alias_member":16,"aggregate_member":17,"composite_member":18,"IDENTIFIER":19,"AS":20,"*":21,"{":22,"member_list":23,"}":24,"member_list_group0":25,",":26,"member_list_group1":27,"exports":28,"export":29,"export_group0":30,"view_statement":31,"{%":32,"VIEW":33,"identifier":34,"USING":35,"type":36,"%}":37,"tag":38,"ENDVIEW":39,"type_classes":40,"macro_statement":41,"MACRO":42,"children":43,"ENDMACRO":44,"macro_statement_option0":45,"parameters":46,"[":47,"type_class_list":48,"]":49,"type_class":50,"export_from_statement":51,"EXPORT":52,"<":53,"tagname":54,"attributes":55,">":56,"tag_option0":57,"</":58,"/>":59,":":60,"attribute":61,"attribute_name":62,"=":63,"attribute_value":64,"attribute_value_group0":65,"interpolation":66,"{{":67,"expression":68,"}}":69,"filters":70,"filter":71,"|":72,"arguments":73,"child":74,"child_group0":75,"text_interpolation":76,"control":77,"control_group0":78,"for_statement":79,"FOR":80,"typable_identifier":81,"IN":82,"ENDFOR":83,"ELSE":84,"if_statement":85,"IF":86,"ENDIF":87,"else_clause":88,"match_statement":89,"MATCH":90,"case_statements":91,"ENDMATCH":92,"case_statement":93,"CASE":94,"TYPEOF":95,"ENDCASE":96,"INSTANCEOF":97,"call_statement":98,"CALL":99,"member_expression":100,"(":101,")":102,"characters":103,"CHARACTERS":104,"argument_list":105,"?":106,"binary_operator":107,"!":108,"expression_group0":109,"binary_operator_group0":110,"call_expression":111,"bind_expression":112,"::":113,"new_expression":114,"NEW":115,"function_expression":116,"\\\\":117,"parameter_list":118,"=>":119,".":120,"array_literal":121,"object_literal":122,"type_assertion":123,"key_value_pairs":124,"key_value_pair":125,"key_value_pair_group0":126,"STRING_LITERAL":127,"number_literal":128,"NUMBER_LITERAL":129,"boolean_literal":130,"boolean_literal_group0":131,"@":132,";":133,">=":134,"<=":135,"==":136,"!=":137,"+":138,"/":139,"-":140,"&&":141,"||":142,"^":143,"TRUE":144,"FALSE":145,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",10:"IMPORT",12:"FROM",19:"IDENTIFIER",20:"AS",21:"*",22:"{",24:"}",26:",",32:"{%",33:"VIEW",35:"USING",37:"%}",39:"ENDVIEW",42:"MACRO",44:"ENDMACRO",47:"[",49:"]",52:"EXPORT",53:"<",56:">",58:"</",59:"/>",60:":",63:"=",67:"{{",69:"}}",72:"|",80:"FOR",82:"IN",83:"ENDFOR",84:"ELSE",86:"IF",87:"ENDIF",90:"MATCH",92:"ENDMATCH",94:"CASE",95:"TYPEOF",96:"ENDCASE",97:"INSTANCEOF",99:"CALL",101:"(",102:")",104:"CHARACTERS",106:"?",108:"!",113:"::",115:"NEW",117:"\\\\",119:"=>",120:".",127:"STRING_LITERAL",129:"NUMBER_LITERAL",132:"@",133:";",134:">=",135:"<=",136:"==",137:"!=",138:"+",139:"/",140:"-",141:"&&",142:"||",143:"^",144:"TRUE",145:"FALSE"},
productions_: [0,[3,4],[8,1],[8,2],[9,5],[11,1],[11,1],[11,1],[11,1],[15,1],[16,3],[17,3],[18,3],[23,1],[23,3],[28,1],[28,2],[29,1],[31,10],[31,11],[41,8],[41,10],[40,3],[48,1],[48,3],[50,1],[50,2],[51,6],[38,8],[38,4],[54,1],[54,3],[55,2],[55,0],[61,3],[61,1],[62,1],[62,3],[64,1],[66,3],[66,4],[70,1],[70,2],[71,2],[71,3],[43,1],[43,2],[74,1],[76,1],[77,1],[79,10],[79,12],[79,14],[79,14],[79,16],[79,18],[85,8],[85,6],[88,7],[88,9],[88,7],[89,12],[89,8],[91,1],[91,2],[93,9],[93,9],[98,5],[98,4],[98,4],[98,5],[98,7],[98,6],[103,1],[73,2],[73,3],[105,1],[105,3],[68,3],[68,5],[68,5],[68,2],[68,1],[107,1],[111,2],[111,3],[111,2],[111,3],[111,4],[112,3],[112,4],[112,3],[112,4],[114,2],[114,3],[116,4],[116,2],[46,2],[46,3],[118,1],[118,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,5],[100,3],[100,3],[122,2],[122,3],[124,1],[124,3],[125,3],[121,2],[121,3],[13,1],[128,1],[130,1],[81,1],[81,3],[81,5],[81,4],[81,6],[36,1],[36,2],[123,5],[34,1],[34,1],[4,0],[4,1],[5,0],[5,1],[6,0],[6,1],[14,0],[14,1],[25,1],[25,1],[27,1],[27,1],[30,1],[30,1],[30,1],[45,0],[45,1],[57,0],[57,1],[65,1],[65,1],[65,1],[65,1],[75,1],[75,1],[75,1],[75,1],[78,1],[78,1],[78,1],[78,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[126,1],[126,1],[131,1],[131,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ =
            new yy.ast.Module(
            $$[$0-3] || [],
            $$[$0-2] || [],
            $$[$0-1] || null, this._$); return this.$;
            
break;
case 2:
this.$ =  [$$[$0]];         
break;
case 3: case 42: case 46:
this.$ = $$[$0-1].concat($$[$0]); 
break;
case 4:
this.$ = new yy.ast.ImportStatement($$[$0-3], $$[$0-1], this._$);
break;
case 9:
this.$ = new yy.ast.DefaultMember($$[$0], this._$);
break;
case 10:
this.$ = new yy.ast.AliasMember($$[$0-2], $$[$0], this._$);
break;
case 11:
this.$ = new yy.ast.AggregateMember($$[$0], this._$);
break;
case 12:
this.$ = new yy.ast.CompositeMember($$[$0-1], this._$);
break;
case 13:
this.$ = [$$[$0]];
break;
case 14:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 15: case 112:
this.$ = [$$[$0]]; 
break;
case 16: case 32: case 64:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 17: case 30:
this.$ = $$[$0];                                           
break;
case 18:
this.$ = new yy.ast.ViewStatement($$[$0-7], $$[$0-5], [],$$[$0-3], this._$);     
break;
case 19:
this.$ = new yy.ast.ViewStatement($$[$0-7], $$[$0-5], $$[$0-8], $$[$0-3], this._$);     
break;
case 20:
this.$ = new yy.ast.MacroStatement($$[$0-5], [], [], $$[$0-3], this._$);    
break;
case 21:
this.$ = new yy.ast.MacroStatement($$[$0-7], $$[$0-6]||[], $$[$0-5], $$[$0-3], this._$);    
break;
case 22:
this.$ = $$[$0-1]; 
break;
case 23:
this.$ = [$$[$0]];                     
break;
case 24:
this.$ = $$[$0-2].concat($$[$0]);            
break;
case 25: case 38: case 47: case 49:
this.$ = $$[$0];
break;
case 26:
this.$ = new yy.ast.TypedIdentifier($$[$0-1], $$[$0], this._$);
break;
case 27:
this.$ = new yy.ast.ExportFromStatement($$[$0-3], $$[$0-1], this._$);  
break;
case 28:
this.$ = new yy.ast.Tag($$[$0-6], $$[$0-5], $$[$0-3]?$$[$0-3]:[], this._$);
break;
case 29:
 this.$ = new yy.ast.Tag($$[$0-2], $$[$0-1], [], this._$); 
break;
case 31:
this.$ = new yy.ast.MemberExpression($$[$0-2], $$[$0], this._$);      
break;
case 33: case 97:
this.$ = [];
break;
case 34:
this.$ = new yy.ast.Attribute($$[$0-2].name, $$[$0-2].namespace, $$[$0], this._$);
break;
case 35:
this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace,
            new yy.ast.BooleanLiteral(true, this._$),this._$);
break;
case 36:
this.$ = {namespace:null, name:$$[$0]};
break;
case 37:
this.$ = {namespace:$$[$0-2], name:$$[$0]};
break;
case 39:
this.$ = new yy.ast.Interpolation($$[$0-1], [], this._$);
break;
case 40:
this.$ = new yy.ast.Interpolation($$[$0-2], $$[$0-1], this._$);
break;
case 41:
this.$ =  [$$[$0]];     
break;
case 43:
this.$ = new yy.ast.Filter($$[$0], [], this._$);
break;
case 44:
this.$ = new yy.ast.Filter($$[$0-1], $$[$0], this._$);
break;
case 45:
this.$ = [$$[$0]];          
break;
case 48:
this.$ = new yy.ast.TextInterpolation($$[$0], this._$);
break;
case 50:
this.$ = new yy.ast.ForStatement($$[$0-7], null, null, $$[$0-5], $$[$0-3], [], this._$);
break;
case 51:
this.$ = new yy.ast.ForStatement($$[$0-9], $$[$0-7], null, $$[$0-5], $$[$0-3], [], this._$);
break;
case 52:
this.$ = new yy.ast.ForStatement($$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-3], [], this._$);
break;
case 53:
this.$ = new yy.ast.ForStatement($$[$0-11], null, null, $$[$0-9], $$[$0-7], $$[$0-3], this._$);
break;
case 54:
this.$ = new yy.ast.ForStatement($$[$0-13], $$[$0-11], null, $$[$0-9], $$[$0-7], $$[$0-3], this._$);
break;
case 55:
this.$ = new yy.ast.ForStatement($$[$0-15], $$[$0-13], null, $$[$0-11], $$[$0-9], $$[$0-3], this._$);
break;
case 56:
this.$ = new yy.ast.IfStatement($$[$0-5], $$[$0-3], null, this._$); 
break;
case 57:
this.$ = new yy.ast.IfStatement($$[$0-3], $$[$0-1], $$[$0], this._$); 
break;
case 58:
this.$ = new yy.ast.ElseClause($$[$0-3], this._$);                              
break;
case 59:
this.$ = new yy.ast.ElseIfClause($$[$0-5], $$[$0-3], null,  this._$);                 
break;
case 60:
this.$ = new yy.ast.ElseIfClause($$[$0-3], $$[$0-1], $$[$0], this._$);                    
break;
case 61:
this.$ = new yy.ast.MatchStatement($$[$0-9], $$[$0-7], $$[$0-3], this._$);
break;
case 62:
this.$ = new yy.ast.MatchStatement($$[$0-5], $$[$0-3], [], this._$);
break;
case 63:
this.$ = [$$[$0]];         
break;
case 65:
this.$ = new yy.ast.TypeOfCaseStatement($$[$0-5], $$[$0-3], this._$);
break;
case 66:
this.$ = new yy.ast.InstanceOfCaseStatement($$[$0-5], $$[$0-3], this._$);
break;
case 67: case 70:
this.$ = new yy.ast.CallStatement($$[$0-2], $$[$0-1], this._$);
break;
case 68: case 69:
this.$ = new yy.ast.CallStatement($$[$0-1], [], this._$);
break;
case 71:
this.$ = new yy.ast.CallStatement($$[$0-3], $$[$0-1], this._$);
break;
case 72:
this.$ = new yy.ast.CallStatement($$[$0-2], [], this._$);
break;
case 73:
this.$ = new yy.ast.Characters($$[$0], this._$); 
break;
case 74:
this.$ = [];                                      
break;
case 75:
this.$ = $$[$0-1];                                      
break;
case 76:
this.$ = [$$[$0]];                                    
break;
case 77:
this.$ = $$[$0-2].concat($$[$0]);                           
break;
case 78:
 this.$ = $$[$0-1];                                         
break;
case 79:
this.$ = new yy.ast.TernaryExpression($$[$0-4], $$[$0-2], $$[$0], this._$);
break;
case 80:
this.$ = new yy.ast.BinaryExpression($$[$0-3], $$[$0-2], $$[$0-1], this._$); 
break;
case 81:
this.$ = new yy.ast.UnaryExpression($$[$0-1], $$[$0], this._$);      
break;
case 82:
this.$ = $$[$0];                                          
break;
case 83:
 this.$ = yy.help.convertOperator($$[$0]);
break;
case 84: case 86:
this.$ = new yy.ast.CallExpression($$[$0-1], [], $$[$0], this._$);    
break;
case 85: case 87:
this.$ = new yy.ast.CallExpression($$[$0-2], $$[$0-1], $$[$0], this._$);    
break;
case 88:
this.$ = new yy.ast.CallExpression($$[$0-2], [], $$[$0], this._$);    
break;
case 89:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [] , this._$);
break;
case 90:
this.$ = new yy.ast.BindExpression($$[$0-3], $$[$0-1], $$[$0] , this._$);
break;
case 91:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [], this._$);
break;
case 92:
this.$ = new yy.ast.BindExpression($$[$0-3], $$[$0-1], $$[$0], this._$);
break;
case 93:
this.$ = new yy.ast.NewExpression($$[$0], [], this._$);
break;
case 94:
this.$ = new yy.ast.NewExpression($$[$0-1], $$[$0], this._$);
break;
case 95:
this.$ = new yy.ast.FunctionExpression($$[$0-2], $$[$0], this._$);   
break;
case 96:
this.$ = new yy.ast.FunctionExpression([], $$[$0], this._$);   
break;
case 98:
this.$ = $$[$0-1];
break;
case 99:
this.$ = [$$[$0]];                                     
break;
case 100:
this.$ = $$[$0-2].concat($$[$0]);                            
break;
case 101: case 102: case 103: case 104: case 105: case 106: case 108: case 109:
this.$ = new yy.ast.MemberExpression($$[$0-2], $$[$0], this._$); 
break;
case 107:
this.$ = new yy.ast.MemberExpression($$[$0-3], $$[$0], this._$); 
break;
case 110:
this.$ = new yy.ast.ObjectLiteral([], this._$); 
break;
case 111:
this.$ = new yy.ast.ObjectLiteral($$[$0-1], this._$); 
break;
case 113:
this.$ = $$[$0-2].concat($$[$0]); 
break;
case 114:
this.$ = {key:$$[$0-2], value:$$[$0]}; 
break;
case 115:
this.$ = new yy.ast.ArrayLiteral([], this._$); 
break;
case 116:
this.$ = new yy.ast.ArrayLiteral($$[$0-1], this._$); 
break;
case 117:
this.$ = new yy.ast.StringLiteral($$[$0], this._$); 
break;
case 118:
this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$); 
break;
case 119:
this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
break;
case 120:
this.$ = $$[$0];                                                      
break;
case 121:
this.$ = new yy.ast.TypableIdentifier($$[$0-2], $$[$0], [], false, this._$);     
break;
case 122:
this.$ = new yy.ast.TypableIdentifier($$[$0-4], $$[$0-2], [], true, this._$);      
break;
case 123:
this.$ = new yy.ast.TypableIdentifier($$[$0-3], $$[$0-1], $$[$0], false, this._$);     
break;
case 124:
this.$ = new yy.ast.TypableIdentifier($$[$0-5], $$[$0-3], $$[$0-2], true, this._$);      
break;
case 125:
this.$ = new yy.ast.Type($$[$0], [], this._$);                             
break;
case 126:
this.$ = new yy.ast.Type($$[$0-1], $$[$0], this._$);                             
break;
case 127:
this.$ = new yy.ast.TypeAssertion($$[$0-3], $$[$0-1], this._$);          
break;
case 128:
this.$ = new yy.ast.Identifier($$[$0], '', this._$);             
break;
case 129:
this.$ = new yy.ast.Identifier('this.attributes','', this._$)
break;
}
},
table: [o($V0,[2,130],{3:1,4:2,8:3,9:4,10:$V1}),{1:[3]},o($V2,[2,132],{5:6,28:7,29:8,30:9,31:10,41:11,51:12,32:$V3}),o($V0,[2,131],{9:14,10:$V1}),o($V4,[2,2]),{11:15,15:16,16:17,17:18,18:19,19:$V5,21:[1,21],22:[1,22]},{6:23,7:[2,134],38:24,53:$V6},o($V2,[2,133],{30:9,31:10,41:11,51:12,29:26,32:$V3}),o($V0,[2,15]),o($V0,[2,17]),o($V0,[2,142]),o($V0,[2,143]),o($V0,[2,144]),{33:[1,27],42:[1,28],52:[1,29]},o($V4,[2,3]),{12:[1,30]},{12:[2,5]},{12:[2,6]},{12:[2,7]},{12:[2,8]},o($V7,[2,9],{20:[1,31]}),{20:[1,32]},{15:35,16:36,19:$V5,23:33,25:34},{7:[1,37]},{7:[2,135]},{19:$V8,34:39,54:38,132:$V9},o($V0,[2,16]),{19:$V8,34:42,40:43,47:$Va,132:$V9},{19:[1,45]},{19:[1,46]},{13:47,127:$Vb},{19:[1,49]},{19:[1,50]},{24:[1,51],26:[1,52]},o($Vc,[2,13]),o($Vc,[2,138]),o($Vc,[2,139]),{1:[2,1]},o($Vd,[2,33],{55:53}),o($Ve,[2,30],{60:[1,54]}),o($Vf,[2,128]),o($Vf,[2,129]),{35:[1,55]},{19:$V8,34:56,132:$V9},{19:$V8,34:59,48:57,50:58,132:$V9},{37:[1,60],40:62,45:61,47:$Va,101:[2,145]},{12:[1,63]},o($V4,[2,136],{14:64,133:[1,65]}),o([7,10,19,20,24,26,32,37,49,53,56,59,60,63,69,72,97,102,106,120,133,134,135,136,137,138,139,140,141,142,143],[2,117]),o($V7,[2,10]),{12:[2,11]},{12:[2,12]},{15:67,16:68,19:$V5,27:66},{19:[1,73],56:[1,69],59:[1,70],61:71,62:72},{19:$V8,34:74,132:$V9},{19:$V8,34:76,36:75,132:$V9},{35:[1,77]},{26:[1,79],49:[1,78]},o($Vg,[2,23]),o($Vg,[2,25],{34:59,50:80,19:$V8,132:$V9}),{32:$Vh,38:84,43:81,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{46:97,101:[1,98]},{101:[2,146]},{13:99,127:$Vb},o($V4,[2,4]),o($V4,[2,137]),o($Vc,[2,14]),o($Vc,[2,140]),o($Vc,[2,141]),{32:$Vh,38:84,43:101,53:$V6,57:100,58:[2,147],66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},o($Vk,[2,29]),o($Vd,[2,32]),o($Vd,[2,35],{63:[1,102]}),o($Vl,[2,36],{60:[1,103]}),o($Ve,[2,31]),{37:[1,104]},{37:[2,125],40:105,47:$Va},{19:$V8,34:76,36:106,132:$V9},o([19,26,37,47,82,101,102,119,132],[2,22]),{19:$V8,34:59,50:107,132:$V9},o($Vg,[2,26]),{32:[1,108],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},o($Vm,[2,45]),o($Vm,[2,47]),o($Vm,[2,153]),o($Vm,[2,154]),o($Vm,[2,155]),o($Vm,[2,156]),o($Vm,[2,49]),o($Vm,[2,48]),o($Vm,[2,73]),o($Vm,[2,157]),o($Vm,[2,158]),o($Vm,[2,159]),o($Vm,[2,160]),{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:110,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},{80:$Vx,86:$Vy,90:$Vz,99:$VA},{37:[1,139]},{19:$V8,34:143,81:142,102:[1,140],118:141,132:$V9},{37:[1,144]},{58:[1,145]},{32:$Vh,38:84,53:$V6,58:[2,148],66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{13:149,64:146,65:147,66:148,67:$Vi,127:$Vb,128:150,129:$Vu,130:151,131:131,144:$Vv,145:$Vw},{19:[1,152]},{38:153,53:$V6},{37:[2,126]},{37:[1,154]},o($Vg,[2,24]),{44:[1,155],80:$Vx,86:$Vy,90:$Vz,99:$VA},o($Vm,[2,46]),{69:[1,156],70:157,71:159,72:$VB,106:$VC},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:161,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:162,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},o($VD,[2,82]),o($VD,[2,161]),o($VD,[2,162],{120:$VE}),o($VD,[2,163],{73:164,40:165,47:$Va,101:$VF,113:$VG,120:$VH}),o($VD,[2,164]),o($VD,[2,165],{120:$VI}),o($VD,[2,166],{120:$VJ}),o($VD,[2,167],{120:$VK}),o($VD,[2,168],{120:$VL}),o($VD,[2,169]),o($VD,[2,170]),o($VD,[2,171],{120:$VM}),o($VD,[2,172],{73:174,40:175,47:$Va,101:$VF,113:$VN,120:$VO}),{19:$V8,34:178,132:$V9},{19:$V8,34:143,81:142,118:179,132:$V9},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:180,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},{19:$VP,24:[1,181],124:182,125:183,126:184,127:$VQ},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,49:[1,187],68:189,100:116,101:$Vp,105:188,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},o($VR,[2,119]),o($VR,[2,118]),o($VR,[2,189]),o($VR,[2,190]),{19:$V8,34:143,81:190,132:$V9},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:191,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},{19:$V8,34:192,132:$V9},{13:198,19:$V8,22:$Vn,34:193,47:$Vo,100:194,101:[1,195],111:199,112:200,121:196,122:197,123:201,127:$Vb,132:$V9},{32:$Vh,38:84,43:202,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{37:[2,97]},{26:$VS,102:[1,203]},o($VT,[2,99]),o($VU,[2,120],{60:[1,205]}),o($V0,[2,27]),{19:$V8,34:39,54:206,132:$V9},o($Vd,[2,34]),o($Vd,[2,38]),o($Vd,[2,149]),o($Vd,[2,150]),o($Vd,[2,151]),o($Vd,[2,152]),o($Vl,[2,37]),{32:[1,207]},{38:208,53:$V6},{37:[1,209]},o($VV,[2,39]),{69:[1,210],71:211,72:$VB},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:212,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},o($VW,[2,41]),{19:$V8,34:39,54:213,132:$V9},{20:$VX,53:[1,220],56:[1,218],63:[1,227],97:[1,231],102:[1,214],106:$VC,107:215,110:217,134:[1,219],135:[1,221],136:[1,222],137:[1,223],138:[1,224],139:[1,225],140:[1,226],141:[1,228],142:[1,229],143:[1,230]},o($VD,[2,81]),{19:$V8,34:232,132:$V9},o($VY,$VZ),{73:233,101:$VF},{19:$V8,34:234,132:$V9},{19:$V8,34:235,132:$V9},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:189,100:116,101:$Vp,102:[1,236],105:237,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},{19:$V8,34:238,132:$V9},{19:$V8,34:239,132:$V9},{19:$V8,34:240,132:$V9},{19:$V8,34:241,132:$V9},{19:$V8,34:242,132:$V9},o($VY,$V_),{73:243,101:$VF},{19:$V8,34:244,132:$V9},{19:$V8,34:245,132:$V9},o($VD,[2,93],{73:246,101:$VF}),{26:$VS,119:[1,247]},o($V$,[2,96],{106:$VC}),o($VY,[2,110]),{24:[1,248],26:[1,249]},o($Vc,[2,112]),{60:[1,250]},{60:[2,187]},{60:[2,188]},o($VY,[2,115]),{26:$V01,49:[1,251]},o($V11,[2,76],{106:$VC}),{26:[1,254],82:[1,253]},{37:[1,255],106:$VC},{37:[1,256]},{37:[1,258],40:175,47:$Va,73:257,101:$VF,113:$VN,120:$VO},{37:[1,259],40:165,47:$Va,73:260,101:$VF,113:$VG,120:$VH},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:261,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},{120:$VK},{120:$VJ},{120:$VL},{120:$VE},{120:$VI},{120:$VM},{32:[1,262],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{37:[2,98]},{19:$V8,34:143,81:263,132:$V9},{19:$V8,34:264,132:$V9},{56:[1,265]},{39:[1,266]},{32:[1,267]},o($V0,[2,20]),o($VV,[2,40]),o($VW,[2,42]),{60:[1,268],106:$VC},o($VW,[2,43],{73:269,101:$VF}),o($VD,[2,78],{73:270,101:$VF,120:$V21}),{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:272,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},{19:$V8,34:273,132:$V9},o($V31,[2,83]),o($V31,[2,173]),o($V31,[2,174]),o($V31,[2,175]),o($V31,[2,176]),o($V31,[2,177]),o($V31,[2,178]),o($V31,[2,179]),o($V31,[2,180]),o($V31,[2,181]),o($V31,[2,182]),o($V31,[2,183]),o($V31,[2,184]),o($V31,[2,185]),o($V31,[2,186]),o($V41,[2,105]),o($VY,[2,87]),o($V41,[2,109]),o($VY,[2,91],{73:274,101:$VF}),o($VY,[2,74]),{26:$V01,102:[1,275]},o($V41,[2,106]),o($V41,[2,103]),o($V41,[2,102]),o($V41,[2,104]),o($V41,[2,108]),o($VY,[2,85]),o($V41,[2,101]),o($VY,[2,89],{73:276,101:$VF}),o($VD,[2,94]),{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:277,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},o($VY,[2,111]),{19:$VP,125:278,126:184,127:$VQ},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:279,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},o($VY,[2,116]),{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:280,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:281,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},{19:$V8,34:143,81:282,132:$V9},{32:$Vh,38:84,43:283,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{32:[1,286],91:284,93:285},{37:[1,287],120:$V_},o($Vm,[2,68]),o($Vm,[2,69]),{37:[1,288],120:$VZ},{20:$VX,102:[1,289],106:$VC},{44:[1,290],80:$Vx,86:$Vy,90:$Vz,99:$VA},o($VT,[2,100]),o($VU,[2,121],{40:292,47:[1,291]}),o($Vk,[2,28]),{37:[1,293]},{39:[1,294]},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:295,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},o($VW,[2,44]),o($VY,$V51),{19:$V8,34:296,132:$V9},{102:[1,297],106:$VC},{102:[1,298]},o($VY,[2,92]),o($VY,[2,75]),o($VY,[2,90]),o($V$,[2,95],{106:$VC}),o($Vc,[2,113]),o($Vc,[2,114],{106:$VC}),o($V11,[2,77],{106:$VC}),{37:[1,299],106:$VC},{26:[1,301],82:[1,300]},{32:[1,302],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,88:303,89:93,98:94,103:87,104:$Vj},{32:[1,304],93:305},{32:[2,63]},{94:$V61},o($Vm,[2,67]),o($Vm,[2,70]),{37:[1,308],73:307,101:$VF,120:$V21},{37:[1,309]},{19:$V8,34:59,48:57,49:[1,310],50:58,132:$V9},o($VU,[2,123],{47:[1,311]}),o($V0,[2,18]),{37:[1,312]},o($V$,[2,79],{106:$VC}),o($V41,[2,107]),o($VD,[2,80]),o($VY,[2,127]),{32:$Vh,38:84,43:313,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:314,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},{19:$V8,34:143,81:315,132:$V9},{80:$Vx,84:$V71,86:$Vy,87:[1,316],90:$Vz,99:$VA},o($Vm,[2,57]),{84:[1,318],92:[1,319],94:$V61},{32:[2,64]},{95:[1,320],97:[1,321]},{37:[1,322],120:$V51},o($Vm,[2,72]),o($V0,[2,21]),o($VU,[2,122]),{49:[1,323]},o($V0,[2,19]),{32:[1,324],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{37:[1,325],106:$VC},{82:[1,326]},{37:[1,327]},{37:[1,328],86:[1,329]},{37:[1,330]},{37:[1,331]},{13:332,127:$Vb},{19:$V8,34:333,132:$V9},o($Vm,[2,71]),o($VU,[2,124]),{80:$Vx,83:[1,334],84:[1,335],86:$Vy,90:$Vz,99:$VA},{32:$Vh,38:84,43:336,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:337,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},o($Vm,[2,56]),{32:$Vh,38:84,43:338,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{13:121,19:$V8,22:$Vn,34:125,47:$Vo,68:339,100:116,101:$Vp,108:$Vq,109:113,111:115,112:118,114:114,115:$Vr,116:117,117:$Vs,119:$Vt,121:120,122:119,123:124,127:$Vb,128:123,129:$Vu,130:122,131:131,132:$V9,144:$Vv,145:$Vw},{32:$Vh,38:84,43:340,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},o($Vm,[2,62]),{37:[1,341]},{37:[1,342]},{37:[1,343]},{37:[1,344]},{32:[1,345],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{37:[1,346],106:$VC},{32:[1,347],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{37:[1,348],106:$VC},{32:[1,349],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{32:$Vh,38:84,43:350,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{32:$Vh,38:84,43:351,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},o($Vm,[2,50]),{32:$Vh,38:84,43:352,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{80:$Vx,83:[1,353],84:[1,354],86:$Vy,90:$Vz,99:$VA},{32:$Vh,38:84,43:355,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{80:$Vx,86:$Vy,87:[1,356],90:$Vz,99:$VA},{32:$Vh,38:84,43:357,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{80:$Vx,86:$Vy,90:$Vz,92:[1,358],99:$VA},{32:[1,359],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{32:[1,360],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{32:[1,361],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{37:[1,362]},{37:[1,363]},{32:[1,364],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{37:[1,365]},{32:[1,366],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,88:367,89:93,98:94,103:87,104:$Vj},{37:[1,368]},{80:$Vx,86:$Vy,90:$Vz,96:[1,369],99:$VA},{80:$Vx,86:$Vy,90:$Vz,96:[1,370],99:$VA},{80:$Vx,83:[1,371],86:$Vy,90:$Vz,99:$VA},o($Vm,[2,51]),{32:$Vh,38:84,43:372,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{80:$Vx,83:[1,373],84:[1,374],86:$Vy,90:$Vz,99:$VA},o($Vm,[2,58]),{80:$Vx,84:$V71,86:$Vy,87:[1,375],90:$Vz,99:$VA},o($Vm,[2,60]),o($Vm,[2,61]),{37:[1,376]},{37:[1,377]},{37:[1,378]},{32:[1,379],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},{37:[1,380]},{37:[1,381]},{37:[1,382]},{32:[2,65]},{32:[2,66]},o($Vm,[2,53]),{80:$Vx,83:[1,383],86:$Vy,90:$Vz,99:$VA},o($Vm,[2,52]),{32:$Vh,38:84,43:384,53:$V6,66:89,67:$Vi,74:82,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},o($Vm,[2,59]),{37:[1,385]},{32:[1,386],38:84,53:$V6,66:89,67:$Vi,74:109,75:83,76:86,77:85,78:88,79:91,85:92,89:93,98:94,103:87,104:$Vj},o($Vm,[2,54]),{80:$Vx,83:[1,387],86:$Vy,90:$Vz,99:$VA},{37:[1,388]},o($Vm,[2,55])],
defaultActions: {16:[2,5],17:[2,6],18:[2,7],19:[2,8],24:[2,135],37:[2,1],50:[2,11],51:[2,12],62:[2,146],105:[2,126],140:[2,97],185:[2,187],186:[2,188],203:[2,98],285:[2,63],305:[2,64],376:[2,65],377:[2,66]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return;               
break;
case 1:return 10;
break;
case 2:return 12;
break;
case 3:return 58;
break;
case 4:this.begin('CONTROL');      return 32;
break;
case 5:this.begin('COMMENT');      return;
break;
case 6:this.begin('CHILDREN');     return 56;
break;
case 7:this.begin('CHILDREN');     return 59;
break;
case 8:this.begin('EXPRESSION');   return 67;
break;
case 9:return 42;
break;
case 10:return 44;
break;
case 11:return 80;
break;
case 12:return 83;
break;
case 13:return 86;
break;
case 14:return 87;
break;
case 15:return 84;
break;
case 16:return 'ELSEIF';
break;
case 17:return 82;
break;
case 18:return 'SWITCH';
break;
case 19:return 'ENDSWITCH';
break;
case 20:return 'DEFAULT';
break;
case 21:return 94;
break;
case 22:return 96;
break;
case 23:return 99;
break;
case 24:return 52;
break;
case 25:return 12;
break;
case 26:return 'ENDEXPORT';
break;
case 27:return 33;
break;
case 28:return 35;
break;
case 29:return 39;
break;
case 30:return 90;
break;
case 31:return 92;
break;
case 32:return 'OTHERWISE';
break;
case 33:return 'ENDOTHERWISE';
break;
case 34:return 97;
break;
case 35:return 95;
break;
case 36:this.popState();            return 37;
break;
case 37:return 115;
break;
case 38:return 72;
break;
case 39:return 119;
break;
case 40:return 113;
break;
case 41:return '->';
break;
case 42:return '..';
break;
case 43:return 97;
break;
case 44:this.popState();            return 69;
break;
case 45:this.begin('EXPRESSION');   return 67;
break;
case 46:this.begin('CONTROL');      return 32;
break;
case 47:this.begin('COMMENT');      return;
break;
case 48:this.popState();            return 58;
break;
case 49:this.popState();            return 53;
break;
case 50:this.popState();            return 104;
break;
case 51:this.popState();            return;
break;
case 52:return 144;
break;
case 53:return 145;
break;
case 54:return 129;
break;
case 55:return 127;
break;
case 56:return 56;
break;
case 57:return 53;
break;
case 58:return 101;
break;
case 59:return 102;
break;
case 60:return 47;
break;
case 61:return 49;
break;
case 62:return 133
break;
case 63:return 60;
break;
case 64:return ':::';
break;
case 65:return 63
break;
case 66:return 136;
break;
case 67:return 137;
break;
case 68:return 134;
break;
case 69:return 135;
break;
case 70:return 138;
break;
case 71:return 140;
break;
case 72:return 21;
break;
case 73:return 139;
break;
case 74:return 117;
break;
case 75:return 141;
break;
case 76:return 142;
break;
case 77:return 143;
break;
case 78:return 108;
break;
case 79:return 26;
break;
case 80:return 106;
break;
case 81:return 120;
break;
case 82:return 22;
break;
case 83:return 24;
break;
case 84:return 132;
break;
case 85:return 20;
break;
case 86:return 19;
break;
case 87:return 7;
break;
case 88:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:import)/,/^(?:from)/,/^(?:<\/)/,/^(?:\{%)/,/^(?:<!--)/,/^(?:>)/,/^(?:\/>)/,/^(?:\{\{)/,/^(?:macro)/,/^(?:endmacro)/,/^(?:for)/,/^(?:endfor)/,/^(?:if)/,/^(?:endif)/,/^(?:else)/,/^(?:elseif)/,/^(?:in)/,/^(?:switch)/,/^(?:endswitch)/,/^(?:default)/,/^(?:case)/,/^(?:endcase)/,/^(?:call)/,/^(?:export)/,/^(?:from)/,/^(?:endexport)/,/^(?:view)/,/^(?:using)/,/^(?:endview)/,/^(?:match)/,/^(?:endmatch)/,/^(?:otherwise)/,/^(?:endotherwise)/,/^(?:instanceof)/,/^(?:typeof)/,/^(?:%\})/,/^(?:new)/,/^(?:\|)/,/^(?:=>)/,/^(?:::)/,/^(?:->)/,/^(?:\.\.)/,/^(?:instanceof)/,/^(?:\}\})/,/^(?:\{\{)/,/^(?:\{%)/,/^(?:<!--)/,/^(?:<\/)/,/^(?:<)/,/^(?:[^\/<>{%}]+)/,/^(?:(.|\r|\n)*?-->)/,/^(?:true)/,/^(?:false)/,/^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?::::)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\\)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\^)/,/^(?:!)/,/^(?:,)/,/^(?:\?)/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:@)/,/^(?:as)/,/^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"EXPRESSION":{"rules":[0,37,38,39,40,41,42,43,44,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":false},"CONTROL":{"rules":[0,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":false},"COMMENT":{"rules":[0,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":false},"CHILDREN":{"rules":[0,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ParserImpl;
exports.Parser = ParserImpl.Parser;
exports.parse = function () { return ParserImpl.parse.apply(ParserImpl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}