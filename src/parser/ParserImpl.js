/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,5],$V2=[8,13],$V3=[1,14],$V4=[16,19,42],$V5=[13,16,18,19,30,34,42,58,70],$V6=[1,18],$V7=[1,28],$V8=[1,41],$V9=[1,39],$Va=[6,13,18,42,58,70],$Vb=[16,19,23,42],$Vc=[13,16,18,19,30,31,34,36,37,42,50,58,62,70],$Vd=[13,18,42,58,70],$Ve=[1,47],$Vf=[1,48],$Vg=[1,55],$Vh=[1,71],$Vi=[1,72],$Vj=[30,31,36,37,50,62],$Vk=[1,93],$Vl=[36,37,50],$Vm=[30,42];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"template":3,"imports":4,"tag":5,"EOF":6,"import":7,"IMPORT":8,"variable":9,"FROM":10,"string_literal":11,";":12,"<":13,"name":14,"attributes":15,">":16,"tag_option0":17,"</":18,"/>":19,"name_group0":20,"attribute":21,"attribute_name":22,"=":23,"attribute_value":24,":":25,"interpolation":26,"attribute_value_group0":27,"{{":28,"expression":29,"}}":30,"|":31,"filters":32,"filter":33,"(":34,"arguments":35,")":36,",":37,"literal":38,"function_expression":39,"property_expression":40,"method_expression":41,"NAME":42,"boolean_literal":43,"number_literal":44,"array_literal":45,"BOOLEAN":46,"NUMBER_LITERAL":47,"STRING_LITERAL":48,"[":49,"]":50,".":51,"children":52,"child":53,"control":54,"characters":55,"control_group0":56,"for":57,"{%":58,"FOR":59,"for_option0":60,"IN":61,"%}":62,"ENDFOR":63,"if":64,"IF":65,"if_group0":66,"ENDIF":67,"characters_group0":68,"binary_comparison":69,"CHARACTERS":70,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"IMPORT",10:"FROM",12:";",13:"<",16:">",18:"</",19:"/>",23:"=",25:":",28:"{{",30:"}}",31:"|",34:"(",36:")",37:",",42:"NAME",46:"BOOLEAN",47:"NUMBER_LITERAL",48:"STRING_LITERAL",49:"[",50:"]",51:".",58:"{%",59:"FOR",61:"IN",62:"%}",63:"ENDFOR",65:"IF",67:"ENDIF",69:"binary_comparison",70:"CHARACTERS"},
productions_: [0,[3,3],[3,2],[4,1],[4,2],[7,5],[5,8],[5,4],[14,1],[15,2],[15,0],[21,3],[21,1],[22,1],[22,3],[24,1],[24,1],[26,3],[26,5],[32,1],[32,2],[33,1],[33,4],[35,1],[35,3],[29,1],[29,1],[29,1],[29,1],[29,1],[9,1],[38,1],[38,1],[38,1],[38,1],[43,1],[44,1],[11,1],[45,2],[45,3],[39,4],[39,3],[40,3],[40,3],[41,4],[41,3],[52,1],[52,2],[53,1],[53,1],[53,1],[54,1],[57,11],[64,8],[55,1],[17,0],[17,1],[20,1],[20,1],[27,1],[27,1],[56,1],[56,1],[60,0],[60,2],[66,1],[66,1],[68,1],[68,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new yy.ast.Template($$[$0-2], $$[$0-1], yy.help.location(this._$, _$[$0-2], _$[$0-1])); return this.$;
break;
case 2:
this.$ = new yy.ast.Template([], $$[$0-1], yy.help.location(this._$, _$[$0-1], _$[$0-1])); return this.$;
break;
case 3: case 19:
this.$ =  [$$[$0]];         
break;
case 4: case 20: case 47:
this.$ = $$[$0-1].concat($$[$0]); 
break;
case 5:
this.$ = new yy.ast.Import($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-4], _$[$0]));
break;
case 6:

             yy.help.ensureTagsMatch($$[$0-6], $$[$0]);
             this.$ = new yy.ast.Tag($$[$0-6], $$[$0-5], $$[$0-3]?$$[$0-3]:[], yy.help.location(this._$, _$[$0-7], _$[$0]));
             
break;
case 7:
 this.$ = new yy.ast.Tag($$[$0-2], $$[$0-1], [], yy.help.location(this._$, _$[$0-3], _$[$0])); 
break;
case 8: case 15: case 16: case 30: case 51:
this.$ = $$[$0];
break;
case 9:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 10:
this.$ = [];
break;
case 11:
this.$ = new yy.ast.Attribute($$[$0-2].name, $$[$0-2].namespace, $$[$0], yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 12:
this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace, 
            new yy.ast.BooleanLiteral(true, yy.help.location(this._$, _$[$0], _$[$0])),
            yy.help.location(this._$, _$[$0], _$[$0]));
break;
case 13:
this.$ = {namespace:null, name:$$[$0]};
break;
case 14:
this.$ = {namespace:$$[$0-2], name:$$[$0]};
break;
case 17:
this.$ = new yy.ast.Interpolation($$[$0-1], [], yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 18:
this.$ = new yy.ast.Interpolation($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-4], _$[$0]));
break;
case 21:
this.$ = new yy.ast.Filter($$[$0], [], yy.help.location(this._$, _$[$0], _$[$0]));
break;
case 22:
this.$ = new yy.ast.Filter($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-3], _$[$0]));
break;
case 23: case 46:
this.$ = [$$[$0]];          
break;
case 24:
this.$ = $$[$0-2].concat($$[$0]); 
break;
case 35:
this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), yy.help.location(this._$, _$[$0], _$[$0]));
break;
case 36:
this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), yy.help.location(this._$, _$[$0], _$[$0])); 
break;
case 37:
this.$ = new yy.ast.StringLiteral($$[$0], yy.help.location(this._$, _$[$0], _$[$0])); 
break;
case 38:
this.$ = new yy.ast.ArrayLiteral([], yy.help.location(this._$, _$[$0-1], _$[$0])); 
break;
case 39:
this.$ = new yy.ast.ArrayLiteral($$[$0-1], yy.help.location(this._$, _$[$0-2], _$[$0])); 
break;
case 40:
this.$ = new yy.ast.FunctionExpression($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-3], _$[$0]));
break;
case 41:
this.$ = new yy.ast.FunctionExpression($$[$0-2], [], yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 42: case 43:
this.$ = $$[$0-2]+'.'+$$[$0];
break;
case 44:
this.$ = new yy.ast.MethodExpression($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-3], _$[$0]));
break;
case 45:
this.$ = new yy.ast.MethodExpression($$[$0-2], [], yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 52:

            
            this.$ = new yy.ast.ForLoop($$[$0-8], 
            ($$[$0-7])? $$[$0-7].substring(1, $$[$0-7].length-1):'index',
            $$[$0-5],
            $$[$0-3],
            yy.help.location(this._$, _$[$0-10], _$[$0])); 
            
            
break;
case 53:
this.$ = new yy.ast.IfCondition($$[$0-5], $$[$0-3], yy.help.location(this._$, _$[$0-7], _$[$0])); 
break;
case 54:
this.$ = new yy.ast.Characters($$[$0], yy.help.location(this._$, _$[$0], _$[$0])); 
break;
}
},
table: [{3:1,4:2,5:3,7:4,8:$V0,13:$V1},{1:[3]},{5:7,7:8,8:$V0,13:$V1},{6:[1,9]},o($V2,[2,3]),{9:12,14:10,20:11,40:13,42:$V3},{9:15,42:$V3},{6:[1,16]},o($V2,[2,4]),{1:[2,2]},o($V4,[2,10],{15:17}),o($V5,[2,8]),o($V5,[2,57],{51:$V6}),o($V5,[2,58]),o([10,13,16,18,19,23,25,30,31,34,36,37,42,50,51,58,61,62,70],[2,30]),{10:[1,19]},{1:[2,1]},{9:24,16:[1,20],19:[1,21],21:22,22:23,42:$V3},{9:25,40:26,42:$V3},{11:27,48:$V7},{5:32,9:12,13:$V1,14:40,17:29,18:[2,55],20:11,40:13,42:$V3,52:30,53:31,54:33,55:34,56:35,57:37,58:$V8,64:38,68:36,70:$V9},o($Va,[2,7]),o($V4,[2,9]),o($V4,[2,12],{23:[1,42]}),o($Vb,[2,13],{25:[1,43]}),o($Vc,[2,42],{51:$V6}),o($Vc,[2,43]),{12:[1,44]},o([12,16,19,30,31,36,37,42,50,62],[2,37]),{18:[1,45]},{5:32,9:12,13:$V1,14:40,18:[2,56],20:11,40:13,42:$V3,53:46,54:33,55:34,56:35,57:37,58:$V8,64:38,68:36,70:$V9},o($Vd,[2,46]),o($Vd,[2,48]),o($Vd,[2,49]),o($Vd,[2,50]),o($Vd,[2,51]),o($Vd,[2,54]),o($Vd,[2,61]),o($Vd,[2,62]),o($Vd,[2,67]),o($Vd,[2,68]),{59:$Ve,65:$Vf},{11:53,24:49,26:50,27:51,28:[1,52],44:54,47:$Vg,48:$V7},{9:56,42:$V3},o($V2,[2,5]),{9:12,14:57,20:11,40:13,42:$V3},o($Vd,[2,47]),{9:58,42:$V3},{9:62,11:69,29:60,38:63,39:64,40:65,41:66,42:$V3,43:67,44:68,45:70,46:$Vh,47:$Vg,48:$V7,49:$Vi,66:59,69:[1,61]},o($V4,[2,11]),o($V4,[2,15]),o($V4,[2,16]),{9:62,11:69,29:73,38:63,39:64,40:65,41:66,42:$V3,43:67,44:68,45:70,46:$Vh,47:$Vg,48:$V7,49:$Vi},o($V4,[2,59]),o($V4,[2,60]),o([16,19,30,31,36,37,42,50,62],[2,36]),o($Vb,[2,14]),{16:[1,74]},{37:[1,76],60:75,61:[2,63]},{62:[1,77]},{62:[2,65]},{62:[2,66]},o($Vj,[2,25],{34:[1,78],51:$V6}),o($Vj,[2,26]),o($Vj,[2,27]),o($Vj,[2,28],{34:[1,79]}),o($Vj,[2,29]),o($Vj,[2,31]),o($Vj,[2,32]),o($Vj,[2,33]),o($Vj,[2,34]),o($Vj,[2,35]),{9:62,11:69,29:82,35:81,38:63,39:64,40:65,41:66,42:$V3,43:67,44:68,45:70,46:$Vh,47:$Vg,48:$V7,49:$Vi,50:[1,80]},{30:[1,83],31:[1,84]},o($Va,[2,6]),{61:[1,85]},{9:86,42:$V3},{5:32,9:12,13:$V1,14:40,20:11,40:13,42:$V3,52:87,53:31,54:33,55:34,56:35,57:37,58:$V8,64:38,68:36,70:$V9},{9:62,11:69,29:82,35:88,36:[1,89],38:63,39:64,40:65,41:66,42:$V3,43:67,44:68,45:70,46:$Vh,47:$Vg,48:$V7,49:$Vi},{9:62,11:69,29:82,35:90,36:[1,91],38:63,39:64,40:65,41:66,42:$V3,43:67,44:68,45:70,46:$Vh,47:$Vg,48:$V7,49:$Vi},o($Vj,[2,38]),{37:$Vk,50:[1,92]},o($Vl,[2,23]),o($V4,[2,17]),{9:12,14:96,20:11,32:94,33:95,40:13,42:$V3},{9:62,11:69,29:97,38:63,39:64,40:65,41:66,42:$V3,43:67,44:68,45:70,46:$Vh,47:$Vg,48:$V7,49:$Vi},{61:[2,64]},{5:32,9:12,13:$V1,14:40,20:11,40:13,42:$V3,53:46,54:33,55:34,56:35,57:37,58:[1,98],64:38,68:36,70:$V9},{36:[1,99],37:$Vk},o($Vj,[2,41]),{36:[1,100],37:$Vk},o($Vj,[2,45]),o($Vj,[2,39]),{9:62,11:69,29:101,38:63,39:64,40:65,41:66,42:$V3,43:67,44:68,45:70,46:$Vh,47:$Vg,48:$V7,49:$Vi},{9:12,14:96,20:11,30:[1,102],33:103,40:13,42:$V3},o($Vm,[2,19]),o($Vm,[2,21],{34:[1,104]}),{62:[1,105]},{59:$Ve,65:$Vf,67:[1,106]},o($Vj,[2,40]),o($Vj,[2,44]),o($Vl,[2,24]),o($V4,[2,18]),o($Vm,[2,20]),{9:62,11:69,29:82,35:107,38:63,39:64,40:65,41:66,42:$V3,43:67,44:68,45:70,46:$Vh,47:$Vg,48:$V7,49:$Vi},{5:32,9:12,13:$V1,14:40,20:11,40:13,42:$V3,52:108,53:31,54:33,55:34,56:35,57:37,58:$V8,64:38,68:36,70:$V9},{62:[1,109]},{36:[1,110],37:$Vk},{5:32,9:12,13:$V1,14:40,20:11,40:13,42:$V3,53:46,54:33,55:34,56:35,57:37,58:[1,111],64:38,68:36,70:$V9},o($Vd,[2,53]),o($Vm,[2,22]),{59:$Ve,63:[1,112],65:$Vf},{62:[1,113]},o($Vd,[2,52])],
defaultActions: {9:[2,2],16:[2,1],60:[2,65],61:[2,66],86:[2,64]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return;
break;
case 1:return 8;
break;
case 2:return 10;
break;
case 3:return 59;
break;
case 4:return 63;
break;
case 5:return 65;
break;
case 6:return 67;
break;
case 7:return 'ELSE';
break;
case 8:return 'ELSEIF';
break;
case 9:return 61;
break;
case 10:return 46;
break;
case 11:return 28;
break;
case 12:return 30;
break;
case 13:return 31;
break;
case 14:this.begin('INITIAL');      return 58;
break;
case 15:return 62;
break;
case 16:return 18;
break;
case 17:this.begin('CHILDREN');     return 19;
break;
case 18:this.begin('CHILDREN');     return 16;
break;
case 19:this.begin('INITIAL');      return 13;
break;
case 20:return 34;
break;
case 21:return 36;
break;
case 22:return 49;
break;
case 23:return 50;
break;
case 24:return 12
break;
case 25:return 25;
break;
case 26:return 23
break;
case 27:return 47;
break;
case 28:return 48;
break;
case 29:return 42;
break;
case 30:this.popState();            return 70;
break;
case 31:return 6;
break;
case 32:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:import)/,/^(?:from)/,/^(?:for)/,/^(?:endfor)/,/^(?:if)/,/^(?:endif)/,/^(?:else)/,/^(?:elseif)/,/^(?:in)/,/^(?:true|false)/,/^(?:\{\{)/,/^(?:\}\})/,/^(?:\|)/,/^(?:\{%)/,/^(?:%\})/,/^(?:<\/)/,/^(?:\/>)/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:(((([0]|(([1-9])([0-9]+)*))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([0]|(([1-9])([0-9]+)*))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')))/,/^(?:([a-zA-Z$0-9_][a-zA-Z$0-9.-]*))/,/^(?:[^<>{%}]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"CHILDREN":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ParserImpl;
exports.Parser = ParserImpl.Parser;
exports.parse = function () { return ParserImpl.parse.apply(ParserImpl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}