/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,14],$V2=[1,8],$V3=[1,28],$V4=[1,26],$V5=[6,10,12,33,50],$V6=[6,10,33,50],$V7=[1,37],$V8=[28,36,45,50],$V9=[21,53,56],$Va=[21,53,56,65,68,97],$Vb=[14,26,28],$Vc=[28,45],$Vd=[1,89],$Ve=[26,28],$Vf=[1,99],$Vg=[1,127],$Vh=[1,126],$Vi=[1,121],$Vj=[10,21,33,50,55,63,100],$Vk=[21,53,56,59],$Vl=[21,33,50,55,63,100],$Vm=[1,175],$Vn=[1,176],$Vo=[1,153],$Vp=[1,154],$Vq=[1,155],$Vr=[1,169],$Vs=[1,173],$Vt=[1,174],$Vu=[1,178],$Vv=[1,180],$Vw=[1,182],$Vx=[1,183],$Vy=[1,184],$Vz=[1,185],$VA=[1,186],$VB=[1,187],$VC=[1,188],$VD=[1,189],$VE=[1,204],$VF=[28,98,117],$VG=[28,78,98,117],$VH=[1,213],$VI=[1,211],$VJ=[22,26,28,36,45,47,50,53,59,65,68,93,98,102,136,137,138,139,140,141,142,143,144,145],$VK=[1,217],$VL=[1,222],$VM=[1,221],$VN=[1,220],$VO=[1,223],$VP=[1,224],$VQ=[1,225],$VR=[1,226],$VS=[1,227],$VT=[1,232],$VU=[1,231],$VV=[1,233],$VW=[1,235],$VX=[1,234],$VY=[1,242],$VZ=[1,243],$V_=[21,22,26,28,36,45,47,50,53,56,59,65,68,93,98,102,136,137,138,139,140,141,142,143,144,145],$V$=[22,26,28,36,45,47,50,53,59,65,68,93,98,102,118,136,137,138,139,140,141,142,143,144,145],$V01=[22,26,28,36,45,47,50,53,59,65,68,93,98,102,110,118,136,137,138,139,140,141,142,143,144,145],$V11=[21,33,50,53,55,56,63,100],$V21=[65,68],$V31=[1,276],$V41=[2,106],$V51=[2,104],$V61=[22,26,28,36,45,47,50,53,59,65,68,93,98,136,137,138,139,140,141,142,143,144,145],$V71=[1,316],$V81=[28,45,98],$V91=[1,334],$Va1=[1,337],$Vb1=[21,24,43,97,104,105,113,115,117,126,128,133,146,147,148,149],$Vc1=[22,26,28,36,43,45,47,50,53,59,65,68,93,97,98,102,110,118,136,137,138,139,140,141,142,143,144,145],$Vd1=[2,108],$Ve1=[1,379],$Vf1=[1,394];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"imports":4,"exports":5,"USING":6,"type_classes":7,"type":8,"tag":9,"EOF":10,"import_statement":11,"IMPORT":12,"import_member":13,"FROM":14,"string_literal":15,"import_statement_option0":16,"default_member":17,"alias_member":18,"aggregate_member":19,"composite_member":20,"IDENTIFIER":21,"AS":22,"*":23,"{":24,"member_list":25,"}":26,"member_list_group0":27,",":28,"member_list_group1":29,"export":30,"export_group0":31,"view_statement":32,"{%":33,"VIEW":34,"identifier":35,"%}":36,"ENDVIEW":37,"frag_statement":38,"FRAG":39,"children":40,"ENDFRAG":41,"parameters":42,"[":43,"type_class_list":44,"]":45,"type_class":46,":":47,"export_from_statement":48,"EXPORT":49,"<":50,"tagname":51,"attributes":52,">":53,"tag_option0":54,"</":55,"/>":56,"attribute":57,"attribute_name":58,"=":59,"attribute_value":60,"attribute_value_group0":61,"interpolation":62,"{{":63,"expression":64,"}}":65,"filters":66,"filter":67,"|":68,"arguments":69,"child":70,"child_group0":71,"text_interpolation":72,"control":73,"control_group0":74,"for_statement":75,"FOR":76,"typable_identifier":77,"IN":78,"ENDFOR":79,"ELSE":80,"if_statement":81,"IF":82,"ENDIF":83,"else_clause":84,"match_statement":85,"MATCH":86,"case_statements":87,"ENDMATCH":88,"case_statement":89,"CASE":90,"TYPEOF":91,"ENDCASE":92,"INSTANCEOF":93,"call_statement":94,"CALL":95,"member_expression":96,"(":97,")":98,"characters":99,"CHARACTERS":100,"argument_list":101,"?":102,"binary_operator":103,"!":104,"@@":105,"expression_group0":106,"binary_operator_group0":107,"call_expression":108,"bind_expression":109,"::":110,"context_variable":111,"new_expression":112,"NEW":113,"function_expression":114,"\\\\":115,"parameter_list":116,"=>":117,".":118,"context_property":119,"array_literal":120,"object_literal":121,"type_assertion":122,"key_value_pairs":123,"key_value_pair":124,"key_value_pair_group0":125,"STRING_LITERAL":126,"number_literal":127,"NUMBER_LITERAL":128,"boolean_literal":129,"boolean_literal_group0":130,"variable":131,"variable_group0":132,"CONTEXT_PROP":133,"context_variable_group0":134,";":135,">=":136,"<=":137,"==":138,"!=":139,"+":140,"/":141,"-":142,"&&":143,"||":144,"^":145,"TRUE":146,"FALSE":147,"@":148,"THIS":149,"$accept":0,"$end":1},
terminals_: {2:"error",6:"USING",10:"EOF",12:"IMPORT",14:"FROM",21:"IDENTIFIER",22:"AS",23:"*",24:"{",26:"}",28:",",33:"{%",34:"VIEW",36:"%}",37:"ENDVIEW",39:"FRAG",41:"ENDFRAG",43:"[",45:"]",47:":",49:"EXPORT",50:"<",53:">",55:"</",56:"/>",59:"=",63:"{{",65:"}}",68:"|",76:"FOR",78:"IN",79:"ENDFOR",80:"ELSE",82:"IF",83:"ENDIF",86:"MATCH",88:"ENDMATCH",90:"CASE",91:"TYPEOF",92:"ENDCASE",93:"INSTANCEOF",95:"CALL",97:"(",98:")",100:"CHARACTERS",102:"?",104:"!",105:"@@",110:"::",113:"NEW",115:"\\\\",117:"=>",118:".",126:"STRING_LITERAL",128:"NUMBER_LITERAL",133:"CONTEXT_PROP",135:";",136:">=",137:"<=",138:"==",139:"!=",140:"+",141:"/",142:"-",143:"&&",144:"||",145:"^",146:"TRUE",147:"FALSE",148:"@",149:"THIS"},
productions_: [0,[3,7],[3,6],[3,4],[3,3],[3,6],[3,5],[3,3],[3,2],[3,6],[3,5],[3,3],[3,2],[3,5],[3,4],[3,2],[4,1],[4,2],[11,5],[13,1],[13,1],[13,1],[13,1],[17,1],[18,3],[19,3],[20,3],[25,1],[25,3],[5,1],[5,2],[30,1],[32,10],[32,11],[38,10],[38,11],[38,11],[38,12],[7,3],[44,1],[44,3],[46,1],[46,3],[8,1],[8,2],[48,6],[9,8],[9,4],[51,1],[51,3],[52,2],[52,0],[57,3],[57,1],[58,1],[58,3],[60,1],[62,3],[62,4],[66,1],[66,2],[67,2],[67,3],[40,1],[40,2],[70,1],[72,1],[73,1],[75,10],[75,12],[75,14],[75,14],[75,16],[75,18],[81,8],[81,6],[84,7],[84,9],[84,7],[85,12],[85,8],[87,1],[87,2],[89,9],[89,9],[94,5],[94,4],[94,4],[94,5],[94,7],[94,6],[99,1],[69,2],[69,3],[101,1],[101,3],[64,3],[64,5],[64,5],[64,2],[64,4],[64,6],[64,1],[103,1],[108,2],[108,3],[108,2],[108,3],[108,4],[109,3],[109,4],[109,3],[109,4],[109,3],[109,4],[112,2],[112,3],[114,4],[114,2],[42,2],[42,3],[116,1],[116,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,5],[96,3],[96,3],[121,2],[121,3],[123,1],[123,3],[124,3],[120,2],[120,3],[15,1],[127,1],[129,1],[77,1],[77,3],[77,5],[77,4],[77,6],[122,5],[131,1],[35,1],[119,1],[111,1],[16,0],[16,1],[27,1],[27,1],[29,1],[29,1],[31,1],[31,1],[31,1],[54,0],[54,1],[61,1],[61,1],[61,1],[61,1],[71,1],[71,1],[71,1],[71,1],[71,1],[74,1],[74,1],[74,1],[74,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[125,1],[125,1],[130,1],[130,1],[132,1],[132,1],[132,1],[134,1],[134,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ =
            new yy.ast.Module($$[$0-6], $$[$0-5], $$[$0-3], $$[$0-2], $$[$0-1], this._$); 
            return this.$;
            
break;
case 2:
this.$ =
            new yy.ast.Module($$[$0-5], $$[$0-4], [], $$[$0-2], $$[$0-1], this._$); 
            return this.$;
            
break;
case 3:
this.$ =
            new yy.ast.Module($$[$0-3],$$[$0-2],[], null, $$[$0-1], this._$); 
            return this.$;
            
break;
case 4:
this.$ =
            new yy.ast.Module($$[$0-2], $$[$0-1], [], null, null, this._$); 
            return this.$;
            
break;
case 5:
this.$ =
            new yy.ast.Module($$[$0-5], [], $$[$0-3], $$[$0-2], $$[$0-1], this._$); 
            return this.$;
            
break;
case 6:
this.$ =
            new yy.ast.Module($$[$0-4], [], [], $$[$0-2], $$[$0-1], this._$); 
            return this.$;
            
break;
case 7:
this.$ =
            new yy.ast.Module($$[$0-2],[],[], null, $$[$0-1], this._$); 
            return this.$;
            
break;
case 8:
this.$ =
            new yy.ast.Module($$[$0-1],[],[], null, null, this._$); 
            return this.$;
            
break;
case 9:
this.$ =
            new yy.ast.Module([], $$[$0-5], $$[$0-3], $$[$0-2], $$[$0-1], this._$); 
            return this.$;
            
break;
case 10:
this.$ =
            new yy.ast.Module([], $$[$0-4], [], $$[$0-2], $$[$0-1], this._$); 
            return this.$;
            
break;
case 11:
this.$ =
            new yy.ast.Module([], $$[$0-2], [], null, $$[$0-1], this._$); 
            return this.$;
            
break;
case 12:
this.$ =
            new yy.ast.Module([], $$[$0-1], [], null, null, this._$); 
            return this.$;
            
break;
case 13:
this.$ =
            new yy.ast.Module([],[],$$[$0-3], $$[$0-2], $$[$0-1], this._$); 
            return this.$;
            
break;
case 14:
this.$ =
            new yy.ast.Module([],[],[], $$[$0-2], $$[$0-1], this._$); 
            return this.$;
            
break;
case 15:
this.$ =
            new yy.ast.Module([],[],[], null, $$[$0-1], this._$);          ;
            return this.$;
            
break;
case 16:
this.$ =  [$$[$0]];         
break;
case 17: case 60: case 64:
this.$ = $$[$0-1].concat($$[$0]); 
break;
case 18:
this.$ = new yy.ast.ImportStatement($$[$0-3], $$[$0-1], this._$);
break;
case 23:
this.$ = new yy.ast.DefaultMember($$[$0], this._$);
break;
case 24:
this.$ = new yy.ast.AliasMember($$[$0-2], $$[$0], this._$);
break;
case 25:
this.$ = new yy.ast.AggregateMember($$[$0], this._$);
break;
case 26:
this.$ = new yy.ast.CompositeMember($$[$0-1], this._$);
break;
case 27:
this.$ = [$$[$0]];
break;
case 28:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 29: case 136:
this.$ = [$$[$0]]; 
break;
case 30: case 50: case 82:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 31: case 48:
this.$ = $$[$0];                                           
break;
case 32:
this.$ = new yy.ast.ViewStatement($$[$0-7], [], $$[$0-5], $$[$0-3], this._$);     
break;
case 33:
this.$ = new yy.ast.ViewStatement($$[$0-8], $$[$0-7], $$[$0-5], $$[$0-3], this._$);     
break;
case 34:
this.$ = new yy.ast.FragmentStatement($$[$0-7], [], [], $$[$0-5], $$[$0-3], this._$);   
break;
case 35:
this.$ = new yy.ast.FragmentStatement($$[$0-8], $$[$0-7], [], $$[$0-5], $$[$0-3], this._$);   
break;
case 36:
this.$ = new yy.ast.FragmentStatement($$[$0-8], [], $$[$0-7], $$[$0-5], $$[$0-3], this._$);   
break;
case 37:
this.$ = new yy.ast.FragmentStatement($$[$0-9], $$[$0-8], $$[$0-7], $$[$0-5], $$[$0-3], this._$);   
break;
case 38:
this.$ = $$[$0-1]; 
break;
case 39:
this.$ = [$$[$0]];                     
break;
case 40:
this.$ = $$[$0-2].concat($$[$0]);            
break;
case 41:
this.$ = new yy.ast.TypeClass($$[$0], null, this._$);
break;
case 42:
this.$ = new yy.ast.TypeClass($$[$0-2], $$[$0], this._$);
break;
case 43:
this.$ = new yy.ast.Type($$[$0], [], this._$);                             
break;
case 44:
this.$ = new yy.ast.Type($$[$0-1], $$[$0], this._$);                             
break;
case 45:
this.$ = new yy.ast.ExportFromStatement($$[$0-3], $$[$0-1], this._$);  
break;
case 46:
this.$ = new yy.ast.Tag($$[$0-6], $$[$0-5], $$[$0-3]?$$[$0-3]:[], this._$);
break;
case 47:
 this.$ = new yy.ast.Tag($$[$0-2], $$[$0-1], [], this._$); 
break;
case 49:
this.$ = new yy.ast.MemberExpression($$[$0-2], $$[$0], this._$);      
break;
case 51: case 119:
this.$ = [];
break;
case 52:
this.$ = new yy.ast.Attribute($$[$0-2].name, $$[$0-2].namespace, $$[$0], this._$);
break;
case 53:
this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace,
            new yy.ast.BooleanLiteral(true, this._$),this._$);
break;
case 54:
this.$ = {namespace:null, name:$$[$0]};
break;
case 55:
this.$ = {namespace:$$[$0-2], name:$$[$0]};
break;
case 56: case 65: case 67:
this.$ = $$[$0];
break;
case 57:
this.$ = new yy.ast.Interpolation($$[$0-1], [], this._$);
break;
case 58:
this.$ = new yy.ast.Interpolation($$[$0-2], $$[$0-1], this._$);
break;
case 59:
this.$ =  [$$[$0]];     
break;
case 61:
this.$ = new yy.ast.Filter($$[$0], [], this._$);
break;
case 62:
this.$ = new yy.ast.Filter($$[$0-1], $$[$0], this._$);
break;
case 63:
this.$ = [$$[$0]];          
break;
case 66:
this.$ = new yy.ast.TextInterpolation($$[$0], this._$);
break;
case 68:
this.$ = new yy.ast.ForStatement($$[$0-7], null, null, $$[$0-5], $$[$0-3], [], this._$);
break;
case 69:
this.$ = new yy.ast.ForStatement($$[$0-9], $$[$0-7], null, $$[$0-5], $$[$0-3], [], this._$);
break;
case 70:
this.$ = new yy.ast.ForStatement($$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-3], [], this._$);
break;
case 71:
this.$ = new yy.ast.ForStatement($$[$0-11], null, null, $$[$0-9], $$[$0-7], $$[$0-3], this._$);
break;
case 72:
this.$ = new yy.ast.ForStatement($$[$0-13], $$[$0-11], null, $$[$0-9], $$[$0-7], $$[$0-3], this._$);
break;
case 73:
this.$ = new yy.ast.ForStatement($$[$0-15], $$[$0-13], null, $$[$0-11], $$[$0-9], $$[$0-3], this._$);
break;
case 74:
this.$ = new yy.ast.IfStatement($$[$0-5], $$[$0-3], null, this._$); 
break;
case 75:
this.$ = new yy.ast.IfStatement($$[$0-3], $$[$0-1], $$[$0], this._$); 
break;
case 76:
this.$ = new yy.ast.ElseClause($$[$0-3], this._$);                              
break;
case 77:
this.$ = new yy.ast.ElseIfClause($$[$0-5], $$[$0-3], null,  this._$);                 
break;
case 78:
this.$ = new yy.ast.ElseIfClause($$[$0-3], $$[$0-1], $$[$0], this._$);                    
break;
case 79:
this.$ = new yy.ast.MatchStatement($$[$0-9], $$[$0-7], $$[$0-3], this._$);
break;
case 80:
this.$ = new yy.ast.MatchStatement($$[$0-5], $$[$0-3], [], this._$);
break;
case 81:
this.$ = [$$[$0]];         
break;
case 83:
this.$ = new yy.ast.TypeOfCaseStatement($$[$0-5], $$[$0-3], this._$);
break;
case 84:
this.$ = new yy.ast.InstanceOfCaseStatement($$[$0-5], $$[$0-3], this._$);
break;
case 85: case 88:
this.$ = new yy.ast.CallStatement($$[$0-2], $$[$0-1], this._$);
break;
case 86: case 87:
this.$ = new yy.ast.CallStatement($$[$0-1], [], this._$);
break;
case 89:
this.$ = new yy.ast.CallStatement($$[$0-3], $$[$0-1], this._$);
break;
case 90:
this.$ = new yy.ast.CallStatement($$[$0-2], [], this._$);
break;
case 91:
this.$ = new yy.ast.Characters($$[$0], this._$); 
break;
case 92:
this.$ = [];                                      
break;
case 93:
this.$ = $$[$0-1];                                      
break;
case 94:
this.$ = [$$[$0]];                                    
break;
case 95:
this.$ = $$[$0-2].concat($$[$0]);                           
break;
case 96:
 this.$ = $$[$0-1];                                         
break;
case 97:
this.$ = new yy.ast.TernaryExpression($$[$0-4], $$[$0-2], $$[$0], this._$);
break;
case 98:
this.$ = new yy.ast.BinaryExpression($$[$0-3], $$[$0-2], $$[$0-1], this._$); 
break;
case 99:
this.$ = new yy.ast.UnaryExpression($$[$0-1], $$[$0], this._$);      
break;
case 100:
this.$ = new yy.ast.ReadExpression($$[$0-1],null, this._$);      
break;
case 101:
this.$ = new yy.ast.ReadExpression($$[$0-3], $$[$0-1], this._$);       
break;
case 102:
this.$ = $$[$0];                                          
break;
case 103:
 this.$ = yy.help.convertOperator($$[$0]);
break;
case 104: case 106:
this.$ = new yy.ast.CallExpression($$[$0-1], [], $$[$0], this._$);    
break;
case 105: case 107:
this.$ = new yy.ast.CallExpression($$[$0-2], $$[$0-1], $$[$0], this._$);    
break;
case 108:
this.$ = new yy.ast.CallExpression($$[$0-2], [], $$[$0], this._$);    
break;
case 109: case 111:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [] , this._$);
break;
case 110: case 112:
this.$ = new yy.ast.BindExpression($$[$0-3], $$[$0-1], $$[$0] , this._$);
break;
case 113:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [], this._$);
break;
case 114:
this.$ = new yy.ast.BindExpression($$[$0-3], $$[$0-1], $$[$0], this._$);
break;
case 115:
this.$ = new yy.ast.NewExpression($$[$0], [], this._$);
break;
case 116:
this.$ = new yy.ast.NewExpression($$[$0-1], $$[$0], this._$);
break;
case 117:
this.$ = new yy.ast.FunctionExpression($$[$0-2], $$[$0], this._$);   
break;
case 118:
this.$ = new yy.ast.FunctionExpression([], $$[$0], this._$);   
break;
case 120:
this.$ = $$[$0-1];
break;
case 121:
this.$ = [$$[$0]];                                     
break;
case 122:
this.$ = $$[$0-2].concat($$[$0]);                            
break;
case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 132: case 133:
this.$ = new yy.ast.MemberExpression($$[$0-2], $$[$0], this._$); 
break;
case 131:
this.$ = new yy.ast.MemberExpression($$[$0-3], $$[$0], this._$); 
break;
case 134:
this.$ = new yy.ast.ObjectLiteral([], this._$); 
break;
case 135:
this.$ = new yy.ast.ObjectLiteral($$[$0-1], this._$); 
break;
case 137:
this.$ = $$[$0-2].concat($$[$0]); 
break;
case 138:
this.$ = {key:$$[$0-2], value:$$[$0]}; 
break;
case 139:
this.$ = new yy.ast.ArrayLiteral([], this._$); 
break;
case 140:
this.$ = new yy.ast.ArrayLiteral($$[$0-1], this._$); 
break;
case 141:
this.$ = new yy.ast.StringLiteral($$[$0], this._$); 
break;
case 142:
this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$); 
break;
case 143:
this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
break;
case 144:
this.$ = $$[$0];                                                      
break;
case 145:
this.$ = new yy.ast.TypableIdentifier($$[$0-2], $$[$0], [], false, this._$);     
break;
case 146:
this.$ = new yy.ast.TypableIdentifier($$[$0-4], $$[$0-2], [], true, this._$);      
break;
case 147:
this.$ = new yy.ast.TypableIdentifier($$[$0-3], $$[$0-1], $$[$0], false, this._$);     
break;
case 148:
this.$ = new yy.ast.TypableIdentifier($$[$0-5], $$[$0-3], $$[$0-2], true, this._$);      
break;
case 149:
this.$ = new yy.ast.TypeAssertion($$[$0-3], $$[$0-1], this._$);          
break;
case 150:
this.$ = $$[$0]; 
break;
case 151:
this.$ = new yy.ast.Identifier($$[$0], '', this._$);             
break;
case 152:
this.$ = new yy.ast.ContextProperty($$[$0].slice(1), this._$)    
break;
case 153:
this.$ = new yy.ast.ContextVariable(this._$);
break;
}
},
table: [{3:1,4:2,5:3,6:[1,4],9:5,11:6,12:$V0,30:7,31:10,32:11,33:$V1,38:12,48:13,50:$V2},{1:[3]},{5:15,6:[1,16],9:17,10:[1,18],11:19,12:$V0,30:7,31:10,32:11,33:$V1,38:12,48:13,50:$V2},{6:[1,20],9:21,10:[1,22],30:23,31:10,32:11,33:$V1,38:12,48:13,50:$V2},{7:24,8:25,21:$V3,35:27,43:$V4},{10:[1,29]},o($V5,[2,16]),o($V6,[2,29]),{21:$V3,35:31,51:30},{13:32,17:33,18:34,19:35,20:36,21:$V7,23:[1,38],24:[1,39]},o($V6,[2,31]),o($V6,[2,160]),o($V6,[2,161]),o($V6,[2,162]),{34:[1,40],39:[1,41],49:[1,42]},{6:[1,43],9:44,10:[1,45],30:23,31:10,32:11,33:$V1,38:12,48:13,50:$V2},{7:46,8:47,21:$V3,35:27,43:$V4},{10:[1,48]},{1:[2,8]},o($V5,[2,17]),{7:49,8:50,21:$V3,35:27,43:$V4},{10:[1,51]},{1:[2,12]},o($V6,[2,30]),{8:52,21:$V3,35:27},{9:53,50:$V2},{21:$V3,35:56,44:54,46:55},o($V8,[2,43],{7:57,43:$V4}),o([6,21,22,26,28,33,36,43,45,47,50,53,55,56,59,63,65,68,78,93,97,98,100,102,110,117,118,136,137,138,139,140,141,142,143,144,145],[2,151]),{1:[2,15]},o($V9,[2,51],{52:58}),o($Va,[2,48],{47:[1,59]}),{14:[1,60]},{14:[2,19]},{14:[2,20]},{14:[2,21]},{14:[2,22]},o($Vb,[2,23],{22:[1,61]}),{22:[1,62]},{17:65,18:66,21:$V7,25:63,27:64},{21:$V3,35:67},{21:$V3,35:68},{21:[1,69]},{7:70,8:71,21:$V3,35:27,43:$V4},{10:[1,72]},{1:[2,4]},{8:73,21:$V3,35:27},{9:74,50:$V2},{1:[2,7]},{8:75,21:$V3,35:27},{9:76,50:$V2},{1:[2,11]},{9:77,50:$V2},{10:[1,78]},{28:[1,80],45:[1,79]},o($Vc,[2,39]),o($Vc,[2,41],{47:[1,81]}),o($V8,[2,44]),{21:[1,86],53:[1,82],56:[1,83],57:84,58:85},{21:$V3,35:87},{15:88,126:$Vd},{21:[1,90]},{21:[1,91]},{26:[1,92],28:[1,93]},o($Ve,[2,27]),o($Ve,[2,156]),o($Ve,[2,157]),{6:[1,94],7:95,43:$V4},{6:[1,96],7:97,42:98,43:$V4,97:$Vf},{14:[1,100]},{8:101,21:$V3,35:27},{9:102,50:$V2},{1:[2,3]},{9:103,50:$V2},{10:[1,104]},{9:105,50:$V2},{10:[1,106]},{10:[1,107]},{1:[2,14]},o([6,21,28,36,43,45,50,78,97,98,117],[2,38]),{21:$V3,35:56,46:108},{8:109,21:$V3,35:27},{9:114,21:$V3,33:$Vg,35:118,40:111,50:$V2,54:110,55:[2,163],62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},o($Vj,[2,47]),o($V9,[2,50]),o($V9,[2,53],{59:[1,128]}),o($Vk,[2,54],{47:[1,129]}),o($Va,[2,49]),o($V5,[2,154],{16:130,135:[1,131]}),o([6,10,12,21,22,26,28,33,36,45,47,50,53,56,59,65,68,93,98,102,118,135,136,137,138,139,140,141,142,143,144,145],[2,141]),o($Vb,[2,24]),{14:[2,25]},{14:[2,26]},{17:133,18:134,21:$V7,29:132},{8:135,21:$V3,35:27},{6:[1,136]},{8:137,21:$V3,35:27},{6:[1,138],42:139,97:$Vf},{6:[1,140]},{21:$V3,35:144,77:143,98:[1,141],116:142},{15:145,126:$Vd},{9:146,50:$V2},{10:[1,147]},{10:[1,148]},{1:[2,6]},{10:[1,149]},{1:[2,10]},{1:[2,13]},o($Vc,[2,40]),o($Vc,[2,42]),{55:[1,150]},{9:114,21:$V3,33:$Vg,35:118,50:$V2,55:[2,164],62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},o($Vl,[2,63]),o($Vl,[2,65]),o($Vl,[2,169]),o($Vl,[2,170]),o($Vl,[2,171]),o($Vl,[2,172]),o($Vl,[2,173]),o($Vl,[2,67]),o($Vl,[2,66]),o($Vl,[2,91]),o($Vl,[2,174]),o($Vl,[2,175]),o($Vl,[2,176]),o($Vl,[2,177]),{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:152,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},{76:$VA,82:$VB,86:$VC,95:$VD},{15:193,60:190,61:191,62:192,63:$Vh,126:$Vd,127:194,128:$Vu,129:195,130:177,146:$Vw,147:$Vx},{21:[1,196]},o($V5,[2,18]),o($V5,[2,155]),o($Ve,[2,28]),o($Ve,[2,158]),o($Ve,[2,159]),{36:[1,197]},{8:198,21:$V3,35:27},{36:[1,199]},{8:200,21:$V3,35:27},{6:[1,201]},{8:202,21:$V3,35:27},{6:[2,119]},{28:$VE,98:[1,203]},o($VF,[2,121]),o($VG,[2,144],{47:[1,205]}),{36:[1,206]},{10:[1,207]},{1:[2,2]},{1:[2,5]},{1:[2,9]},{21:$V3,35:31,51:208},o($Vl,[2,64]),{65:[1,209],66:210,67:212,68:$VH,102:$VI},{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:214,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:215,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},{43:[1,216]},o($VJ,[2,102]),o($VJ,[2,178]),o($VJ,[2,179],{118:$VK}),o($VJ,[2,180],{69:218,7:219,43:$V4,97:$VL,110:$VM,118:$VN}),o($VJ,[2,181]),o($VJ,[2,182],{118:$VO}),o($VJ,[2,183],{118:$VP}),o($VJ,[2,184],{118:$VQ}),o($VJ,[2,185],{118:$VR}),o($VJ,[2,186]),o($VJ,[2,187]),o($VJ,[2,188],{118:$VS}),o($VJ,[2,189]),{21:$V3,35:228},o($VJ,[2,208],{69:229,7:230,43:$V4,97:$VL,110:$VT,118:$VU}),o($VJ,[2,209],{118:$VV}),o($VJ,[2,210],{110:$VW,118:$VX}),{21:$V3,35:144,77:143,116:236},{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:237,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},{21:$VY,26:[1,238],123:239,124:240,125:241,126:$VZ},{15:164,21:$V3,24:$Vm,35:170,43:$Vn,45:[1,244],64:246,96:159,97:$Vo,101:245,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},o($V_,[2,143]),o($V_,[2,142]),o($VJ,[2,150]),o($V$,[2,152]),o($V01,[2,153]),o($V_,[2,206]),o($V_,[2,207]),o($V01,[2,211]),o($V01,[2,212]),{21:$V3,35:144,77:247},{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:248,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},{21:$V3,35:249},{15:257,21:$V3,24:$Vm,35:250,43:$Vn,96:251,97:[1,252],108:258,109:259,111:254,119:253,120:255,121:256,122:260,126:$Vd,133:$Vv,134:181,148:$Vy,149:$Vz},o($V9,[2,52]),o($V9,[2,56]),o($V9,[2,165]),o($V9,[2,166]),o($V9,[2,167]),o($V9,[2,168]),o($Vk,[2,55]),{9:261,50:$V2},{36:[1,262]},{9:114,21:$V3,33:$Vg,35:118,40:263,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{36:[1,264]},{8:265,21:$V3,35:27},{36:[1,266]},{6:[2,120]},{21:$V3,35:144,77:267},{21:$V3,35:268},o($V6,[2,45]),{1:[2,1]},{53:[1,269]},o($V11,[2,57]),{65:[1,270],67:271,68:$VH},{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:272,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},o($V21,[2,59]),{21:$V3,35:31,51:273},{22:$V31,50:[1,280],53:[1,278],59:[1,287],93:[1,291],98:[1,274],102:$VI,103:275,107:277,136:[1,279],137:[1,281],138:[1,282],139:[1,283],140:[1,284],141:[1,285],142:[1,286],143:[1,288],144:[1,289],145:[1,290]},o($VJ,[2,99]),{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:292,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},{21:$V3,35:293},o($V$,$V41),{69:294,97:$VL},{21:$V3,35:295},{21:$V3,35:296},{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:246,96:159,97:$Vo,98:[1,297],101:298,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},{21:$V3,35:299},{21:$V3,35:300},{21:$V3,35:301},{21:$V3,35:302},{21:$V3,35:303},o($VJ,[2,115],{69:304,97:$VL}),o($V$,$V51),{69:305,97:$VL},{21:$V3,35:306},{21:$V3,35:307},{21:$V3,35:308},{21:$V3,35:309},{21:$V3,35:310},{28:$VE,117:[1,311]},o($V61,[2,118],{102:$VI}),o($V$,[2,134]),{26:[1,312],28:[1,313]},o($Ve,[2,136]),{47:[1,314]},{47:[2,204]},{47:[2,205]},o($V$,[2,139]),{28:$V71,45:[1,315]},o($V81,[2,94],{102:$VI}),{28:[1,318],78:[1,317]},{36:[1,319],102:$VI},{36:[1,320]},{7:230,36:[1,322],43:$V4,69:321,97:$VL,110:$VT,118:$VU},{7:219,36:[1,323],43:$V4,69:324,97:$VL,110:$VM,118:$VN},{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:325,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},{118:$VV},{110:$VW,118:$VX},{118:$VQ},{118:$VP},{118:$VR},{118:$VK},{118:$VO},{118:$VS},{33:[1,326]},{9:327,50:$V2},{9:114,21:$V3,33:[1,328],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{9:114,21:$V3,33:$Vg,35:118,40:329,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{36:[1,330]},{9:114,21:$V3,33:$Vg,35:118,40:331,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},o($VF,[2,122]),o($VG,[2,145],{7:333,43:[1,332]}),o($Vj,[2,46]),o($V11,[2,58]),o($V21,[2,60]),{47:$V91,102:$VI},o($V21,[2,61],{69:335,97:$VL}),o($VJ,[2,96],{69:336,97:$VL,118:$Va1}),{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:338,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},{21:$V3,35:339},o($Vb1,[2,103]),o($Vb1,[2,190]),o($Vb1,[2,191]),o($Vb1,[2,192]),o($Vb1,[2,193]),o($Vb1,[2,194]),o($Vb1,[2,195]),o($Vb1,[2,196]),o($Vb1,[2,197]),o($Vb1,[2,198]),o($Vb1,[2,199]),o($Vb1,[2,200]),o($Vb1,[2,201]),o($Vb1,[2,202]),o($Vb1,[2,203]),{45:[1,340],102:[1,341]},o($Vc1,[2,129]),o($V$,[2,107]),o($Vc1,[2,133]),o($V$,[2,113],{69:342,97:$VL}),o($V$,[2,92]),{28:$V71,98:[1,343]},o($Vc1,[2,130]),o($Vc1,[2,127]),o($Vc1,[2,126]),o($Vc1,[2,128]),o($Vc1,[2,132]),o($VJ,[2,116]),o($V$,[2,105]),o($Vc1,[2,123]),o($V$,[2,109],{69:344,97:$VL}),o($Vc1,[2,124]),o($Vc1,[2,125]),o($V$,[2,111],{69:345,97:$VL}),{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:346,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},o($V$,[2,135]),{21:$VY,124:347,125:241,126:$VZ},{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:348,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},o($V$,[2,140]),{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:349,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:350,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},{21:$V3,35:144,77:351},{9:114,21:$V3,33:$Vg,35:118,40:352,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{33:[1,355],87:353,89:354},{36:[1,356],118:$V51},o($Vl,[2,86]),o($Vl,[2,87]),{36:[1,357],118:$V41},{22:$V31,98:[1,358],102:$VI},{37:[1,359]},{33:[1,360]},{41:[1,361],76:$VA,82:$VB,86:$VC,95:$VD},{9:114,21:$V3,33:[1,362],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{9:114,21:$V3,33:$Vg,35:118,40:363,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{9:114,21:$V3,33:[1,364],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{21:$V3,35:56,44:54,45:[1,365],46:55},o($VG,[2,147],{43:[1,366]}),{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:367,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},o($V21,[2,62]),o($V$,$Vd1),{21:$V3,35:368},{98:[1,369],102:$VI},{98:[1,370]},o($VJ,[2,100]),{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:371,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},o($V$,[2,114]),o($V$,[2,93]),o($V$,[2,110]),o($V$,[2,112]),o($V61,[2,117],{102:$VI}),o($Ve,[2,137]),o($Ve,[2,138],{102:$VI}),o($V81,[2,95],{102:$VI}),{36:[1,372],102:$VI},{28:[1,374],78:[1,373]},{9:114,21:$V3,33:[1,375],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,84:376,85:124,94:125,99:117,100:$Vi},{33:[1,377],89:378},{33:[2,81]},{90:$Ve1},o($Vl,[2,85]),o($Vl,[2,88]),{36:[1,381],69:380,97:$VL,118:$Va1},{36:[1,382]},{37:[1,383]},{36:[1,384]},{41:[1,385],76:$VA,82:$VB,86:$VC,95:$VD},{9:114,21:$V3,33:[1,386],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{41:[1,387],76:$VA,82:$VB,86:$VC,95:$VD},o($VG,[2,146]),{45:[1,388]},o($V61,[2,97],{102:$VI}),o($Vc1,[2,131]),o($VJ,[2,98]),o($V$,[2,149]),{45:[1,389],47:$V91,102:$VI},{9:114,21:$V3,33:$Vg,35:118,40:390,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:391,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},{21:$V3,35:144,77:392},{76:$VA,80:$Vf1,82:$VB,83:[1,393],86:$VC,95:$VD},o($Vl,[2,75]),{80:[1,395],88:[1,396],90:$Ve1},{33:[2,82]},{91:[1,397],93:[1,398]},{36:[1,399],118:$Vd1},o($Vl,[2,90]),o($V6,[2,32]),{36:[1,400]},o($V6,[2,34]),{36:[1,401]},{41:[1,402],76:$VA,82:$VB,86:$VC,95:$VD},{36:[1,403]},o($VG,[2,148]),o($VJ,[2,101]),{9:114,21:$V3,33:[1,404],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{36:[1,405],102:$VI},{78:[1,406]},{36:[1,407]},{36:[1,408],82:[1,409]},{36:[1,410]},{36:[1,411]},{15:412,126:$Vd},{21:$V3,35:413},o($Vl,[2,89]),o($V6,[2,33]),o($V6,[2,35]),{36:[1,414]},o($V6,[2,36]),{76:$VA,79:[1,415],80:[1,416],82:$VB,86:$VC,95:$VD},{9:114,21:$V3,33:$Vg,35:118,40:417,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:418,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},o($Vl,[2,74]),{9:114,21:$V3,33:$Vg,35:118,40:419,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{15:164,21:$V3,24:$Vm,35:170,43:$Vn,64:420,96:159,97:$Vo,104:$Vp,105:$Vq,106:156,108:158,109:161,111:172,112:157,113:$Vr,114:160,115:$Vs,117:$Vt,119:171,120:163,121:162,122:167,126:$Vd,127:166,128:$Vu,129:165,130:177,131:168,132:179,133:$Vv,134:181,146:$Vw,147:$Vx,148:$Vy,149:$Vz},{9:114,21:$V3,33:$Vg,35:118,40:421,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},o($Vl,[2,80]),{36:[1,422]},{36:[1,423]},o($V6,[2,37]),{36:[1,424]},{36:[1,425]},{9:114,21:$V3,33:[1,426],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{36:[1,427],102:$VI},{9:114,21:$V3,33:[1,428],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{36:[1,429],102:$VI},{9:114,21:$V3,33:[1,430],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{9:114,21:$V3,33:$Vg,35:118,40:431,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{9:114,21:$V3,33:$Vg,35:118,40:432,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},o($Vl,[2,68]),{9:114,21:$V3,33:$Vg,35:118,40:433,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{76:$VA,79:[1,434],80:[1,435],82:$VB,86:$VC,95:$VD},{9:114,21:$V3,33:$Vg,35:118,40:436,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{76:$VA,82:$VB,83:[1,437],86:$VC,95:$VD},{9:114,21:$V3,33:$Vg,35:118,40:438,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{76:$VA,82:$VB,86:$VC,88:[1,439],95:$VD},{9:114,21:$V3,33:[1,440],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{9:114,21:$V3,33:[1,441],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{9:114,21:$V3,33:[1,442],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{36:[1,443]},{36:[1,444]},{9:114,21:$V3,33:[1,445],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{36:[1,446]},{9:114,21:$V3,33:[1,447],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,84:448,85:124,94:125,99:117,100:$Vi},{36:[1,449]},{76:$VA,82:$VB,86:$VC,92:[1,450],95:$VD},{76:$VA,82:$VB,86:$VC,92:[1,451],95:$VD},{76:$VA,79:[1,452],82:$VB,86:$VC,95:$VD},o($Vl,[2,69]),{9:114,21:$V3,33:$Vg,35:118,40:453,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{76:$VA,79:[1,454],80:[1,455],82:$VB,86:$VC,95:$VD},o($Vl,[2,76]),{76:$VA,80:$Vf1,82:$VB,83:[1,456],86:$VC,95:$VD},o($Vl,[2,78]),o($Vl,[2,79]),{36:[1,457]},{36:[1,458]},{36:[1,459]},{9:114,21:$V3,33:[1,460],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},{36:[1,461]},{36:[1,462]},{36:[1,463]},{33:[2,83]},{33:[2,84]},o($Vl,[2,71]),{76:$VA,79:[1,464],82:$VB,86:$VC,95:$VD},o($Vl,[2,70]),{9:114,21:$V3,33:$Vg,35:118,40:465,50:$V2,62:120,63:$Vh,70:112,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},o($Vl,[2,77]),{36:[1,466]},{9:114,21:$V3,33:[1,467],35:118,50:$V2,62:120,63:$Vh,70:151,71:113,72:116,73:115,74:119,75:122,81:123,85:124,94:125,99:117,100:$Vi},o($Vl,[2,72]),{76:$VA,79:[1,468],82:$VB,86:$VC,95:$VD},{36:[1,469]},o($Vl,[2,73])],
defaultActions: {18:[2,8],22:[2,12],29:[2,15],33:[2,19],34:[2,20],35:[2,21],36:[2,22],45:[2,4],48:[2,7],51:[2,11],72:[2,3],78:[2,14],91:[2,25],92:[2,26],104:[2,6],106:[2,10],107:[2,13],141:[2,119],147:[2,2],148:[2,5],149:[2,9],203:[2,120],207:[2,1],242:[2,204],243:[2,205],354:[2,81],378:[2,82],457:[2,83],458:[2,84]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return;               
break;
case 1:return 12;
break;
case 2:return 14;
break;
case 3:return 55;
break;
case 4:this.begin('CONTROL');      return 33;
break;
case 5:this.begin('COMMENT');      return;
break;
case 6:this.begin('CHILDREN');     return 53;
break;
case 7:this.begin('CHILDREN');     return 56;
break;
case 8:this.begin('EXPRESSION');   return 63;
break;
case 9:return 6;
break;
case 10:return 22;
break;
case 11:return 146;
break;
case 12:return 147;
break;
case 13:return 133;
break;
case 14:return 21;
break;
case 15:return 'MACRO';
break;
case 16:return 'ENDMACRO';
break;
case 17:return 39;
break;
case 18:return 41;
break;
case 19:return 76;
break;
case 20:return 79;
break;
case 21:return 82;
break;
case 22:return 83;
break;
case 23:return 80;
break;
case 24:return 'ELSEIF';
break;
case 25:return 78;
break;
case 26:return 'SWITCH';
break;
case 27:return 'ENDSWITCH';
break;
case 28:return 'DEFAULT';
break;
case 29:return 90;
break;
case 30:return 92;
break;
case 31:return 95;
break;
case 32:return 49;
break;
case 33:return 14;
break;
case 34:return 'ENDEXPORT';
break;
case 35:return 34;
break;
case 36:return 6;
break;
case 37:return 37;
break;
case 38:return 86;
break;
case 39:return 88;
break;
case 40:return 'OTHERWISE';
break;
case 41:return 'ENDOTHERWISE';
break;
case 42:return 93;
break;
case 43:return 91;
break;
case 44:return 105;
break;
case 45:return 149;
break;
case 46:return 148;
break;
case 47:return 133;
break;
case 48:return 21;
break;
case 49:this.popState();            return 36;
break;
case 50:return 113;
break;
case 51:return 68;
break;
case 52:return 117;
break;
case 53:return 110;
break;
case 54:return '->';
break;
case 55:return 93;
break;
case 56:return 146;
break;
case 57:return 147;
break;
case 58:return 149;
break;
case 59:return 105;
break;
case 60:return 148;
break;
case 61:return 133;
break;
case 62:return 21;
break;
case 63:this.popState();            return 65;
break;
case 64:this.begin('EXPRESSION');   return 63;
break;
case 65:this.begin('CONTROL');      return 33;
break;
case 66:this.begin('COMMENT');      return;
break;
case 67:this.popState();            return 55;
break;
case 68:this.popState();            return 50;
break;
case 69:this.popState();            return 100;
break;
case 70:this.popState();            return;
break;
case 71:return 128;
break;
case 72:return 126;
break;
case 73:return 53;
break;
case 74:return 50;
break;
case 75:return 97;
break;
case 76:return 98;
break;
case 77:return 43;
break;
case 78:return 45;
break;
case 79:return 135
break;
case 80:return 47;
break;
case 81:return ':::';
break;
case 82:return 59
break;
case 83:return 138;
break;
case 84:return 139;
break;
case 85:return 136;
break;
case 86:return 137;
break;
case 87:return 140;
break;
case 88:return 142;
break;
case 89:return 23;
break;
case 90:return 141;
break;
case 91:return 115;
break;
case 92:return 143;
break;
case 93:return 144;
break;
case 94:return 145;
break;
case 95:return 104;
break;
case 96:return 28;
break;
case 97:return 102;
break;
case 98:return 118;
break;
case 99:return 24;
break;
case 100:return 26;
break;
case 101:return 10;
break;
case 102:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:import)/,/^(?:from)/,/^(?:<\/)/,/^(?:\{%)/,/^(?:<!--)/,/^(?:>)/,/^(?:\/>)/,/^(?:\{\{)/,/^(?:using)/,/^(?:as)/,/^(?:true)/,/^(?:false)/,/^(?:@([a-zA-Z$_][a-zA-Z$_0-9-]*))/,/^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/,/^(?:macro)/,/^(?:endmacro)/,/^(?:frag)/,/^(?:endfrag)/,/^(?:for)/,/^(?:endfor)/,/^(?:if)/,/^(?:endif)/,/^(?:else)/,/^(?:elseif)/,/^(?:in)/,/^(?:switch)/,/^(?:endswitch)/,/^(?:default)/,/^(?:case)/,/^(?:endcase)/,/^(?:call)/,/^(?:export)/,/^(?:from)/,/^(?:endexport)/,/^(?:view)/,/^(?:using)/,/^(?:endview)/,/^(?:match)/,/^(?:endmatch)/,/^(?:otherwise)/,/^(?:endotherwise)/,/^(?:instanceof)/,/^(?:typeof)/,/^(?:@@)/,/^(?:this)/,/^(?:@)/,/^(?:@([a-zA-Z$_][a-zA-Z$_0-9-]*))/,/^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/,/^(?:%\})/,/^(?:new)/,/^(?:\|)/,/^(?:=>)/,/^(?:::)/,/^(?:->)/,/^(?:instanceof)/,/^(?:true)/,/^(?:false)/,/^(?:this)/,/^(?:@@)/,/^(?:@)/,/^(?:@([a-zA-Z$_][a-zA-Z$_0-9-]*))/,/^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/,/^(?:\}\})/,/^(?:\{\{)/,/^(?:\{%)/,/^(?:<!--)/,/^(?:<\/)/,/^(?:<)/,/^(?:[^\/<>{%}]+)/,/^(?:(.|\r|\n)*?-->)/,/^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?::::)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\\)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\^)/,/^(?:!)/,/^(?:,)/,/^(?:\?)/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:$)/,/^(?:.)/],
conditions: {"EXPRESSION":{"rules":[0,50,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"inclusive":false},"CONTROL":{"rules":[0,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"inclusive":false},"COMMENT":{"rules":[0,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"inclusive":false},"CHILDREN":{"rules":[0,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ParserImpl;
exports.Parser = ParserImpl.Parser;
exports.parse = function () { return ParserImpl.parse.apply(ParserImpl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}