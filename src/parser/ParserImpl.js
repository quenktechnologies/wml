/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,31,50],$V1=[1,5],$V2=[7,50],$V3=[1,13],$V4=[7,10,31,50],$V5=[1,20],$V6=[1,25],$V7=[12,23,25],$V8=[1,39],$V9=[1,44],$Va=[23,25],$Vb=[18,53,56],$Vc=[1,50],$Vd=[18,53,56,57,67,70,99],$Ve=[1,55],$Vf=[1,82],$Vg=[1,81],$Vh=[1,76],$Vi=[1,88],$Vj=[1,89],$Vk=[7,31,50,55,65,102],$Vl=[18,53,56,60],$Vm=[31,50,55,65,102],$Vn=[1,117],$Vo=[1,118],$Vp=[1,99],$Vq=[1,100],$Vr=[1,114],$Vs=[1,115],$Vt=[1,116],$Vu=[1,119],$Vv=[1,120],$Vw=[1,121],$Vx=[1,122],$Vy=[1,123],$Vz=[1,124],$VA=[25,45],$VB=[19,23,25,33,43,45,50,53,57,60,62,67,70,80,95,99,100,104,111,117,131,132,133,134,135,136,137,138,139,140],$VC=[2,128],$VD=[1,146],$VE=[1,144],$VF=[19,23,25,33,45,50,53,60,62,67,70,95,100,104,131,132,133,134,135,136,137,138,139,140],$VG=[1,149],$VH=[1,152],$VI=[1,154],$VJ=[1,153],$VK=[1,155],$VL=[1,156],$VM=[1,157],$VN=[1,158],$VO=[1,160],$VP=[1,163],$VQ=[1,164],$VR=[1,172],$VS=[1,173],$VT=[1,191],$VU=[25,100,117],$VV=[25,80,100,117],$VW=[18,31,50,53,55,56,65,102],$VX=[67,70],$VY=[1,203],$VZ=[19,23,25,33,45,50,53,57,60,62,67,70,95,100,104,131,132,133,134,135,136,137,138,139,140],$V_=[2,84],$V$=[2,82],$V01=[19,23,25,33,45,50,53,60,62,67,70,95,100,131,132,133,134,135,136,137,138,139,140],$V11=[1,240],$V21=[25,45,100],$V31=[1,256],$V41=[18,21,43,99,106,113,115,117,127,128,129,130],$V51=[19,23,25,33,43,45,50,53,57,60,62,67,70,95,99,100,104,111,131,132,133,134,135,136,137,138,139,140],$V61=[1,289],$V71=[1,299];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"module_option0":4,"module_option1":5,"module_option2":6,"EOF":7,"imports":8,"import_statement":9,"IMPORT":10,"import_member":11,"FROM":12,"string_literal":13,"default_member":14,"alias_member":15,"aggregate_member":16,"composite_member":17,"IDENTIFIER":18,"AS":19,"*":20,"{":21,"member_list":22,"}":23,"member_list_group0":24,",":25,"member_list_group1":26,"exports":27,"export":28,"export_group0":29,"view_statement":30,"{%":31,"VIEW":32,"%}":33,"tag":34,"ENDVIEW":35,"macro_statement":36,"MACRO":37,"children":38,"ENDMACRO":39,"macro_statement_option0":40,"parameters":41,"type_classes":42,"[":43,"type_class_list":44,"]":45,"type_class":46,"identifier":47,"export_from_statement":48,"EXPORT":49,"<":50,"tagname":51,"attributes":52,">":53,"tag_option0":54,"</":55,"/>":56,".":57,"attribute":58,"attribute_name":59,"=":60,"attribute_value":61,":":62,"attribute_value_group0":63,"interpolation":64,"{{":65,"expression":66,"}}":67,"filters":68,"filter":69,"|":70,"arguments":71,"child":72,"child_group0":73,"text_interpolation":74,"control":75,"control_group0":76,"for_statement":77,"FOR":78,"typable_identifier":79,"IN":80,"ENDFOR":81,"ELSE":82,"if_statement":83,"IF":84,"ENDIF":85,"else_clause":86,"match_statement":87,"MATCH":88,"case_statements":89,"ENDMATCH":90,"case_statement":91,"CASE":92,"TYPEOF":93,"ENDCASE":94,"INSTANCEOF":95,"call_statement":96,"CALL":97,"member_expression":98,"(":99,")":100,"characters":101,"CHARACTERS":102,"argument_list":103,"?":104,"binary_operator":105,"!":106,"expression_group0":107,"binary_operator_group0":108,"call_expression":109,"bind_expression":110,"::":111,"new_expression":112,"NEW":113,"function_expression":114,"\\\\":115,"parameter_list":116,"=>":117,"array_literal":118,"object_literal":119,"type_assertion":120,"literal":121,"number_literal":122,"boolean_literal":123,"key_value_pairs":124,"key_value_pair":125,"key_value_pair_group0":126,"STRING_LITERAL":127,"NUMBER_LITERAL":128,"BOOLEAN":129,"@":130,">=":131,"<=":132,"==":133,"!=":134,"+":135,"/":136,"-":137,"&&":138,"||":139,"^":140,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",10:"IMPORT",12:"FROM",18:"IDENTIFIER",19:"AS",20:"*",21:"{",23:"}",25:",",31:"{%",32:"VIEW",33:"%}",35:"ENDVIEW",37:"MACRO",39:"ENDMACRO",43:"[",45:"]",49:"EXPORT",50:"<",53:">",55:"</",56:"/>",57:".",60:"=",62:":",65:"{{",67:"}}",70:"|",78:"FOR",80:"IN",81:"ENDFOR",82:"ELSE",84:"IF",85:"ENDIF",88:"MATCH",90:"ENDMATCH",92:"CASE",93:"TYPEOF",94:"ENDCASE",95:"INSTANCEOF",97:"CALL",99:"(",100:")",102:"CHARACTERS",104:"?",106:"!",111:"::",113:"NEW",115:"\\\\",117:"=>",127:"STRING_LITERAL",128:"NUMBER_LITERAL",129:"BOOLEAN",130:"@",131:">=",132:"<=",133:"==",134:"!=",135:"+",136:"/",137:"-",138:"&&",139:"||",140:"^"},
productions_: [0,[3,4],[8,1],[8,2],[9,4],[11,1],[11,1],[11,1],[11,1],[14,1],[15,3],[16,3],[17,3],[22,1],[22,3],[27,1],[27,2],[28,1],[30,8],[36,8],[36,10],[42,3],[44,1],[44,3],[46,1],[48,6],[34,8],[34,4],[51,1],[51,3],[52,2],[52,0],[58,3],[58,1],[59,1],[59,3],[61,1],[64,3],[64,4],[68,1],[68,2],[69,2],[69,3],[38,1],[38,2],[72,1],[74,1],[75,1],[77,10],[77,12],[77,14],[77,14],[77,16],[77,18],[83,8],[83,6],[86,7],[86,9],[86,7],[87,12],[87,8],[89,1],[89,2],[91,9],[91,9],[96,5],[96,4],[96,4],[96,5],[96,7],[96,6],[101,1],[71,2],[71,3],[103,1],[103,3],[66,3],[66,5],[66,5],[66,2],[66,1],[105,1],[109,2],[109,3],[109,2],[109,3],[110,3],[110,4],[110,3],[110,4],[112,2],[112,3],[114,4],[114,2],[41,2],[41,3],[116,1],[116,3],[98,3],[98,3],[98,3],[98,3],[98,3],[98,3],[98,5],[98,3],[98,3],[121,1],[121,1],[121,1],[121,1],[121,1],[119,2],[119,3],[124,1],[124,3],[125,3],[118,2],[118,3],[13,1],[122,1],[123,1],[79,1],[79,3],[79,5],[79,4],[79,6],[120,5],[47,1],[47,1],[4,0],[4,1],[5,0],[5,1],[6,0],[6,1],[24,1],[24,1],[26,1],[26,1],[29,1],[29,1],[29,1],[40,0],[40,1],[54,0],[54,1],[63,1],[63,1],[63,1],[73,1],[73,1],[73,1],[73,1],[76,1],[76,1],[76,1],[76,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,2],[107,1],[107,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[126,1],[126,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ =
            new yy.ast.Module(
            $$[$0-3] || [],
            $$[$0-2] || [],
            $$[$0-1] || null, this._$); return this.$;
            
break;
case 2:
this.$ =  [$$[$0]];         
break;
case 3: case 40: case 44:
this.$ = $$[$0-1].concat($$[$0]); 
break;
case 4:
this.$ = new yy.ast.ImportStatement($$[$0-2], $$[$0], this._$);
break;
case 9:
this.$ = new yy.ast.DefaultMember($$[$0], this._$);
break;
case 10:
this.$ = new yy.ast.AliasMember($$[$0-2], $$[$0], this._$);
break;
case 11:
this.$ = new yy.ast.AggregateMember($$[$0], this._$);
break;
case 12:
this.$ = new yy.ast.CompositeMember($$[$0-1], this._$);
break;
case 13:
this.$ = [$$[$0]];
break;
case 14:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 15: case 114:
this.$ = [$$[$0]]; 
break;
case 16: case 30: case 62:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 17:
this.$ = $$[$0];                                           
break;
case 18:
this.$ = new yy.ast.ViewStatement($$[$0-5], $$[$0-3], this._$);     
break;
case 19:
this.$ = new yy.ast.MacroStatement($$[$0-5], [], [], $$[$0-3], this._$);    
break;
case 20:
this.$ = new yy.ast.MacroStatement($$[$0-7], $$[$0-6]||[], $$[$0-5], $$[$0-3], this._$);    
break;
case 21:
this.$ = $$[$0-1]; 
break;
case 22:
this.$ = [$$[$0]];                     
break;
case 23:
this.$ = $$[$0-2].concat($$[$0]);            
break;
case 25:
this.$ = new yy.ast.ExportFromStatement($$[$0-3], $$[$0-1], this._$);  
break;
case 26:

             yy.help.ensureTagsMatch($$[$0-6], $$[$0]);
             this.$ = new yy.ast.Tag($$[$0-6], $$[$0-5], $$[$0-3]?$$[$0-3]:[], this._$);
             
break;
case 27:
 this.$ = new yy.ast.Tag($$[$0-2], $$[$0-1], [], this._$); 
break;
case 28:
this.$ = $$[$0];                      
break;
case 29:
this.$ = [$$[$0-2], $$[$0]].join('.');      
break;
case 31: case 94:
this.$ = [];
break;
case 32:
this.$ = new yy.ast.Attribute($$[$0-2].name, $$[$0-2].namespace, $$[$0], this._$);
break;
case 33:
this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace,
            new yy.ast.BooleanLiteral(true, this._$),this._$);
break;
case 34:
this.$ = {namespace:null, name:$$[$0]};
break;
case 35:
this.$ = {namespace:$$[$0-2], name:$$[$0]};
break;
case 36: case 45: case 47:
this.$ = $$[$0];
break;
case 37:
this.$ = new yy.ast.Interpolation($$[$0-1], [], this._$);
break;
case 38:
this.$ = new yy.ast.Interpolation($$[$0-2], $$[$0-1], this._$);
break;
case 39:
this.$ =  [$$[$0]];     
break;
case 41:
this.$ = new yy.ast.Filter($$[$0], [], this._$);
break;
case 42:
this.$ = new yy.ast.Filter($$[$0-1], $$[$0], this._$);
break;
case 43:
this.$ = [$$[$0]];          
break;
case 46:
this.$ = new yy.ast.TextInterpolation($$[$0], this._$);
break;
case 48:
this.$ = new yy.ast.ForStatement($$[$0-7], null, null, $$[$0-5], $$[$0-3], [], this._$);
break;
case 49:
this.$ = new yy.ast.ForStatement($$[$0-9], $$[$0-7], null, $$[$0-5], $$[$0-3], [], this._$);
break;
case 50:
this.$ = new yy.ast.ForStatement($$[$0-11], $$[$0-9], $$[$0-7], $$[$0-5], $$[$0-3], [], this._$);
break;
case 51:
this.$ = new yy.ast.ForStatement($$[$0-11], null, null, $$[$0-9], $$[$0-7], $$[$0-3], this._$);
break;
case 52:
this.$ = new yy.ast.ForStatement($$[$0-13], $$[$0-11], null, $$[$0-9], $$[$0-7], $$[$0-3], this._$);
break;
case 53:
this.$ = new yy.ast.ForStatement($$[$0-15], $$[$0-13], null, $$[$0-11], $$[$0-9], $$[$0-3], this._$);
break;
case 54:
this.$ = new yy.ast.IfStatement($$[$0-5], $$[$0-3], null, this._$); 
break;
case 55:
this.$ = new yy.ast.IfStatement($$[$0-3], $$[$0-1], $$[$0], this._$); 
break;
case 56:
this.$ = new yy.ast.ElseClause($$[$0-3], this._$);                              
break;
case 57:
this.$ = new yy.ast.ElseIfClause($$[$0-5], $$[$0-3], null,  this._$);                 
break;
case 58:
this.$ = new yy.ast.ElseIfClause($$[$0-3], $$[$0-1], $$[$0], this._$);                    
break;
case 59:
this.$ = new yy.ast.MatchStatement($$[$0-9], $$[$0-7], $$[$0-3], this._$);
break;
case 60:
this.$ = new yy.ast.MatchStatement($$[$0-5], $$[$0-3], [], this._$);
break;
case 61:
this.$ = [$$[$0]];         
break;
case 63:
this.$ = new yy.ast.TypeOfCaseStatement($$[$0-5], $$[$0-3], this._$);
break;
case 64:
this.$ = new yy.ast.InstanceOfCaseStatement($$[$0-5], $$[$0-3], this._$);
break;
case 65: case 68:
this.$ = new yy.ast.CallStatement($$[$0-2], $$[$0-1], this._$);
break;
case 66: case 67:
this.$ = new yy.ast.CallStatement($$[$0-1], [], this._$);
break;
case 69:
this.$ = new yy.ast.CallStatement($$[$0-3], $$[$0-1], this._$);
break;
case 70:
this.$ = new yy.ast.CallStatement($$[$0-2], [], this._$);
break;
case 71:
this.$ = new yy.ast.Characters($$[$0], this._$); 
break;
case 72:
this.$ = [];                                      
break;
case 73:
this.$ = $$[$0-1];                                      
break;
case 74:
this.$ = [$$[$0]];                                    
break;
case 75:
this.$ = $$[$0-2].concat($$[$0]);                           
break;
case 76:
 this.$ = $$[$0-1];                                         
break;
case 77:
this.$ = new yy.ast.TernaryExpression($$[$0-4], $$[$0-2], $$[$0], this._$);
break;
case 78:
this.$ = new yy.ast.BinaryExpression($$[$0-3], $$[$0-2], $$[$0-1], this._$); 
break;
case 79:
this.$ = new yy.ast.UnaryExpression($$[$0-1], $$[$0], this._$);      
break;
case 80:
this.$ = $$[$0];                                          
break;
case 81:
 this.$ = yy.help.convertOperator($$[$0]);
break;
case 82: case 84:
this.$ = new yy.ast.CallExpression($$[$0-1], [], $$[$0], this._$);    
break;
case 83: case 85:
this.$ = new yy.ast.CallExpression($$[$0-2], $$[$0-1], $$[$0], this._$);    
break;
case 86:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [] , this._$);
break;
case 87:
this.$ = new yy.ast.BindExpression($$[$0-3], $$[$0-1], $$[$0] , this._$);
break;
case 88:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [], this._$);
break;
case 89:
this.$ = new yy.ast.BindExpression($$[$0-3], $$[$0-1], $$[$0], this._$);
break;
case 90:
this.$ = new yy.ast.NewExpression($$[$0], [], this._$);
break;
case 91:
this.$ = new yy.ast.NewExpression($$[$0-1], $$[$0], this._$);
break;
case 92:
this.$ = new yy.ast.FunctionExpression($$[$0-2], $$[$0], this._$);   
break;
case 93:
this.$ = new yy.ast.FunctionExpression([], $$[$0], this._$);   
break;
case 95:
this.$ = $$[$0-1];
break;
case 96:
this.$ = [$$[$0]];                                     
break;
case 97:
this.$ = $$[$0-2].concat($$[$0]);                            
break;
case 98: case 99: case 100: case 101: case 102: case 103: case 105: case 106:
this.$ = new yy.ast.MemberExpression($$[$0-2], $$[$0], this._$); 
break;
case 104:
this.$ = new yy.ast.MemberExpression($$[$0-3], $$[$0], this._$); 
break;
case 112:
this.$ = new yy.ast.ObjectLiteral([], this._$); 
break;
case 113:
this.$ = new yy.ast.ObjectLiteral($$[$0-1], this._$); 
break;
case 115:
this.$ = $$[$0-2].concat($$[$0]); 
break;
case 116:
this.$ = {key:$$[$0-2], value:$$[$0]}; 
break;
case 117:
this.$ = new yy.ast.ArrayLiteral([], this._$); 
break;
case 118:
this.$ = new yy.ast.ArrayLiteral($$[$0-1], this._$); 
break;
case 119:
this.$ = new yy.ast.StringLiteral($$[$0], this._$); 
break;
case 120:
this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$); 
break;
case 121:
this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
break;
case 122:
this.$ = $$[$0];                                                      
break;
case 123:
this.$ = new yy.ast.TypableIdentifier($$[$0-2], $$[$0], [], false, this._$);     
break;
case 124:
this.$ = new yy.ast.TypableIdentifier($$[$0-4], $$[$0-2], [], true, this._$);      
break;
case 125:
this.$ = new yy.ast.TypableIdentifier($$[$0-3], $$[$0-1], $$[$0], false, this._$);     
break;
case 126:
this.$ = new yy.ast.TypableIdentifier($$[$0-5], $$[$0-3], $$[$0-2], true, this._$);      
break;
case 127:
this.$ = new yy.ast.TypeAssertion($$[$0-3], $$[$0-1], this._$);          
break;
case 128:
this.$ = new yy.ast.Identifier($$[$0], '', this._$);             
break;
case 129:
this.$ = new yy.ast.Identifier('this.attributes','', this._$)
break;
}
},
table: [o($V0,[2,130],{3:1,4:2,8:3,9:4,10:$V1}),{1:[3]},o($V2,[2,132],{5:6,27:7,28:8,29:9,30:10,36:11,48:12,31:$V3}),o($V0,[2,131],{9:14,10:$V1}),o($V4,[2,2]),{11:15,14:16,15:17,16:18,17:19,18:$V5,20:[1,21],21:[1,22]},{6:23,7:[2,134],34:24,50:$V6},o($V2,[2,133],{29:9,30:10,36:11,48:12,28:26,31:$V3}),o($V0,[2,15]),o($V0,[2,17]),o($V0,[2,140]),o($V0,[2,141]),o($V0,[2,142]),{32:[1,27],37:[1,28],49:[1,29]},o($V4,[2,3]),{12:[1,30]},{12:[2,5]},{12:[2,6]},{12:[2,7]},{12:[2,8]},o($V7,[2,9],{19:[1,31]}),{19:[1,32]},{14:35,15:36,18:$V5,22:33,24:34},{7:[1,37]},{7:[2,135]},{18:$V8,51:38},o($V0,[2,16]),{18:[1,40]},{18:[1,41]},{18:[1,42]},{13:43,127:$V9},{18:[1,45]},{18:[1,46]},{23:[1,47],25:[1,48]},o($Va,[2,13]),o($Va,[2,136]),o($Va,[2,137]),{1:[2,1]},o($Vb,[2,31],{52:49,57:$Vc}),o($Vd,[2,28]),{33:[1,51]},{33:[1,52],40:53,42:54,43:$Ve,99:[2,143]},{12:[1,56]},o($V4,[2,4]),o([7,10,18,19,23,25,31,33,45,50,53,56,57,60,62,67,70,95,100,104,131,132,133,134,135,136,137,138,139,140],[2,119]),o($V7,[2,10]),{12:[2,11]},{12:[2,12]},{14:58,15:59,18:$V5,26:57},{18:[1,64],53:[1,60],56:[1,61],58:62,59:63},{18:[1,65]},{34:66,50:$V6},{31:$Vf,34:70,38:67,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{41:83,99:[1,84]},{99:[2,144]},{18:$Vi,44:85,46:86,47:87,130:$Vj},{13:90,127:$V9},o($Va,[2,14]),o($Va,[2,138]),o($Va,[2,139]),{31:$Vf,34:70,38:92,50:$V6,54:91,55:[2,145],64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},o($Vk,[2,27]),o($Vb,[2,30]),o($Vb,[2,33],{60:[1,93]}),o($Vl,[2,34],{62:[1,94]}),o($Vd,[2,29]),{31:[1,95]},{31:[1,96],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},o($Vm,[2,43]),o($Vm,[2,45]),o($Vm,[2,150]),o($Vm,[2,151]),o($Vm,[2,152]),o($Vm,[2,153]),o($Vm,[2,47]),o($Vm,[2,46]),o($Vm,[2,71]),o($Vm,[2,154]),o($Vm,[2,155]),o($Vm,[2,156]),o($Vm,[2,157]),{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:98,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},{78:$Vw,84:$Vx,88:$Vy,97:$Vz},{33:[1,125]},{18:$Vi,47:129,79:128,100:[1,126],116:127,130:$Vj},{25:[1,131],45:[1,130]},o($VA,[2,22]),o($VA,[2,24]),o($VB,$VC),o($VB,[2,129]),{33:[1,132]},{55:[1,133]},{31:$Vf,34:70,50:$V6,55:[2,146],64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{13:137,61:134,63:135,64:136,65:$Vg,122:138,127:$V9,128:$Vu},{18:[1,139]},{35:[1,140]},{39:[1,141],78:$Vw,84:$Vx,88:$Vy,97:$Vz},o($Vm,[2,44]),{67:[1,142],68:143,69:145,70:$VD,104:$VE},{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:147,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:148,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},o($VF,[2,80]),o($VF,[2,158]),o($VF,[2,159],{57:$VG}),o($VF,[2,160],{71:150,42:151,43:$Ve,57:$VH,99:$VI,111:$VJ}),o($VF,[2,161]),o($VF,[2,162],{57:$VK}),o($VF,[2,163],{57:$VL}),o($VF,[2,164],{57:$VM}),o($VF,[2,165],{57:$VN}),o($VF,[2,166]),{122:159,128:$Vu},o($VF,[2,168],{57:$VO}),o($VF,[2,169],{71:161,42:162,43:$Ve,57:$VP,99:$VI,111:$VQ}),{18:$Vi,47:165,130:$Vj},{18:$Vi,47:129,79:128,116:166,130:$Vj},{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:167,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},{18:$VR,23:[1,168],124:169,125:170,126:171,127:$VS},{13:109,18:$Vi,21:$Vn,43:$Vo,45:[1,174],47:113,66:176,98:104,99:$Vp,103:175,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},o([18,19,23,25,33,45,50,53,56,60,62,67,70,95,100,104,131,132,133,134,135,136,137,138,139,140],[2,120]),{128:[2,121]},{18:$Vi,47:129,79:177,130:$Vj},{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:178,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},{18:$Vi,47:179,130:$Vj},{13:185,18:$Vi,21:$Vn,43:$Vo,47:180,98:181,99:[1,182],109:186,110:187,118:183,119:184,120:188,127:$V9,130:$Vj},{31:$Vf,34:70,38:189,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{33:[2,94]},{25:$VT,100:[1,190]},o($VU,[2,96]),o($VV,[2,122],{62:[1,192]}),o([25,43,80,99,100,117],[2,21]),{18:$Vi,46:193,47:87,130:$Vj},o($V0,[2,25]),{18:$V8,51:194},o($Vb,[2,32]),o($Vb,[2,36]),o($Vb,[2,147]),o($Vb,[2,148]),o($Vb,[2,149]),o($Vl,[2,35]),{33:[1,195]},{33:[1,196]},o($VW,[2,37]),{67:[1,197],69:198,70:$VD},{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:199,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},o($VX,[2,39]),{18:$V8,51:200},{19:$VY,50:[1,207],53:[1,205],60:[1,214],95:[1,218],100:[1,201],104:$VE,105:202,108:204,131:[1,206],132:[1,208],133:[1,209],134:[1,210],135:[1,211],136:[1,212],137:[1,213],138:[1,215],139:[1,216],140:[1,217]},o($VF,[2,79]),{18:$Vi,47:219,130:$Vj},o($VZ,$V_),{71:220,99:$VI},{18:$Vi,47:221,130:$Vj},{18:[1,223],47:222,130:$Vj},{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:176,98:104,99:$Vp,100:[1,224],103:225,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},{18:$Vi,47:226,130:$Vj},{18:$Vi,47:227,130:$Vj},{18:$Vi,47:228,130:$Vj},{18:$Vi,47:229,130:$Vj},o($VF,[2,167]),{18:$Vi,47:230,130:$Vj},o($VZ,$V$),{71:231,99:$VI},{18:$Vi,47:232,130:$Vj},{18:$Vi,47:233,130:$Vj},o($VF,[2,90],{71:234,99:$VI}),{25:$VT,117:[1,235]},o($V01,[2,93],{104:$VE}),o($VZ,[2,112]),{23:[1,236],25:[1,237]},o($Va,[2,114]),{62:[1,238]},{62:[2,184]},{62:[2,185]},o($VZ,[2,117]),{25:$V11,45:[1,239]},o($V21,[2,74],{104:$VE}),{25:[1,242],80:[1,241]},{33:[1,243],104:$VE},{33:[1,244]},{33:[1,246],42:162,43:$Ve,57:$VP,71:245,99:$VI,111:$VQ},{33:[1,247],42:151,43:$Ve,57:$VH,71:248,99:$VI,111:$VJ},{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:249,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},{57:$VM},{57:$VL},{57:$VN},{57:$VG},{57:$VK},{57:$VO},{31:[1,250],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{33:[2,95]},{18:$Vi,47:129,79:251,130:$Vj},{18:$Vi,47:252,130:$Vj},o($VA,[2,23]),{53:[1,253],57:$Vc},o($V0,[2,18]),o($V0,[2,19]),o($VW,[2,38]),o($VX,[2,40]),{62:[1,254],104:$VE},o($VX,[2,41],{71:255,57:$Vc,99:$VI}),o($VF,[2,76],{57:$V31}),{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:257,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},{18:$Vi,47:258,130:$Vj},o($V41,[2,81]),o($V41,[2,170]),o($V41,[2,171]),o($V41,[2,172]),o($V41,[2,173]),o($V41,[2,174]),o($V41,[2,175]),o($V41,[2,176]),o($V41,[2,177]),o($V41,[2,178]),o($V41,[2,179]),o($V41,[2,180]),o($V41,[2,181]),o($V41,[2,182]),o($V41,[2,183]),o($V51,[2,102]),o($VZ,[2,85]),o($V51,[2,106]),o($VZ,[2,88]),o($VZ,$VC,{71:259,99:$VI}),o($VZ,[2,72]),{25:$V11,100:[1,260]},o($V51,[2,103]),o($V51,[2,100]),o($V51,[2,99]),o($V51,[2,101]),o($V51,[2,105]),o($VZ,[2,83]),o($V51,[2,98]),o($VZ,[2,86],{71:261,99:$VI}),o($VF,[2,91]),{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:262,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},o($VZ,[2,113]),{18:$VR,125:263,126:171,127:$VS},{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:264,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},o($VZ,[2,118]),{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:265,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:266,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},{18:$Vi,47:129,79:267,130:$Vj},{31:$Vf,34:70,38:268,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{31:[1,271],89:269,91:270},{33:[1,272],57:$V$},o($Vm,[2,66]),o($Vm,[2,67]),{33:[1,273],57:$V_},{19:$VY,100:[1,274],104:$VE},{39:[1,275],78:$Vw,84:$Vx,88:$Vy,97:$Vz},o($VU,[2,97]),o($VV,[2,123],{42:277,43:[1,276]}),o($Vk,[2,26]),{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:278,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},o($VX,[2,42]),{18:$Vi,47:279,130:$Vj},{100:[1,280],104:$VE},{100:[1,281]},o($VZ,[2,89]),o($VZ,[2,73]),o($VZ,[2,87]),o($V01,[2,92],{104:$VE}),o($Va,[2,115]),o($Va,[2,116],{104:$VE}),o($V21,[2,75],{104:$VE}),{33:[1,282],104:$VE},{25:[1,284],80:[1,283]},{31:[1,285],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,86:286,87:79,96:80,101:73,102:$Vh},{31:[1,287],91:288},{31:[2,61]},{92:$V61},o($Vm,[2,65]),o($Vm,[2,68]),{33:[1,291],57:$V31,71:290,99:$VI},{33:[1,292]},{18:$Vi,44:85,45:[1,293],46:86,47:87,130:$Vj},o($VV,[2,125],{43:[1,294]}),o($V01,[2,77],{104:$VE}),o($V51,[2,104]),o($VF,[2,78]),o($VZ,[2,127]),{31:$Vf,34:70,38:295,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:296,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},{18:$Vi,47:129,79:297,130:$Vj},{78:$Vw,82:$V71,84:$Vx,85:[1,298],88:$Vy,97:$Vz},o($Vm,[2,55]),{82:[1,300],90:[1,301],92:$V61},{31:[2,62]},{93:[1,302],95:[1,303]},{33:[1,304]},o($Vm,[2,70]),o($V0,[2,20]),o($VV,[2,124]),{45:[1,305]},{31:[1,306],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{33:[1,307],104:$VE},{80:[1,308]},{33:[1,309]},{33:[1,310],84:[1,311]},{33:[1,312]},{33:[1,313]},{13:314,127:$V9},{18:$Vi,47:315,130:$Vj},o($Vm,[2,69]),o($VV,[2,126]),{78:$Vw,81:[1,316],82:[1,317],84:$Vx,88:$Vy,97:$Vz},{31:$Vf,34:70,38:318,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:319,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},o($Vm,[2,54]),{31:$Vf,34:70,38:320,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{13:109,18:$Vi,21:$Vn,43:$Vo,47:113,66:321,98:104,99:$Vp,106:$Vq,107:101,109:103,110:106,112:102,113:$Vr,114:105,115:$Vs,117:$Vt,118:108,119:107,120:112,122:110,123:111,127:$V9,128:$Vu,129:$Vv,130:$Vj},{31:$Vf,34:70,38:322,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},o($Vm,[2,60]),{33:[1,323]},{33:[1,324]},{33:[1,325]},{33:[1,326]},{31:[1,327],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{33:[1,328],104:$VE},{31:[1,329],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{33:[1,330],104:$VE},{31:[1,331],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{31:$Vf,34:70,38:332,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{31:$Vf,34:70,38:333,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},o($Vm,[2,48]),{31:$Vf,34:70,38:334,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{78:$Vw,81:[1,335],82:[1,336],84:$Vx,88:$Vy,97:$Vz},{31:$Vf,34:70,38:337,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{78:$Vw,84:$Vx,85:[1,338],88:$Vy,97:$Vz},{31:$Vf,34:70,38:339,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{78:$Vw,84:$Vx,88:$Vy,90:[1,340],97:$Vz},{31:[1,341],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{31:[1,342],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{31:[1,343],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{33:[1,344]},{33:[1,345]},{31:[1,346],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{33:[1,347]},{31:[1,348],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,86:349,87:79,96:80,101:73,102:$Vh},{33:[1,350]},{78:$Vw,84:$Vx,88:$Vy,94:[1,351],97:$Vz},{78:$Vw,84:$Vx,88:$Vy,94:[1,352],97:$Vz},{78:$Vw,81:[1,353],84:$Vx,88:$Vy,97:$Vz},o($Vm,[2,49]),{31:$Vf,34:70,38:354,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{78:$Vw,81:[1,355],82:[1,356],84:$Vx,88:$Vy,97:$Vz},o($Vm,[2,56]),{78:$Vw,82:$V71,84:$Vx,85:[1,357],88:$Vy,97:$Vz},o($Vm,[2,58]),o($Vm,[2,59]),{33:[1,358]},{33:[1,359]},{33:[1,360]},{31:[1,361],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},{33:[1,362]},{33:[1,363]},{33:[1,364]},{31:[2,63]},{31:[2,64]},o($Vm,[2,51]),{78:$Vw,81:[1,365],84:$Vx,88:$Vy,97:$Vz},o($Vm,[2,50]),{31:$Vf,34:70,38:366,50:$V6,64:75,65:$Vg,72:68,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},o($Vm,[2,57]),{33:[1,367]},{31:[1,368],34:70,50:$V6,64:75,65:$Vg,72:97,73:69,74:72,75:71,76:74,77:77,83:78,87:79,96:80,101:73,102:$Vh},o($Vm,[2,52]),{78:$Vw,81:[1,369],84:$Vx,88:$Vy,97:$Vz},{33:[1,370]},o($Vm,[2,53])],
defaultActions: {16:[2,5],17:[2,6],18:[2,7],19:[2,8],24:[2,135],37:[2,1],46:[2,11],47:[2,12],54:[2,144],120:[2,121],126:[2,94],172:[2,184],173:[2,185],190:[2,95],270:[2,61],288:[2,62],358:[2,63],359:[2,64]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return;               
break;
case 1:return 10;
break;
case 2:return 12;
break;
case 3:return 55;
break;
case 4:this.begin('CONTROL');      return 31;
break;
case 5:this.begin('COMMENT');      return;
break;
case 6:this.begin('CHILDREN');     return 53;
break;
case 7:this.begin('CHILDREN');     return 56;
break;
case 8:this.begin('EXPRESSION');   return 65;
break;
case 9:return 37;
break;
case 10:return 39;
break;
case 11:return 78;
break;
case 12:return 81;
break;
case 13:return 84;
break;
case 14:return 85;
break;
case 15:return 82;
break;
case 16:return 'ELSEIF';
break;
case 17:return 80;
break;
case 18:return 'SWITCH';
break;
case 19:return 'ENDSWITCH';
break;
case 20:return 'DEFAULT';
break;
case 21:return 92;
break;
case 22:return 94;
break;
case 23:return 97;
break;
case 24:return 49;
break;
case 25:return 12;
break;
case 26:return 'ENDEXPORT';
break;
case 27:return 32;
break;
case 28:return 35;
break;
case 29:return 88;
break;
case 30:return 90;
break;
case 31:return 'OTHERWISE';
break;
case 32:return 'ENDOTHERWISE';
break;
case 33:return 95;
break;
case 34:return 93;
break;
case 35:this.popState();            return 33;
break;
case 36:return 113;
break;
case 37:return 70;
break;
case 38:return 117;
break;
case 39:return 111;
break;
case 40:return '->';
break;
case 41:return '..';
break;
case 42:return 95;
break;
case 43:this.popState();            return 67;
break;
case 44:this.begin('EXPRESSION');   return 65;
break;
case 45:this.begin('CONTROL');      return 31;
break;
case 46:this.begin('COMMENT');      return;
break;
case 47:this.popState();            return 55;
break;
case 48:this.popState();            return 50;
break;
case 49:this.popState();            return 102;
break;
case 50:this.popState();            return;
break;
case 51:return 129;
break;
case 52:return 128;
break;
case 53:return 127;
break;
case 54:return 53;
break;
case 55:return 50;
break;
case 56:return 99;
break;
case 57:return 100;
break;
case 58:return 43;
break;
case 59:return 45;
break;
case 60:return ';'
break;
case 61:return 62;
break;
case 62:return ':::';
break;
case 63:return 60
break;
case 64:return 133;
break;
case 65:return 134;
break;
case 66:return 131;
break;
case 67:return 132;
break;
case 68:return 135;
break;
case 69:return 137;
break;
case 70:return 20;
break;
case 71:return 136;
break;
case 72:return 115;
break;
case 73:return 138;
break;
case 74:return 139;
break;
case 75:return 140;
break;
case 76:return 106;
break;
case 77:return 25;
break;
case 78:return 104;
break;
case 79:return 57;
break;
case 80:return 21;
break;
case 81:return 23;
break;
case 82:return 130;
break;
case 83:return 19;
break;
case 84:return 18;
break;
case 85:return 7;
break;
case 86:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:import)/,/^(?:from)/,/^(?:<\/)/,/^(?:\{%)/,/^(?:<!--)/,/^(?:>)/,/^(?:\/>)/,/^(?:\{\{)/,/^(?:macro)/,/^(?:endmacro)/,/^(?:for)/,/^(?:endfor)/,/^(?:if)/,/^(?:endif)/,/^(?:else)/,/^(?:elseif)/,/^(?:in)/,/^(?:switch)/,/^(?:endswitch)/,/^(?:default)/,/^(?:case)/,/^(?:endcase)/,/^(?:call)/,/^(?:export)/,/^(?:from)/,/^(?:endexport)/,/^(?:view)/,/^(?:endview)/,/^(?:match)/,/^(?:endmatch)/,/^(?:otherwise)/,/^(?:endotherwise)/,/^(?:instanceof)/,/^(?:typeof)/,/^(?:%\})/,/^(?:new)/,/^(?:\|)/,/^(?:=>)/,/^(?:::)/,/^(?:->)/,/^(?:\.\.)/,/^(?:instanceof)/,/^(?:\}\})/,/^(?:\{\{)/,/^(?:\{%)/,/^(?:<!--)/,/^(?:<\/)/,/^(?:<)/,/^(?:[^\/<>{%}]+)/,/^(?:(.|\r|\n)*?-->)/,/^(?:true|false)/,/^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?::::)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\\)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\^)/,/^(?:!)/,/^(?:,)/,/^(?:\?)/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:@)/,/^(?:as)/,/^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"EXPRESSION":{"rules":[0,36,37,38,39,40,41,42,43,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":false},"CONTROL":{"rules":[0,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":false},"COMMENT":{"rules":[0,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":false},"CHILDREN":{"rules":[0,44,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ParserImpl;
exports.Parser = ParserImpl.Parser;
exports.parse = function () { return ParserImpl.parse.apply(ParserImpl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}