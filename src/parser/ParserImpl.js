/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,31,44],$V1=[1,5],$V2=[7,44],$V3=[1,13],$V4=[7,10,31,44],$V5=[1,23],$V6=[1,26],$V7=[12,23,25],$V8=[1,47],$V9=[23,25],$Va=[47,50,56,135],$Vb=[39,47,50,56,64,68,135],$Vc=[1,53],$Vd=[1,89],$Ve=[1,90],$Vf=[1,91],$Vg=[1,92],$Vh=[1,88],$Vi=[1,108],$Vj=[1,102],$Vk=[1,103],$Vl=[7,31,44,49,62,98],$Vm=[47,50,54,56,135],$Vn=[23,25,33,39,40,44,47,50,54,56,59,64,68,104,122,123,127,135,136,137,138,139,140,141,142,143,144,145],$Vo=[1,118],$Vp=[25,40,123],$Vq=[23,25,33,40,44,47,54,59,64,68,104,123,136,137,138,139,140,141,142,143,144,145],$Vr=[2,88],$Vs=[1,119],$Vt=[1,120],$Vu=[2,108],$Vv=[1,121],$Vw=[1,131],$Vx=[31,44,49,62,98],$Vy=[1,148],$Vz=[1,149],$VA=[1,150],$VB=[1,151],$VC=[1,152],$VD=[1,183],$VE=[1,181],$VF=[23,25,33,59,64,68,104],$VG=[1,188],$VH=[1,186],$VI=[1,195],$VJ=[1,187],$VK=[1,189],$VL=[1,190],$VM=[1,191],$VN=[1,192],$VO=[1,193],$VP=[1,194],$VQ=[1,196],$VR=[1,197],$VS=[1,198],$VT=[1,208],$VU=[23,25,33,40,44,47,54,59,64,68,104,122,123,136,137,138,139,140,141,142,143,144,145],$VV=[31,44,47,49,50,56,62,98,135],$VW=[64,68],$VX=[21,39,122,124,125,126,128,135],$VY=[33,122],$VZ=[23,25,33,40,59,64,68,104],$V_=[25,40],$V$=[1,282],$V01=[1,283],$V11=[1,288],$V21=[1,292];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"module_option0":4,"module_option1":5,"module_option2":6,"EOF":7,"imports":8,"import_statement":9,"IMPORT":10,"import_member":11,"FROM":12,"string_literal":13,"default_member":14,"alias_member":15,"aggregate_member":16,"composite_member":17,"identifier":18,"AS":19,"*":20,"{":21,"member_list":22,"}":23,"member_list_group0":24,",":25,"member_list_group1":26,"exports":27,"export":28,"export_group0":29,"view_statement":30,"{%":31,"VIEW":32,"%}":33,"tag":34,"ENDVIEW":35,"macro_statement":36,"MACRO":37,"ENDMACRO":38,"(":39,")":40,"arguments":41,"export_from_statement":42,"EXPORT":43,"<":44,"tagname":45,"attributes":46,">":47,"tag_option0":48,"</":49,"/>":50,"tagname_group0":51,"attribute":52,"attribute_name":53,"=":54,"attribute_value":55,"..":56,"member_access":57,"attribute_group0":58,":":59,"interpolation":60,"attribute_value_group0":61,"{{":62,"interpolation_group0":63,"}}":64,"expression":65,"filters":66,"filter":67,"|":68,"children":69,"child":70,"control":71,"characters":72,"control_group0":73,"for_statement":74,"FOR":75,"IN":76,"for_children":77,"ENDFOR":78,"ELSE":79,"if_statement":80,"IF":81,"ENDIF":82,"else_clause":83,"else_if_clause":84,"switch_statement":85,"SWITCH":86,"case_statements":87,"ENDSWITCH":88,"case_statement":89,"CASE":90,"case_statement_group0":91,"ENDCASE":92,"DEFAULT":93,"include_statement":94,"INCLUDE":95,"include_statement_group0":96,"include_statement_option0":97,"CHARACTERS":98,"value_expression":99,"grouped_expression":100,"ternary_expression":101,"binary_expression":102,"unary_expression":103,"?":104,"binary_operator":105,"binary_operator_group0":106,"!":107,"variable_expression":108,"literal_expression":109,"property_expression":110,"function_expression":111,"method_expression":112,"bind_expression":113,"new_expression":114,"object_literal":115,"array_literal":116,"number_literal":117,"boolean_literal":118,"key_value_pairs":119,"key_value_pair":120,"key_value_pair_group0":121,"[":122,"]":123,"STRING_LITERAL":124,"NUMBER_LITERAL":125,"BOOLEAN":126,"::":127,"NEW":128,"new_expression_group0":129,"function_literal":130,"=>":131,"parameters":132,"parameter_list":133,".":134,"IDENTIFIER":135,">=":136,"<=":137,"==":138,"!=":139,"+":140,"/":141,"-":142,"&&":143,"||":144,"^":145,"indentifier":146,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",10:"IMPORT",12:"FROM",19:"AS",20:"*",21:"{",23:"}",25:",",31:"{%",32:"VIEW",33:"%}",35:"ENDVIEW",37:"MACRO",38:"ENDMACRO",39:"(",40:")",43:"EXPORT",44:"<",47:">",49:"</",50:"/>",54:"=",56:"..",59:":",62:"{{",64:"}}",68:"|",75:"FOR",76:"IN",78:"ENDFOR",79:"ELSE",81:"IF",82:"ENDIF",86:"SWITCH",88:"ENDSWITCH",90:"CASE",92:"ENDCASE",93:"DEFAULT",95:"INCLUDE",98:"CHARACTERS",104:"?",107:"!",122:"[",123:"]",124:"STRING_LITERAL",125:"NUMBER_LITERAL",126:"BOOLEAN",127:"::",128:"NEW",131:"=>",134:".",135:"IDENTIFIER",136:">=",137:"<=",138:"==",139:"!=",140:"+",141:"/",142:"-",143:"&&",144:"||",145:"^",146:"indentifier"},
productions_: [0,[3,4],[8,1],[8,2],[9,4],[11,1],[11,1],[11,1],[11,1],[14,1],[15,3],[16,3],[17,3],[22,1],[22,3],[27,1],[27,2],[28,1],[30,8],[36,8],[36,10],[36,11],[42,6],[34,8],[34,4],[45,1],[46,2],[46,0],[52,3],[52,1],[52,2],[52,5],[53,1],[53,3],[55,1],[55,1],[60,3],[60,4],[66,1],[66,2],[67,2],[67,5],[69,1],[69,2],[70,1],[70,1],[70,1],[70,1],[71,1],[74,7],[74,9],[74,11],[77,4],[77,7],[80,8],[80,6],[83,7],[83,9],[83,7],[84,6],[84,6],[85,8],[87,1],[87,2],[89,8],[89,8],[94,5],[72,1],[41,1],[41,3],[65,1],[65,1],[65,1],[65,1],[65,1],[100,3],[101,5],[102,3],[102,3],[105,1],[103,2],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[108,1],[109,1],[109,1],[109,1],[109,1],[109,1],[115,2],[115,3],[119,1],[119,3],[120,3],[116,2],[116,3],[13,1],[117,1],[118,1],[111,4],[111,3],[112,4],[112,3],[110,1],[113,3],[113,6],[113,3],[113,6],[114,5],[130,3],[130,3],[132,2],[132,3],[132,3],[133,3],[133,3],[57,3],[57,3],[18,1],[4,0],[4,1],[5,0],[5,1],[6,0],[6,1],[24,1],[24,1],[26,1],[26,1],[29,1],[29,1],[29,1],[48,0],[48,1],[51,1],[51,1],[58,1],[58,1],[61,1],[61,1],[63,1],[63,1],[73,1],[73,1],[73,1],[73,1],[91,1],[91,1],[91,1],[96,1],[96,1],[96,1],[96,1],[97,0],[97,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[121,1],[121,1],[129,1],[129,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ =
            new yy.ast.Module(
            $$[$0-3] || [],
            $$[$0-2] || [],
            $$[$0-1] || null, this._$); return this.$;
            
break;
case 2:
this.$ =  [$$[$0]];         
break;
case 3: case 39: case 43: case 63:
this.$ = $$[$0-1].concat($$[$0]); 
break;
case 4:
this.$ = new yy.ast.ImportStatement($$[$0-2], $$[$0], this._$);
break;
case 9:
this.$ = new yy.ast.DefaultMember($$[$0], this._$);
break;
case 10:
this.$ = new yy.ast.AliasMember($$[$0-2], $$[$0], this._$);
break;
case 11:
this.$ = new yy.ast.AggregateMember($$[$0], this._$);
break;
case 12:
this.$ = new yy.ast.CompositeMember($$[$0-1], this._$);
break;
case 13:
this.$ = [$$[$0]];
break;
case 14:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 15: case 96:
this.$ = [$$[$0]]; 
break;
case 16: case 26:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 17:
this.$ = $$[$0];                                           
break;
case 18:
this.$ = new yy.ast.ViewStatement($$[$0-5], $$[$0-3], this._$);     
break;
case 19:
this.$ = new yy.ast.MacroStatement($$[$0-5], [], $$[$0-3], this._$);    
break;
case 20:
this.$ = new yy.ast.MacroStatement($$[$0-7], [], $$[$0-3], this._$);    
break;
case 21:
this.$ = new yy.ast.MacroStatement($$[$0-8], $$[$0-6], $$[$0-3], this._$);    
break;
case 22:
this.$ = new yy.ast.ExportFromStatement($$[$0-3], $$[$0-1], this._$);  
break;
case 23:

             yy.help.ensureTagsMatch($$[$0-6], $$[$0]);
             this.$ = new yy.ast.Tag($$[$0-6], $$[$0-5], $$[$0-3]?$$[$0-3]:[], this._$);
             
break;
case 24:
 this.$ = new yy.ast.Tag($$[$0-2], $$[$0-1], [], this._$); 
break;
case 25: case 34: case 35: case 48: case 123:
this.$ = $$[$0];
break;
case 27:
this.$ = [];
break;
case 28:
this.$ = new yy.ast.Attribute($$[$0-2].name, $$[$0-2].namespace, $$[$0], this._$);
break;
case 29:
this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace,
            new yy.ast.BooleanLiteral(true, this._$),this._$);
break;
case 30:
this.$ = new yy.ast.AttributeSpread($$[$0], '', this._$);
break;
case 31:
this.$ = new yy.ast.AttributeSpread($$[$0], $$[$0-2],  this._$);
break;
case 32:
this.$ = {namespace:null, name:$$[$0]};
break;
case 33:
this.$ = {namespace:$$[$0-2], name:$$[$0]};
break;
case 36:
this.$ = new yy.ast.Interpolation($$[$0-1], [], this._$);
break;
case 37:
this.$ = new yy.ast.Interpolation($$[$0-2], $$[$0-1], this._$);
break;
case 38:
this.$ =  [$$[$0]];     
break;
case 40:
this.$ = new yy.ast.Filter($$[$0], [], this._$);
break;
case 41:
this.$ = new yy.ast.Filter($$[$0-3], $$[$0-1], this._$);
break;
case 42: case 62: case 68:
this.$ = [$$[$0]];          
break;
case 49:
this.$ = new yy.ast.ForStatement($$[$0-4], 'index', 'array', $$[$0-2], $$[$0], this._$);
break;
case 50:
this.$ = new yy.ast.ForStatement($$[$0-6], $$[$0-4], 'array', $$[$0-2], $$[$0], this._$);
break;
case 51:
this.$ = new yy.ast.ForStatement($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2], $$[$0], this._$);
break;
case 52: case 53:
this.$ = $$[$0-3];
break;
case 54:
this.$ = new yy.ast.IfStatement($$[$0-5], $$[$0-3], null, this._$); 
break;
case 55:
this.$ = new yy.ast.IfStatement($$[$0-3], $$[$0-1], $$[$0], this._$); 
break;
case 56:
this.$ = new yy.ast.ElseClause($$[$0-3], this._$);                              
break;
case 57:
this.$ = new yy.ast.ElseIfClause($$[$0-5], $$[$0-3], null,  this._$);                 
break;
case 58:
this.$ = new yy.ast.ElseIfClause($$[$0-3], $$[$0-1], $$[$0], this._$);                    
break;
case 59:
this.$ = new yy.ast.ElseIfStatement($$[$0-2], $$[$0], this._$);           
break;
case 61:
this.$ = new yy.ast.SwitchStatement($$[$0-5], $$[$0-3], this._$);
break;
case 64:
this.$ = new yy.ast.CaseStatement($$[$0-5], $$[$0-3], this._$);
break;
case 65:
this.$ = new yy.ast.CaseStatement(null, $$[$0-3], this._$);
break;
case 66:
this.$ = new yy.ast.IncludeStatement($$[$0-2], $$[$0-1]? $$[$0-1] : null, this._$);
break;
case 67:
this.$ = new yy.ast.Characters($$[$0], this._$); 
break;
case 69: case 97:
this.$ = $$[$0-2].concat($$[$0]); 
break;
case 75:
this.$ = $$[$0-1];
break;
case 76:
this.$ = new yy.ast.TernaryExpression($$[$0-4], $$[$0-2], $$[$0], this._$);
break;
case 77: case 78:
this.$ = new yy.ast.BinaryExpression($$[$0-2], $$[$0-1], $$[$0], this._$);
break;
case 79:
 this.$ = yy.help.convertOperator($$[$0]);
break;
case 80:
this.$ = new yy.ast.UnaryExpression($$[$0-1], $$[$0], this._$);
break;
case 88:
this.$ = new yy.ast.VariableExpression($$[$0], this._$); 
break;
case 94:
this.$ = new yy.ast.ObjectLiteral([], this._$); 
break;
case 95:
this.$ = new yy.ast.ObjectLiteral($$[$0-1], this._$); 
break;
case 98:
this.$ = {key:$$[$0-2], value:$$[$0]}; 
break;
case 99:
this.$ = new yy.ast.ArrayLiteral([], this._$); 
break;
case 100:
this.$ = new yy.ast.ArrayLiteral($$[$0-1], this._$); 
break;
case 101:
this.$ = new yy.ast.StringLiteral($$[$0], this._$); 
break;
case 102:
this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$); 
break;
case 103:
this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
break;
case 104:
this.$ = new yy.ast.FunctionExpression($$[$0-3], $$[$0-1], this._$);
break;
case 105:
this.$ = new yy.ast.FunctionExpression($$[$0-2], [], this._$);
break;
case 106:
this.$ = new yy.ast.MethodExpression($$[$0-3], $$[$0-1], this._$);
break;
case 107:
this.$ = new yy.ast.MethodExpression($$[$0-2], [], this._$);
break;
case 108:
this.$ = new yy.ast.PropertyExpression($$[$0], this._$); 
break;
case 109:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [] , this._$);
break;
case 110:
this.$ = new yy.ast.BindExpression($$[$0-5], $$[$0-3], $$[$0-1] , this._$);
break;
case 111:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [], this._$);
break;
case 112:
this.$ = new yy.ast.BindExpression($$[$0-5], $$[$0-3], $$[$0-1], this._$);
break;
case 113:
this.$ = new yy.ast.NewExpression($$[$0-3], $$[$0-1], this._$);
break;
case 114:
this.$ = new yy.ast.FunctionLiteral([$$[$0-2]], $$[$0], this._$);   
break;
case 115:
this.$ = new yy.ast.FunctionLiteral($$[$0-2], $$[$0], this._$);   
break;
case 116:
this.$ = [];                                       
break;
case 117:
this.$ = [$$[$0-1]];                                     
break;
case 118:
this.$ = $$[$0-1];                                       
break;
case 119:
this.$ = [$$[$0-2], $$[$0]];                                 
break;
case 120:
this.$ = $$[$0-2].concat($$[$0]);                            
break;
case 121: case 122:
this.$ = $$[$0-2]+'.'+$$[$0];               
break;
}
},
table: [o($V0,[2,124],{3:1,4:2,8:3,9:4,10:$V1}),{1:[3]},o($V2,[2,126],{5:6,27:7,28:8,29:9,30:10,36:11,42:12,31:$V3}),o($V0,[2,125],{9:14,10:$V1}),o($V4,[2,2]),{11:15,14:16,15:17,16:18,17:19,18:20,20:[1,21],21:[1,22],135:$V5},{6:24,7:[2,128],34:25,44:$V6},o($V2,[2,127],{29:9,30:10,36:11,42:12,28:27,31:$V3}),o($V0,[2,15]),o($V0,[2,17]),o($V0,[2,134]),o($V0,[2,135]),o($V0,[2,136]),{32:[1,28],37:[1,29],43:[1,30]},o($V4,[2,3]),{12:[1,31]},{12:[2,5]},{12:[2,6]},{12:[2,7]},{12:[2,8]},o($V7,[2,9],{19:[1,32]}),{19:[1,33]},{14:36,15:37,18:20,22:34,24:35,135:$V5},o([12,19,23,25,33,39,40,44,47,50,54,56,59,64,68,76,104,122,123,127,131,134,135,136,137,138,139,140,141,142,143,144,145],[2,123]),{7:[1,38]},{7:[2,129]},{18:41,45:39,51:40,57:42,135:$V5},o($V0,[2,16]),{18:43,135:$V5},{18:44,135:$V5},{18:45,135:$V5},{13:46,124:$V8},{18:48,135:$V5},{18:49,135:$V5},{23:[1,50],25:[1,51]},o($V9,[2,13]),o($V9,[2,130]),o($V9,[2,131]),{1:[2,1]},o($Va,[2,27],{46:52}),o($Vb,[2,25]),o($Vb,[2,139],{134:$Vc}),o($Vb,[2,140]),{33:[1,54]},{33:[1,55],39:[1,56]},{12:[1,57]},o($V4,[2,4]),o([7,10,23,25,31,33,40,44,47,50,54,56,59,64,68,104,123,135,136,137,138,139,140,141,142,143,144,145],[2,101]),o($V7,[2,10]),{12:[2,11]},{12:[2,12]},{14:59,15:60,18:20,26:58,135:$V5},{18:66,47:[1,61],50:[1,62],52:63,53:64,56:[1,65],135:$V5},{18:67,57:68,135:$V5},{34:69,44:$V6},{34:70,44:$V6},{13:84,18:81,21:$Vd,40:[1,71],41:72,57:87,99:73,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{13:93,124:$V8},o($V9,[2,14]),o($V9,[2,132]),o($V9,[2,133]),{31:$Vi,34:97,44:$V6,48:94,49:[2,137],60:99,62:$Vj,69:95,70:96,71:98,72:100,73:101,74:104,80:105,85:106,94:107,98:$Vk},o($Vl,[2,24]),o($Va,[2,26]),o($Va,[2,29],{54:[1,109]}),{18:112,39:[1,111],57:110,135:$V5},o($Vm,[2,32],{59:[1,113]}),o($Vn,[2,121],{134:$Vc}),o($Vn,[2,122]),{31:[1,114]},{31:[1,115]},{33:[1,116]},{25:$Vo,40:[1,117]},o($Vp,[2,68]),o($Vq,[2,81]),o($Vq,[2,82]),o($Vq,[2,83]),o($Vq,[2,84]),o($Vq,[2,85]),o($Vq,[2,86]),o($Vq,[2,87]),o($Vq,$Vr,{39:$Vs,127:$Vt,134:$Vc}),o($Vq,[2,89]),o($Vq,[2,90]),o($Vq,[2,91]),o($Vq,[2,92]),o($Vq,[2,93]),o($Vq,$Vu,{39:$Vv,127:[1,122]}),{18:112,57:125,129:123,135:$V5,146:[1,124]},{18:130,23:[1,126],119:127,120:128,121:129,124:$Vw,135:$V5},{13:84,18:81,21:$Vd,41:133,57:87,99:73,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,123:[1,132],124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},o([23,25,33,40,44,47,50,54,56,59,64,68,104,123,135,136,137,138,139,140,141,142,143,144,145],[2,102]),o($Vq,[2,103]),{33:[1,134]},{49:[1,135]},{31:$Vi,34:97,44:$V6,49:[2,138],60:99,62:$Vj,70:136,71:98,72:100,73:101,74:104,80:105,85:106,94:107,98:$Vk},o($Vx,[2,42]),o($Vx,[2,44]),o($Vx,[2,45]),o($Vx,[2,46]),o($Vx,[2,47]),o($Vx,[2,48]),{13:84,18:145,21:$Vd,39:[1,147],57:87,63:137,65:138,99:144,100:140,101:141,102:142,103:143,107:$Vy,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,130:139,132:146,135:$V5},o($Vx,[2,67]),o($Vx,[2,147]),o($Vx,[2,148]),o($Vx,[2,149]),o($Vx,[2,150]),{75:$Vz,81:$VA,86:$VB,95:$VC},{13:156,55:153,60:154,61:155,62:$Vj,117:157,124:$V8,125:$Vf},o($Va,[2,30]),{18:160,57:159,58:158,135:$V5},{134:$Vc},{18:161,135:$V5},{35:[1,162]},{38:[1,163]},{34:164,44:$V6},{33:[1,165]},{13:84,18:81,21:$Vd,57:87,99:166,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{13:84,18:81,21:$Vd,40:[1,168],41:167,57:87,99:73,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{18:169,135:$V5},{13:84,18:81,21:$Vd,40:[1,171],41:170,57:87,99:73,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{18:172,135:$V5},{39:[1,173]},{39:[2,175]},{39:[2,176]},o($Vq,[2,94]),{23:[1,174],25:[1,175]},o($V9,[2,96]),{59:[1,176]},{59:[2,173]},{59:[2,174]},o($Vq,[2,99]),{25:$Vo,123:[1,177]},o($V0,[2,22]),{18:41,45:178,51:40,57:42,135:$V5},o($Vx,[2,43]),{64:[1,179]},{64:[2,145],66:180,67:182,68:$VD,104:$VE},{64:[2,146]},o($VF,[2,70],{105:184,106:185,44:$VG,47:$VH,54:$VI,136:$VJ,137:$VK,138:$VL,139:$VM,140:$VN,141:$VO,142:$VP,143:$VQ,144:$VR,145:$VS}),o($VF,[2,71]),o($VF,[2,72]),o($VF,[2,73]),o($VF,[2,74],{106:185,105:199,44:$VG,47:$VH,54:$VI,136:$VJ,137:$VK,138:$VL,139:$VM,140:$VN,141:$VO,142:$VP,143:$VQ,144:$VR,145:$VS}),o([44,47,54,64,68,104,136,137,138,139,140,141,142,143,144,145],$Vr,{39:$Vs,127:$Vt,131:[1,200],134:$Vc}),{131:[1,201]},{13:84,18:204,21:$Vd,39:$VT,40:[1,203],57:87,99:206,100:207,102:202,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,133:205,135:$V5},{13:84,18:81,21:$Vd,39:$VT,57:87,65:209,99:144,100:140,101:141,102:142,103:143,107:$Vy,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{18:210,135:$V5},{13:84,18:81,21:$Vd,39:$VT,57:87,65:211,99:144,100:140,101:141,102:142,103:143,107:$Vy,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{13:84,18:81,21:$Vd,39:$VT,57:87,65:212,99:144,100:140,101:141,102:142,103:143,107:$Vy,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{18:218,57:219,96:213,108:214,110:215,111:216,112:217,135:$V5},o($Va,[2,28]),o($Va,[2,34]),o($Va,[2,35]),o($Va,[2,143]),o($Va,[2,144]),{40:[1,220]},{40:[2,141]},{40:[2,142],134:$Vc},o($Vm,[2,33]),{33:[1,221]},{33:[1,222]},{31:[1,223]},{34:224,44:$V6},o($Vp,[2,69]),{25:$Vo,40:[1,225]},o($VU,[2,105]),o($Vq,[2,109],{39:[1,226]}),{25:$Vo,40:[1,227]},o($VU,[2,107]),o($Vq,[2,111],{39:[1,228]}),{13:84,18:81,21:$Vd,41:229,57:87,99:73,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},o($Vq,[2,95]),{18:130,120:230,121:129,124:$Vw,135:$V5},{13:84,18:81,21:$Vd,39:$VT,57:87,65:231,99:144,100:140,101:141,102:142,103:143,107:$Vy,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},o($Vq,[2,100]),{47:[1,232]},o($VV,[2,36]),{64:[1,233],67:234,68:$VD},{13:84,18:81,21:$Vd,39:$VT,57:87,65:235,99:144,100:140,101:141,102:142,103:143,107:$Vy,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},o($VW,[2,38]),{18:41,45:236,51:40,57:42,135:$V5},{39:$VT,100:237},o($VX,[2,79]),o($VX,[2,160]),o($VX,[2,161]),o($VX,[2,162]),o($VX,[2,163]),o($VX,[2,164]),o($VX,[2,165]),o($VX,[2,166]),o($VX,[2,167]),o($VX,[2,168]),o($VX,[2,169]),o($VX,[2,170]),o($VX,[2,171]),o($VX,[2,172]),{13:84,18:81,21:$Vd,57:87,99:238,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{13:84,18:81,21:$Vd,39:$VT,57:87,65:239,99:144,100:140,101:141,102:142,103:143,107:$Vy,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{13:84,18:81,21:$Vd,39:$VT,57:87,65:240,99:144,100:140,101:141,102:142,103:143,107:$Vy,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{40:[1,241]},{131:[2,116]},o([44,47,54,136,137,138,139,140,141,142,143,144,145],$Vr,{25:[1,243],39:$Vs,40:[1,242],127:$Vt,134:$Vc}),{25:[1,245],40:[1,244]},{44:$VG,47:$VH,54:$VI,105:199,106:185,136:$VJ,137:$VK,138:$VL,139:$VM,140:$VN,141:$VO,142:$VP,143:$VQ,144:$VR,145:$VS},{44:$VG,47:$VH,54:$VI,105:184,106:185,136:$VJ,137:$VK,138:$VL,139:$VM,140:$VN,141:$VO,142:$VP,143:$VQ,144:$VR,145:$VS},{13:84,18:81,21:$Vd,39:$VT,57:87,99:206,100:207,102:202,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},o($VF,[2,80]),{25:[1,247],76:[1,246]},{33:[1,248],104:$VE},{33:[1,249],104:$VE},{33:[2,158],97:250,116:251,122:$Ve},o($VY,[2,154]),o($VY,[2,155]),o($VY,[2,156]),o($VY,[2,157]),o($VY,$Vr,{39:$Vs,134:$Vc}),o($VY,$Vu,{39:$Vv}),{18:112,57:252,135:$V5},o($V0,[2,18]),o($V0,[2,19]),{38:[1,253]},{31:[1,254]},o($VU,[2,104]),{13:84,18:81,21:$Vd,41:255,57:87,99:73,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},o($VU,[2,106]),{13:84,18:81,21:$Vd,41:256,57:87,99:73,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{25:$Vo,40:[1,257]},o($V9,[2,97]),o($V9,[2,98],{104:$VE}),o($Vl,[2,23]),o($VV,[2,37]),o($VW,[2,39]),{59:[1,258],104:$VE},o($VW,[2,40],{39:[1,259]}),o($VZ,[2,78]),o($VZ,[2,77]),{64:[2,114],104:$VE},{64:[2,115],104:$VE},o([23,25,33,40,44,47,54,59,64,68,104,136,137,138,139,140,141,142,143,144,145],[2,75]),{131:[2,117]},{18:260,135:$V5},{131:[2,118]},{18:261,135:$V5},{13:84,18:81,21:$Vd,39:$VT,57:87,65:262,99:144,100:140,101:141,102:142,103:143,107:$Vy,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{18:263,135:$V5},{31:$Vi,34:97,44:$V6,60:99,62:$Vj,69:264,70:96,71:98,72:100,73:101,74:104,80:105,85:106,94:107,98:$Vk},{31:[1,267],87:265,89:266},{33:[1,268]},{33:[2,159]},o($Va,[2,31]),{33:[1,269]},{38:[1,270]},{25:$Vo,40:[1,271]},{25:$Vo,40:[1,272]},o($Vq,[2,113]),{13:84,18:81,21:$Vd,39:$VT,57:87,65:273,99:144,100:140,101:141,102:142,103:143,107:$Vy,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{13:84,18:81,21:$Vd,41:274,57:87,99:73,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},o($V_,[2,119]),o($V_,[2,120]),{33:[1,275],104:$VE},{25:[1,277],76:[1,276]},{31:[1,278],34:97,44:$V6,60:99,62:$Vj,70:136,71:98,72:100,73:101,74:104,80:105,83:279,85:106,94:107,98:$Vk},{31:[1,280],89:281},{31:[2,62]},{90:$V$,93:$V01},o($Vx,[2,66]),o($V0,[2,20]),{33:[1,284]},o($Vq,[2,110]),o($Vq,[2,112]),o([23,25,33,59,64,68],[2,76],{104:$VE}),{25:$Vo,40:[1,285]},{31:$V11,34:97,44:$V6,60:99,62:$Vj,69:287,70:96,71:98,72:100,73:101,74:104,77:286,80:105,85:106,94:107,98:$Vk},{13:84,18:81,21:$Vd,39:$VT,57:87,65:289,99:144,100:140,101:141,102:142,103:143,107:$Vy,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},{18:290,135:$V5},{75:$Vz,79:$V21,81:$VA,82:[1,291],86:$VB,95:$VC},o($Vx,[2,55]),{88:[1,293],90:$V$,93:$V01},{31:[2,63]},{13:295,91:294,117:296,118:297,124:$V8,125:$Vf,126:$Vg},{90:[1,298]},o($V0,[2,21]),o($VW,[2,41]),o($Vx,[2,49]),{31:[1,299],34:97,44:$V6,60:99,62:$Vj,70:136,71:98,72:100,73:101,74:104,80:105,85:106,94:107,98:$Vk},{75:$Vz,79:[1,300],81:$VA,86:$VB,95:$VC},{33:[1,301],104:$VE},{76:[1,302]},{33:[1,303]},{33:[1,304],81:[1,305]},{33:[1,306]},{33:[1,307]},{33:[2,151]},{33:[2,152]},{33:[2,153]},{33:[1,308]},{75:$Vz,78:[1,309],81:$VA,86:$VB,95:$VC},{33:[1,310]},{31:$V11,34:97,44:$V6,60:99,62:$Vj,69:287,70:96,71:98,72:100,73:101,74:104,77:311,80:105,85:106,94:107,98:$Vk},{13:84,18:81,21:$Vd,39:$VT,57:87,65:312,99:144,100:140,101:141,102:142,103:143,107:$Vy,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},o($Vx,[2,54]),{31:$Vi,34:97,44:$V6,60:99,62:$Vj,69:313,70:96,71:98,72:100,73:101,74:104,80:105,85:106,94:107,98:$Vk},{13:84,18:81,21:$Vd,39:$VT,57:87,65:314,99:144,100:140,101:141,102:142,103:143,107:$Vy,108:74,109:75,110:76,111:77,112:78,113:79,114:80,115:82,116:83,117:85,118:86,122:$Ve,124:$V8,125:$Vf,126:$Vg,128:$Vh,135:$V5},o($Vx,[2,61]),{31:$Vi,34:97,44:$V6,60:99,62:$Vj,69:315,70:96,71:98,72:100,73:101,74:104,80:105,85:106,94:107,98:$Vk},{31:$Vi,34:97,44:$V6,60:99,62:$Vj,69:316,70:96,71:98,72:100,73:101,74:104,80:105,85:106,94:107,98:$Vk},{33:[1,317]},{31:$Vi,34:97,44:$V6,60:99,62:$Vj,69:318,70:96,71:98,72:100,73:101,74:104,80:105,85:106,94:107,98:$Vk},o($Vx,[2,50]),{33:[1,319],104:$VE},{31:[1,320],34:97,44:$V6,60:99,62:$Vj,70:136,71:98,72:100,73:101,74:104,80:105,85:106,94:107,98:$Vk},{33:[1,321],104:$VE},{31:[1,322],34:97,44:$V6,60:99,62:$Vj,70:136,71:98,72:100,73:101,74:104,80:105,85:106,94:107,98:$Vk},{31:[1,323],34:97,44:$V6,60:99,62:$Vj,70:136,71:98,72:100,73:101,74:104,80:105,85:106,94:107,98:$Vk},o($Vx,[2,52]),{31:[1,324],34:97,44:$V6,60:99,62:$Vj,70:136,71:98,72:100,73:101,74:104,80:105,85:106,94:107,98:$Vk},{31:$V11,34:97,44:$V6,60:99,62:$Vj,69:287,70:96,71:98,72:100,73:101,74:104,77:325,80:105,85:106,94:107,98:$Vk},{75:$Vz,81:$VA,82:[1,326],86:$VB,95:$VC},{31:$Vi,34:97,44:$V6,60:99,62:$Vj,69:327,70:96,71:98,72:100,73:101,74:104,80:105,85:106,94:107,98:$Vk},{75:$Vz,81:$VA,86:$VB,92:[1,328],95:$VC},{75:$Vz,81:$VA,86:$VB,92:[1,329],95:$VC},{75:$Vz,78:[1,330],81:$VA,86:$VB,95:$VC},o($Vx,[2,51]),{33:[1,331]},{31:[1,332],34:97,44:$V6,60:99,62:$Vj,70:136,71:98,72:100,73:101,74:104,80:105,83:333,85:106,94:107,98:$Vk},{33:[1,334]},{33:[1,335]},{33:[1,336]},o($Vx,[2,56]),{75:$Vz,79:$V21,81:$VA,82:[1,337],86:$VB,95:$VC},o($Vx,[2,58]),{31:[2,64]},{31:[2,65]},o($Vx,[2,53]),{33:[1,338]},o($Vx,[2,57])],
defaultActions: {16:[2,5],17:[2,6],18:[2,7],19:[2,8],25:[2,129],38:[2,1],49:[2,11],50:[2,12],124:[2,175],125:[2,176],130:[2,173],131:[2,174],139:[2,146],159:[2,141],203:[2,116],242:[2,117],244:[2,118],251:[2,159],266:[2,62],281:[2,63],295:[2,151],296:[2,152],297:[2,153],334:[2,64],335:[2,65]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return;               
break;
case 1:return 10;
break;
case 2:return 12;
break;
case 3:return 19;
break;
case 4:return 49;
break;
case 5:this.begin('CONTROL');      return 31;
break;
case 6:this.begin('COMMENT');      return;
break;
case 7:this.begin('CHILDREN');     return 47;
break;
case 8:this.begin('CHILDREN');     return 50;
break;
case 9:this.begin('EXPRESSION');   return 62;
break;
case 10:return 37;
break;
case 11:return 38;
break;
case 12:return 75;
break;
case 13:return 78;
break;
case 14:return 81;
break;
case 15:return 82;
break;
case 16:return 79;
break;
case 17:return 'ELSEIF';
break;
case 18:return 76;
break;
case 19:return 86;
break;
case 20:return 88;
break;
case 21:return 93;
break;
case 22:return 90;
break;
case 23:return 92;
break;
case 24:return 95;
break;
case 25:return 43;
break;
case 26:return 12;
break;
case 27:return 'ENDEXPORT';
break;
case 28:return 32;
break;
case 29:return 35;
break;
case 30:this.popState();            return 33;
break;
case 31:return 128;
break;
case 32:return 68;
break;
case 33:return 131;
break;
case 34:return 127;
break;
case 35:return '->';
break;
case 36:return 56;
break;
case 37:this.popState();            return 64;
break;
case 38:this.begin('EXPRESSION');   return 62;
break;
case 39:this.begin('CONTROL');      return 31;
break;
case 40:this.begin('COMMENT');      return;
break;
case 41:this.popState();            return 49;
break;
case 42:this.popState();            return 44;
break;
case 43:this.popState();            return 98;
break;
case 44:this.popState();            return;
break;
case 45:return 126;
break;
case 46:return 125;
break;
case 47:return 124;
break;
case 48:return 47;
break;
case 49:return 44;
break;
case 50:return 39;
break;
case 51:return 40;
break;
case 52:return 122;
break;
case 53:return 123;
break;
case 54:return ';'
break;
case 55:return 59;
break;
case 56:return 54
break;
case 57:return 138;
break;
case 58:return 139;
break;
case 59:return 136;
break;
case 60:return 137;
break;
case 61:return 140;
break;
case 62:return 142;
break;
case 63:return 20;
break;
case 64:return 141;
break;
case 65:return 143;
break;
case 66:return 144;
break;
case 67:return 145;
break;
case 68:return 107;
break;
case 69:return 25;
break;
case 70:return 104;
break;
case 71:return 134;
break;
case 72:return 21;
break;
case 73:return 23;
break;
case 74:return 135;
break;
case 75:return 7;
break;
case 76:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:import)/,/^(?:from)/,/^(?:as)/,/^(?:<\/)/,/^(?:\{%)/,/^(?:<!--)/,/^(?:>)/,/^(?:\/>)/,/^(?:\{\{)/,/^(?:macro)/,/^(?:endmacro)/,/^(?:for)/,/^(?:endfor)/,/^(?:if)/,/^(?:endif)/,/^(?:else)/,/^(?:elseif)/,/^(?:in)/,/^(?:switch)/,/^(?:endswitch)/,/^(?:default)/,/^(?:case)/,/^(?:endcase)/,/^(?:include)/,/^(?:export)/,/^(?:from)/,/^(?:endexport)/,/^(?:view)/,/^(?:endview)/,/^(?:%\})/,/^(?:new)/,/^(?:\|)/,/^(?:=>)/,/^(?:::)/,/^(?:->)/,/^(?:\.\.)/,/^(?:\}\})/,/^(?:\{\{)/,/^(?:\{%)/,/^(?:<!--)/,/^(?:<\/)/,/^(?:<)/,/^(?:[^\/<>{%}]+)/,/^(?:(.|\r|\n)*?-->)/,/^(?:true|false)/,/^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\^)/,/^(?:!)/,/^(?:,)/,/^(?:\?)/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"EXPRESSION":{"rules":[0,31,32,33,34,35,36,37,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":false},"CONTROL":{"rules":[0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":false},"COMMENT":{"rules":[0,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":false},"CHILDREN":{"rules":[0,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ParserImpl;
exports.Parser = ParserImpl.Parser;
exports.parse = function () { return ParserImpl.parse.apply(ParserImpl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}