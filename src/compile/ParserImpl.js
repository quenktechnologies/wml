/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[19,21],$V1=[1,5],$V2=[10,19,21],$V3=[1,13],$V4=[1,15],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,41],$Vb=[21,43,76,101],$Vc=[21,24,31,33,38,41,43,56,76,81,101,110,111,112,113,114,115,116],$Vd=[1,43],$Ve=[1,42],$Vf=[1,45],$Vg=[24,27,90],$Vh=[21,24,27,31,33,38,41,42,43,56,76,81,90,100,101,106,110,111,112,113,114,115,116],$Vi=[21,24,31,33,38,41,43,56,76,81,100,101,110,111,112,113,114,115,116],$Vj=[1,83],$Vk=[1,89],$Vl=[1,84],$Vm=[7,21,26,36,50,75],$Vn=[24,27,31,90],$Vo=[21,26,36,50,75],$Vp=[1,97],$Vq=[1,98],$Vr=[1,99],$Vs=[1,100],$Vt=[1,113],$Vu=[1,122],$Vv=[1,121],$Vw=[21,24,26,27,36,50,75,90],$Vx=[38,41],$Vy=[54,90],$Vz=[1,136],$VA=[33,43,56,81],$VB=[56,100],$VC=[90,95,100,102,103,104],$VD=[1,171];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"template":3,"template_option0":4,"template_option1":5,"tag":6,"EOF":7,"imports":8,"import_statement":9,"IMPORT":10,"import_member":11,"FROM":12,"string_literal":13,";":14,"variable":15,"*":16,"AS":17,"usage":18,"USES":19,"arguments":20,"<":21,"tagname":22,"attributes":23,">":24,"tag_option0":25,"</":26,"/>":27,"tagname_group0":28,"attribute":29,"attribute_name":30,"=":31,"attribute_value":32,":":33,"interpolation":34,"attribute_value_group0":35,"{{":36,"value_expression":37,"}}":38,"filters":39,"filter":40,"|":41,"(":42,")":43,"children":44,"child":45,"control":46,"characters":47,"control_group0":48,"for_statement":49,"{%":50,"FOR":51,"for_statement_option0":52,"for_statement_option1":53,"IN":54,"expression":55,"%}":56,"for_children":57,"ENDFOR":58,"ELSE":59,"if_statement":60,"IF":61,"ENDIF":62,"switch_statement":63,"SWITCH":64,"case_statements":65,"ENDSWITCH":66,"case_statement":67,"CASE":68,"case_statement_group0":69,"ENDCASE":70,"include_statement":71,"INCLUDE":72,"include_statement_group0":73,"include_statement_option0":74,"CHARACTERS":75,",":76,"grouped_expression":77,"ternary_expression":78,"binary_expression":79,"unary_expression":80,"?":81,"binary_operator":82,"binary_operator_group0":83,"!":84,"literal":85,"property_expression":86,"function_expression":87,"method_expression":88,"bind_expression":89,"ID":90,"object_literal":91,"array_literal":92,"number_literal":93,"boolean_literal":94,"{":95,"}":96,"name_value_pairs":97,"key_value_pairs":98,"key_value_pair":99,"[":100,"]":101,"STRING_LITERAL":102,"NUMBER_LITERAL":103,"BOOLEAN":104,".":105,"::":106,"function_literal":107,"parameters":108,"=>":109,">=":110,"<=":111,"==":112,"!=":113,"+":114,"/":115,"-":116,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",10:"IMPORT",12:"FROM",14:";",16:"*",17:"AS",19:"USES",21:"<",24:">",26:"</",27:"/>",31:"=",33:":",36:"{{",38:"}}",41:"|",42:"(",43:")",50:"{%",51:"FOR",54:"IN",56:"%}",58:"ENDFOR",59:"ELSE",61:"IF",62:"ENDIF",64:"SWITCH",66:"ENDSWITCH",68:"CASE",70:"ENDCASE",72:"INCLUDE",75:"CHARACTERS",76:",",81:"?",84:"!",90:"ID",95:"{",96:"}",97:"name_value_pairs",100:"[",101:"]",102:"STRING_LITERAL",103:"NUMBER_LITERAL",104:"BOOLEAN",105:".",106:"::",109:"=>",110:">=",111:"<=",112:"==",113:"!=",114:"+",115:"/",116:"-"},
productions_: [0,[3,4],[8,1],[8,2],[9,5],[11,1],[11,3],[18,2],[6,8],[6,4],[22,1],[23,2],[23,0],[29,3],[29,1],[30,1],[30,3],[32,1],[32,1],[34,3],[34,4],[39,1],[39,2],[40,2],[40,5],[44,1],[44,2],[45,1],[45,1],[45,1],[45,1],[46,1],[49,9],[57,4],[57,7],[60,8],[60,12],[63,8],[65,1],[65,2],[67,8],[71,5],[47,1],[20,1],[20,3],[77,3],[55,1],[55,1],[55,1],[55,1],[55,1],[78,5],[79,3],[82,1],[80,2],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[15,1],[85,1],[85,1],[85,1],[85,1],[85,1],[91,2],[91,3],[98,1],[98,3],[99,3],[92,2],[92,3],[13,1],[93,1],[94,1],[87,4],[87,3],[88,4],[88,3],[86,3],[86,3],[89,3],[89,6],[89,3],[89,6],[107,3],[108,2],[108,3],[108,5],[4,0],[4,1],[5,0],[5,1],[25,0],[25,1],[28,1],[28,1],[35,1],[35,1],[48,1],[48,1],[48,1],[48,1],[52,0],[52,1],[53,0],[53,1],[69,1],[69,1],[69,1],[73,1],[73,1],[73,1],[73,1],[74,0],[74,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ =
            new yy.ast.Template($$[$0-3] || [], $$[$0-2] || [], $$[$0-1], this._$); return this.$;
            
break;
case 2:
this.$ =  [$$[$0]];         
break;
case 3: case 22: case 26: case 39:
this.$ = $$[$0-1].concat($$[$0]); 
break;
case 4:
this.$ = new yy.ast.ImportStatement($$[$0-3], $$[$0-1], this._$);
break;
case 5:
this.$ = new yy.ast.DefaultMember($$[$0], this._$);
break;
case 6:
this.$ = new yy.ast.CompositeMember($$[$0], this._$);
break;
case 7:
this.$ = $$[$0]; 
break;
case 8:

             yy.help.ensureTagsMatch($$[$0-6], $$[$0]);
             this.$ = new yy.ast.Tag($$[$0-6], $$[$0-5], $$[$0-3]?$$[$0-3]:[], this._$);
             
break;
case 9:
 this.$ = new yy.ast.Tag($$[$0-2], $$[$0-1], [], this._$); 
break;
case 10: case 17: case 18: case 31: case 61:
this.$ = $$[$0];
break;
case 11:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 12:
this.$ = [];
break;
case 13:
this.$ = new yy.ast.Attribute($$[$0-2].name, $$[$0-2].namespace, $$[$0], this._$);
break;
case 14:
this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace, 
            new yy.ast.BooleanLiteral(true, this._$),this._$);
break;
case 15:
this.$ = {namespace:null, name:$$[$0]};
break;
case 16:
this.$ = {namespace:$$[$0-2], name:$$[$0]};
break;
case 19:
this.$ = new yy.ast.Interpolation($$[$0-1], [], this._$);
break;
case 20:
this.$ = new yy.ast.Interpolation($$[$0-2], $$[$0-1], this._$);
break;
case 21:
this.$ =  [$$[$0]];     
break;
case 23:
this.$ = new yy.ast.Filter($$[$0], [], this._$);
break;
case 24:
this.$ = new yy.ast.Filter($$[$0-3], $$[$0-1], this._$);
break;
case 25: case 38: case 43:
this.$ = [$$[$0]];          
break;
case 32:

            
            this.$ = new yy.ast.ForStatement($$[$0-6], 
            ($$[$0-4])? $$[$0-4] : 'index',
            $$[$0-2],
            $$[$0],
            $$[$01], this._$); 
            
            
break;
case 33: case 34:
this.$ = $$[$0-3];
break;
case 35:
this.$ = new yy.ast.IfStatement($$[$0-5], $$[$0-3], [], this._$); 
break;
case 36:
this.$ = new yy.ast.IfStatement($$[$0-9], $$[$0-7], $$[$0-3], this._$);
break;
case 37:
this.$ = new yy.ast.SwitchStatement($$[$0-5], $$[$0-3], this._$);
break;
case 40:
this.$ = new yy.ast.CaseStatement($$[$0-5], $$[$0-3], this._$);
break;
case 41:
this.$ = new yy.ast.Include($$[$0-2], ($$[$0-1]? $$[$0-1] : []), this._$);
break;
case 42:
this.$ = new yy.ast.Characters($$[$0], this._$); 
break;
case 44: case 70:
this.$ = $$[$0-2].concat($$[$0]); 
break;
case 45:
this.$ = $$[$0-1];
break;
case 51:
this.$ = new yy.ast.TernaryExpression($$[$0-4], $$[$0-2], $$[$0], this._$);
break;
case 52:
this.$ = new yy.ast.BinaryExpression($$[$0-2], $$[$0-1], $$[$0], this._$);
break;
case 53:
 this.$ = yy.help.convertOperator($$[$0]);
break;
case 54:
this.$ = new yy.ast.UnaryExpression($$[$0-1], $$[$0], this._$);
break;
case 67:
this.$ = new yy.ast.ObjectLiteral([], this._$); 
break;
case 68:
this.$ = new yy.ast.ObjectLiteral($$[$0-1], this._$); 
break;
case 69:
this.$ = [$$[$0]]; 
break;
case 71:
this.$ = {key:$$[$0-2], value:$$[$0]}; 
break;
case 72:
this.$ = new yy.ast.ArrayLiteral([], this._$); 
break;
case 73:
this.$ = new yy.ast.ArrayLiteral($$[$0-1], this._$); 
break;
case 74:
this.$ = new yy.ast.StringLiteral($$[$0], this._$); 
break;
case 75:
this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), this._$); 
break;
case 76:
this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), this._$);
break;
case 77:
this.$ = new yy.ast.FunctionExpression($$[$0-3], $$[$0-1], this._$);
break;
case 78:
this.$ = new yy.ast.FunctionExpression($$[$0-2], [], this._$);
break;
case 79:
this.$ = new yy.ast.MethodExpression($$[$0-3], $$[$0-1], this._$);
break;
case 80:
this.$ = new yy.ast.MethodExpression($$[$0-2], [], this._$);
break;
case 81: case 82:
this.$ = $$[$0-2]+'.'+$$[$0];
break;
case 83:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [] , this._$);
break;
case 84:
this.$ = new yy.ast.BindExpression($$[$0-5], $$[$0-3], $$[$0-1] , this._$);
break;
case 85:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [], this._$);
break;
case 86:
this.$ = new yy.ast.BindExpression($$[$0-5], $$[$0-3], $$[$0-1], this._$);
break;
case 87:
this.$ = new yy.ast.FunctionLiteral($$[$0-2], $$[$0], this._$); 
break;
case 88:
this.$ = [];                      
break;
case 89:
this.$ = [$$[$0-1]];                    
break;
case 90:
this.$ = $$[$0-3].concat($$[$0-1]);           
break;
}
},
table: [o($V0,[2,91],{3:1,4:2,8:3,9:4,10:$V1}),{1:[3]},{5:6,18:7,19:[1,8],21:[2,93]},o($V0,[2,92],{9:9,10:$V1}),o($V2,[2,2]),{11:10,15:11,16:[1,12],90:$V3},{6:14,21:$V4},{21:[2,94]},{13:26,15:18,20:16,37:17,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},o($V2,[2,3]),{12:[1,34]},{12:[2,5]},{17:[1,35]},o([12,21,24,27,31,33,38,41,42,43,54,56,76,81,90,100,101,105,106,110,111,112,113,114,115,116],[2,61]),{7:[1,36]},{15:39,22:37,28:38,86:40,90:$V3},{21:[2,7],76:$Va},o($Vb,[2,43]),o($Vc,[2,55],{42:$Vd,105:$Ve,106:[1,44]}),o($Vc,[2,56]),o($Vc,[2,57],{42:$Vf,106:[1,46]}),o($Vc,[2,58]),o($Vc,[2,59]),o($Vc,[2,60]),o($Vc,[2,62]),o($Vc,[2,63]),o($Vc,[2,64]),o($Vc,[2,65]),o($Vc,[2,66]),{96:[1,47],97:[1,48]},{13:26,15:18,20:50,37:17,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,101:[1,49],102:$V7,103:$V8,104:$V9},o([14,21,24,27,31,33,38,41,43,56,76,81,90,101,110,111,112,113,114,115,116],[2,74]),o([21,24,27,31,33,38,41,43,56,76,81,90,101,110,111,112,113,114,115,116],[2,75]),o($Vc,[2,76]),{13:51,102:$V7},{15:52,90:$V3},{1:[2,1]},o($Vg,[2,12],{23:53}),o($Vg,[2,10]),o($Vg,[2,97],{105:$Ve}),o($Vg,[2,98]),{13:26,15:18,37:54,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},{15:55,86:56,90:$V3},{13:26,15:18,20:57,37:17,43:[1,58],85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},{15:59,90:$V3},{13:26,15:18,20:60,37:17,43:[1,61],85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},{15:62,90:$V3},o($Vc,[2,67]),{96:[1,63]},o($Vc,[2,72]),{76:$Va,101:[1,64]},{14:[1,65]},{12:[2,6]},{15:70,24:[1,66],27:[1,67],29:68,30:69,90:$V3},o($Vb,[2,44]),o($Vh,[2,81],{105:$Ve}),o($Vh,[2,82]),{43:[1,71],76:$Va},o($Vi,[2,78]),o($Vc,[2,83],{42:[1,72]}),{43:[1,73],76:$Va},o($Vi,[2,80]),o($Vc,[2,85],{42:[1,74]}),o($Vc,[2,68]),o($Vc,[2,73]),o($V2,[2,4]),{6:78,21:$V4,25:75,26:[2,95],34:80,36:$Vj,44:76,45:77,46:79,47:81,48:82,49:85,50:$Vk,60:86,63:87,71:88,75:$Vl},o($Vm,[2,9]),o($Vg,[2,11]),o($Vg,[2,14],{31:[1,90]}),o($Vn,[2,15],{33:[1,91]}),o($Vi,[2,77]),{13:26,15:18,20:92,37:17,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},o($Vi,[2,79]),{13:26,15:18,20:93,37:17,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},{26:[1,94]},{6:78,21:$V4,26:[2,96],34:80,36:$Vj,45:95,46:79,47:81,48:82,49:85,50:$Vk,60:86,63:87,71:88,75:$Vl},o($Vo,[2,25]),o($Vo,[2,27]),o($Vo,[2,28]),o($Vo,[2,29]),o($Vo,[2,30]),o($Vo,[2,31]),{13:26,15:18,37:96,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},o($Vo,[2,42]),o($Vo,[2,101]),o($Vo,[2,102]),o($Vo,[2,103]),o($Vo,[2,104]),{51:$Vp,61:$Vq,64:$Vr,72:$Vs},{13:104,32:101,34:102,35:103,36:$Vj,93:105,102:$V7,103:$V8},{15:106,90:$V3},{43:[1,107],76:$Va},{43:[1,108],76:$Va},{15:39,22:109,28:38,86:40,90:$V3},o($Vo,[2,26]),{38:[1,110],39:111,40:112,41:$Vt},{15:114,90:$V3},{13:26,15:18,37:119,42:$Vu,55:115,77:120,78:116,79:117,80:118,84:$Vv,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},{13:26,15:18,37:119,42:$Vu,55:123,77:120,78:116,79:117,80:118,84:$Vv,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},{15:125,73:124,86:126,87:127,88:128,90:$V3},o($Vg,[2,13]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,99]),o($Vg,[2,100]),o($Vn,[2,16]),o($Vc,[2,84]),o($Vc,[2,86]),{24:[1,129]},o($Vw,[2,19]),{38:[1,130],40:131,41:$Vt},o($Vx,[2,21]),{15:132,90:$V3},o($Vy,[2,105],{52:133,76:[1,134]}),{56:[1,135],81:$Vz},o($VA,[2,46]),o($VA,[2,47]),o($VA,[2,48]),o($VA,[2,49],{82:137,83:138,21:[1,141],24:[1,139],31:[1,148],110:[1,140],111:[1,142],112:[1,143],113:[1,144],114:[1,145],115:[1,146],116:[1,147]}),o($VA,[2,50]),{13:26,15:18,37:119,42:$Vu,55:149,77:120,78:116,79:117,80:118,84:$Vv,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},{13:26,15:18,37:119,42:$Vu,55:150,77:120,78:116,79:117,80:118,84:$Vv,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},{56:[1,151],81:$Vz},{56:[2,116],74:152,92:153,100:$V6},o($VB,[2,112],{42:$Vd,105:$Ve}),o($VB,[2,113],{42:$Vf}),o($VB,[2,114]),o($VB,[2,115]),o($Vm,[2,8]),o($Vw,[2,20]),o($Vx,[2,22]),o($Vx,[2,23],{42:[1,154]}),{15:156,53:155,54:[2,107],90:$V3},o($Vy,[2,106]),{6:78,21:$V4,34:80,36:$Vj,44:157,45:77,46:79,47:81,48:82,49:85,50:$Vk,60:86,63:87,71:88,75:$Vl},{13:26,15:18,37:119,42:$Vu,55:158,77:120,78:116,79:117,80:118,84:$Vv,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},{13:26,15:18,37:159,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},o($VC,[2,53]),o($VC,[2,118]),o($VC,[2,119]),o($VC,[2,120]),o($VC,[2,121]),o($VC,[2,122]),o($VC,[2,123]),o($VC,[2,124]),o($VC,[2,125]),o($VC,[2,126]),o($VC,[2,127]),o($VA,[2,54]),{43:[1,160],81:$Vz},{50:[1,163],65:161,67:162},{56:[1,164]},{56:[2,117]},{13:26,15:18,20:165,37:17,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},{54:[1,166]},{54:[2,108]},{6:78,21:$V4,34:80,36:$Vj,45:95,46:79,47:81,48:82,49:85,50:[1,167],60:86,63:87,71:88,75:$Vl},{33:[1,168],81:$Vz},o($VA,[2,52]),o($VA,[2,45]),{50:[1,169],67:170},{50:[2,38]},{68:$VD},o($Vo,[2,41]),{43:[1,172],76:$Va},{13:26,15:18,37:119,42:$Vu,55:173,77:120,78:116,79:117,80:118,84:$Vv,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},{51:$Vp,59:[1,175],61:$Vq,62:[1,174],64:$Vr,72:$Vs},{13:26,15:18,37:119,42:$Vu,55:176,77:120,78:116,79:117,80:118,84:$Vv,85:19,86:20,87:21,88:22,89:23,90:$V3,91:24,92:25,93:27,94:28,95:$V5,100:$V6,102:$V7,103:$V8,104:$V9},{66:[1,177],68:$VD},{50:[2,39]},{13:179,69:178,93:180,94:181,102:$V7,103:$V8,104:$V9},o($Vx,[2,24]),{56:[1,182],81:$Vz},{56:[1,183]},{56:[1,184]},o([33,43,56],[2,51],{81:$Vz}),{56:[1,185]},{56:[1,186]},{56:[2,109]},{56:[2,110]},{56:[2,111]},{6:78,21:$V4,34:80,36:$Vj,44:188,45:77,46:79,47:81,48:82,49:85,50:[1,189],57:187,60:86,63:87,71:88,75:$Vl},o($Vo,[2,35]),{6:78,21:$V4,34:80,36:$Vj,44:190,45:77,46:79,47:81,48:82,49:85,50:$Vk,60:86,63:87,71:88,75:$Vl},o($Vo,[2,37]),{6:78,21:$V4,34:80,36:$Vj,44:191,45:77,46:79,47:81,48:82,49:85,50:$Vk,60:86,63:87,71:88,75:$Vl},o($Vo,[2,32]),{6:78,21:$V4,34:80,36:$Vj,45:95,46:79,47:81,48:82,49:85,50:[1,192],60:86,63:87,71:88,75:$Vl},{51:$Vp,59:[1,193],61:$Vq,64:$Vr,72:$Vs},{6:78,21:$V4,34:80,36:$Vj,45:95,46:79,47:81,48:82,49:85,50:[1,194],60:86,63:87,71:88,75:$Vl},{6:78,21:$V4,34:80,36:$Vj,45:95,46:79,47:81,48:82,49:85,50:[1,195],60:86,63:87,71:88,75:$Vl},{51:$Vp,58:[1,196],61:$Vq,64:$Vr,72:$Vs},{56:[1,197]},{51:$Vp,61:$Vq,62:[1,198],64:$Vr,72:$Vs},{51:$Vp,61:$Vq,64:$Vr,70:[1,199],72:$Vs},{56:[1,200]},{6:78,21:$V4,34:80,36:$Vj,44:201,45:77,46:79,47:81,48:82,49:85,50:$Vk,60:86,63:87,71:88,75:$Vl},{56:[1,202]},{56:[1,203]},o($Vo,[2,33]),{6:78,21:$V4,34:80,36:$Vj,45:95,46:79,47:81,48:82,49:85,50:[1,204],60:86,63:87,71:88,75:$Vl},o($Vo,[2,36]),{50:[2,40]},{51:$Vp,58:[1,205],61:$Vq,64:$Vr,72:$Vs},{56:[1,206]},o($Vo,[2,34])],
defaultActions: {7:[2,94],11:[2,5],36:[2,1],52:[2,6],153:[2,117],156:[2,108],162:[2,38],170:[2,39],179:[2,109],180:[2,110],181:[2,111],203:[2,40]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return;
break;
case 1:return 10;
break;
case 2:return 12;
break;
case 3:return 19;
break;
case 4:return 17;
break;
case 5:return 51;
break;
case 6:return 58;
break;
case 7:return 61;
break;
case 8:return 62;
break;
case 9:return 59;
break;
case 10:return 'ELSEIF';
break;
case 11:return 54;
break;
case 12:return 64;
break;
case 13:return 66;
break;
case 14:return 68;
break;
case 15:return 70;
break;
case 16:return 72;
break;
case 17:return 104;
break;
case 18:return 103;
break;
case 19:return 102;
break;
case 20:this.begin('COMMENT');       return;
break;
case 21:this.popState();             return;
break;
case 22:return;
break;
case 23:return 36;
break;
case 24:return 38;
break;
case 25:return 41;
break;
case 26:return 109;
break;
case 27:return 106;
break;
case 28:return '->';
break;
case 29:this.begin('CONTROL');      return 50;
break;
case 30:this.begin('CHILDREN');     return 56;
break;
case 31:return 26;
break;
case 32:this.begin('CHILDREN');     return 27;
break;
case 33:this.begin('CHILDREN');     return 24;
break;
case 34:return 21;
break;
case 35:return 42;
break;
case 36:return 43;
break;
case 37:return 100;
break;
case 38:return 101;
break;
case 39:return 14
break;
case 40:return 33;
break;
case 41:return 31
break;
case 42:return 112;
break;
case 43:return 113;
break;
case 44:return 110;
break;
case 45:return 111;
break;
case 46:return 114;
break;
case 47:return 116;
break;
case 48:return 16;
break;
case 49:return 115;
break;
case 50:return 84;
break;
case 51:return 76;
break;
case 52:return 81;
break;
case 53:return 95;
break;
case 54:return 96;
break;
case 55:return 90;
break;
case 56:this.popState();           return 36;
break;
case 57:this.begin('CONTROL');     return 50;
break;
case 58:this.popState();           return 26;
break;
case 59:this.popState();           return 21;
break;
case 60:this.popState();           return 75;
break;
case 61:return 7;
break;
case 62:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:import)/,/^(?:from)/,/^(?:uses)/,/^(?:as)/,/^(?:for)/,/^(?:endfor)/,/^(?:if)/,/^(?:endif)/,/^(?:else)/,/^(?:elseif)/,/^(?:in)/,/^(?:switch)/,/^(?:endswitch)/,/^(?:case)/,/^(?:endcase)/,/^(?:include)/,/^(?:true|false)/,/^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')|(`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`)))/,/^(?:<!--)/,/^(?:-->)/,/^(?:[.\n]+)/,/^(?:\{\{)/,/^(?:\}\})/,/^(?:\|)/,/^(?:=>)/,/^(?:::)/,/^(?:->)/,/^(?:\{%)/,/^(?:%\})/,/^(?:<\/)/,/^(?:\/>)/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:!)/,/^(?:,)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:([a-zA-Z$0-9_][a-zA-Z$_0-9.-]*))/,/^(?:\{\{)/,/^(?:\{%)/,/^(?:<\/)/,/^(?:<)/,/^(?:[^\/<>{%}]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"CONTROL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,61,62],"inclusive":true},"COMMENT":{"rules":[0,21,22,61],"inclusive":false},"CHILDREN":{"rules":[0,56,57,58,59,60,61],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ParserImpl;
exports.Parser = ParserImpl.Parser;
exports.parse = function () { return ParserImpl.parse.apply(ParserImpl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}