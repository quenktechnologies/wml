/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[16,18],$V1=[1,5],$V2=[10,16,18],$V3=[1,11],$V4=[1,13],$V5=[1,27],$V6=[1,26],$V7=[1,33],$V8=[1,35],$V9=[1,36],$Va=[1,37],$Vb=[1,44],$Vc=[18,40,41,60],$Vd=[1,45],$Ve=[18,21,28,30,35,38,40,41,46,60,79,91,92,93,94,95,96,97],$Vf=[2,34],$Vg=[1,47],$Vh=[1,46],$Vi=[1,48],$Vj=[1,49],$Vk=[1,58],$Vl=[21,24,90],$Vm=[41,62],$Vn=[18,21,24,28,30,35,38,39,40,41,46,59,60,67,79,90,91,92,93,94,95,96,97],$Vo=[18,21,28,30,35,38,40,41,46,59,60,79,91,92,93,94,95,96,97],$Vp=[39,49,59,63,64,65,90],$Vq=[18,21,28,30,35,38,40,41,60,79,91,92,93,94,95,96,97],$Vr=[1,108],$Vs=[1,113],$Vt=[1,109],$Vu=[7,18,23,33,74,89],$Vv=[21,24,28,90],$Vw=[18,23,33,74,89],$Vx=[1,124],$Vy=[1,125],$Vz=[1,126],$VA=[1,139],$VB=[18,21,23,24,33,74,89,90],$VC=[35,38],$VD=[78,90],$VE=[59,79];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"template":3,"template_option0":4,"template_option1":5,"tag":6,"EOF":7,"imports":8,"import":9,"IMPORT":10,"variable":11,"FROM":12,"string_literal":13,";":14,"usage":15,"USES":16,"arguments":17,"<":18,"tagname":19,"attributes":20,">":21,"tag_option0":22,"</":23,"/>":24,"tagname_group0":25,"attribute":26,"attribute_name":27,"=":28,"attribute_value":29,":":30,"interpolation":31,"attribute_value_group0":32,"{{":33,"expression":34,"}}":35,"filters":36,"filter":37,"|":38,"(":39,")":40,",":41,"value_expression":42,"unary_expression":43,"ternary_expression":44,"binary_expression":45,"?":46,"binary_operator":47,"binary_operator_group0":48,"!":49,"literal":50,"property_expression":51,"function_expression":52,"method_expression":53,"bind_expression":54,"array_literal":55,"function_literal":56,"number_literal":57,"boolean_literal":58,"[":59,"]":60,"parameters":61,"=>":62,"STRING_LITERAL":63,"NUMBER_LITERAL":64,"BOOLEAN":65,".":66,"::":67,"children":68,"child":69,"control":70,"characters":71,"control_group0":72,"for":73,"{%":74,"FOR":75,"for_option0":76,"for_option1":77,"IN":78,"%}":79,"ENDFOR":80,"if":81,"IF":82,"ENDIF":83,"ELSE":84,"include":85,"INCLUDE":86,"include_group0":87,"include_option0":88,"CHARACTERS":89,"ID":90,">=":91,"<=":92,"==":93,"!=":94,"+":95,"/":96,"-":97,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",10:"IMPORT",12:"FROM",14:";",16:"USES",18:"<",21:">",23:"</",24:"/>",28:"=",30:":",33:"{{",35:"}}",38:"|",39:"(",40:")",41:",",46:"?",49:"!",59:"[",60:"]",62:"=>",63:"STRING_LITERAL",64:"NUMBER_LITERAL",65:"BOOLEAN",66:".",67:"::",74:"{%",75:"FOR",78:"IN",79:"%}",80:"ENDFOR",82:"IF",83:"ENDIF",84:"ELSE",86:"INCLUDE",89:"CHARACTERS",90:"ID",91:">=",92:"<=",93:"==",94:"!=",95:"+",96:"/",97:"-"},
productions_: [0,[3,4],[8,1],[8,2],[9,5],[15,2],[6,8],[6,4],[19,1],[20,2],[20,0],[26,3],[26,1],[27,1],[27,3],[29,1],[29,1],[31,3],[31,4],[36,1],[36,2],[37,2],[37,5],[17,1],[17,3],[34,1],[34,1],[34,1],[34,1],[44,5],[45,5],[47,1],[43,2],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[50,1],[50,1],[50,1],[50,1],[50,1],[55,2],[55,3],[56,3],[61,2],[61,3],[61,5],[13,1],[57,1],[58,1],[52,4],[52,3],[51,3],[51,3],[53,4],[53,3],[54,3],[54,6],[54,3],[54,6],[68,1],[68,2],[69,1],[69,1],[69,1],[69,1],[70,1],[73,12],[81,8],[81,12],[85,5],[71,1],[11,1],[4,0],[4,1],[5,0],[5,1],[22,0],[22,1],[25,1],[25,1],[32,1],[32,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[72,1],[72,1],[72,1],[76,0],[76,1],[77,0],[77,1],[87,1],[87,1],[87,1],[87,1],[88,0],[88,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new yy.ast.Template($$[$0-3] || [], $$[$0-2] || [], $$[$0-1], yy.help.location(this._$, _$[$0-3], _$[$0])); return this.$;
break;
case 2:
this.$ =  [$$[$0]];         
break;
case 3: case 20: case 64:
this.$ = $$[$0-1].concat($$[$0]); 
break;
case 4:
this.$ = new yy.ast.Import($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-4], _$[$0]));
break;
case 5:
this.$ = $$[$0]; 
break;
case 6:

             yy.help.ensureTagsMatch($$[$0-6], $$[$0]);
             this.$ = new yy.ast.Tag($$[$0-6], $$[$0-5], $$[$0-3]?$$[$0-3]:[], yy.help.location(this._$, _$[$0-7], _$[$0]));
             
break;
case 7:
 this.$ = new yy.ast.Tag($$[$0-2], $$[$0-1], [], yy.help.location(this._$, _$[$0-3], _$[$0])); 
break;
case 8: case 15: case 16: case 69: case 75:
this.$ = $$[$0];
break;
case 9:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 10:
this.$ = [];
break;
case 11:
this.$ = new yy.ast.Attribute($$[$0-2].name, $$[$0-2].namespace, $$[$0], yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 12:
this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace, 
            new yy.ast.BooleanLiteral(true, yy.help.location(this._$, _$[$0], _$[$0])),
            yy.help.location(this._$, _$[$0], _$[$0]));
break;
case 13:
this.$ = {namespace:null, name:$$[$0]};
break;
case 14:
this.$ = {namespace:$$[$0-2], name:$$[$0]};
break;
case 17:
this.$ = new yy.ast.Interpolation($$[$0-1], [], yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 18:
this.$ = new yy.ast.Interpolation($$[$0-2], $$[$0-1], yy.help.location(this._$, _$[$0-3], _$[$0]));
break;
case 19:
this.$ =  [$$[$0]];     
break;
case 21:
this.$ = new yy.ast.Filter($$[$0], [], yy.help.location(this._$, _$[$0-1], _$[$0]));
break;
case 22:
this.$ = new yy.ast.Filter($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-4], _$[$0]));
break;
case 23: case 63:
this.$ = [$$[$0]];          
break;
case 24:
this.$ = $$[$0-2].concat($$[$0]); 
break;
case 29:
this.$ = new yy.ast.TernaryExpression($$[$0-4], $$[$0-2], $$[$0], yy.help.location(this._$, _$[$0-4], _$[$0]));
break;
case 30:
this.$ = new yy.ast.BinaryExpression($$[$0-3], $$[$0-2], $$[$0-1],  yy.help.location(this._$, _$[$0-4], _$[$0]));
break;
case 31:
 this.$ = yy.help.convertOperator($$[$0]);
break;
case 32:
this.$ = new yy.ast.UnaryExpression($$[$0-1], $$[$0], yy.help.location(this._$, _$[$0-1], _$[$0]));
break;
case 44:
this.$ = new yy.ast.ArrayLiteral([], yy.help.location(this._$, _$[$0-1], _$[$0])); 
break;
case 45:
this.$ = new yy.ast.ArrayLiteral($$[$0-1], yy.help.location(this._$, _$[$0-2], _$[$0])); 
break;
case 46:
this.$ = new yy.ast.FunctionLiteral($$[$0-2], $$[$0], yy.help.location(this._$, _$[$0-2], _$[$0])); 
break;
case 47:
this.$ = [];                      
break;
case 48:
this.$ = [$$[$0-1]];                    
break;
case 49:
this.$ = $$[$0-3].concat($$[$0-1]);           
break;
case 50:
this.$ = new yy.ast.StringLiteral($$[$0], yy.help.location(this._$, _$[$0], _$[$0])); 
break;
case 51:
this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), yy.help.location(this._$, _$[$0], _$[$0])); 
break;
case 52:
this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), yy.help.location(this._$, _$[$0], _$[$0]));
break;
case 53:
this.$ = new yy.ast.FunctionExpression($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-3], _$[$0]));
break;
case 54:
this.$ = new yy.ast.FunctionExpression($$[$0-2], [], yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 55: case 56:
this.$ = $$[$0-2]+'.'+$$[$0];
break;
case 57:
this.$ = new yy.ast.MethodExpression($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-3], _$[$0]));
break;
case 58:
this.$ = new yy.ast.MethodExpression($$[$0-2], [], yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 59:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [] , yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 60:
this.$ = new yy.ast.BindExpression($$[$0-5], $$[$0-3], $$[$0-1] , yy.help.location(this._$, _$[$0-5], _$[$0]));
break;
case 61:
this.$ = new yy.ast.BindExpression($$[$0-2], $$[$0], [], yy.help.location(this._$, _$[$0-2], _$[$03]));
break;
case 62:
this.$ = new yy.ast.BindExpression($$[$0-5], $$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-5], _$[$0]));
break;
case 70:

            
            this.$ = new yy.ast.ForLoop($$[$0-9], 
            ($$[$0-7])? $$[$0-7] : 'index',
            $$[$0-5],
            $$[$0-3],
            yy.help.location(this._$, _$[$0-11], _$[$0])); 
            
            
break;
case 71:
this.$ = new yy.ast.IfCondition($$[$0-5], $$[$0-3], [], yy.help.location(this._$, _$[$0-7], _$[$0])); 
break;
case 72:
this.$ = new yy.ast.IfCondition($$[$0-9], $$[$0-7], $$[$0-3], yy.help.location(this._$, _$[$0-11], _$[$0]));
break;
case 73:
this.$ = new yy.ast.Include($$[$0-2], ($$[$0-1]? $$[$0-1] : []),  yy.help.location(this._$, _$[$0-4], _$[$0]));
break;
case 74:
this.$ = new yy.ast.Characters($$[$0], yy.help.location(this._$, _$[$0], _$[$0])); 
break;
}
},
table: [o($V0,[2,76],{3:1,4:2,8:3,9:4,10:$V1}),{1:[3]},{5:6,15:7,16:[1,8],18:[2,78]},o($V0,[2,77],{9:9,10:$V1}),o($V2,[2,2]),{11:10,90:$V3},{6:12,18:$V4},{18:[2,79]},{11:21,13:30,17:14,34:15,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},o($V2,[2,3]),{12:[1,38]},o([12,18,21,24,28,30,35,38,39,40,41,46,59,60,66,67,78,79,90,91,92,93,94,95,96,97],[2,75]),{7:[1,39]},{11:42,19:40,25:41,51:43,90:$V3},{18:[2,5],41:$Vb},o($Vc,[2,23],{46:$Vd}),o($Ve,[2,25]),o($Ve,[2,26]),o($Ve,[2,27]),o($Ve,[2,28]),o($Ve,[2,33]),o($Ve,$Vf,{39:$Vg,66:$Vh,67:$Vi}),o($Ve,[2,35],{39:$Vj,67:[1,50]}),o($Ve,[2,36]),o($Ve,[2,37]),o($Ve,[2,38]),{11:21,13:30,34:51,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},{11:54,13:30,34:52,39:$V5,40:[1,53],42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:55,63:$V8,64:$V9,65:$Va,90:$V3},o($Ve,[2,39]),o($Ve,[2,40]),o($Ve,[2,41]),o($Ve,[2,42]),o($Ve,[2,43]),{11:21,13:30,17:57,34:15,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,60:[1,56],61:34,63:$V8,64:$V9,65:$Va,90:$V3},{62:$Vk},o([14,18,21,24,28,30,35,38,40,41,46,60,79,90,91,92,93,94,95,96,97],[2,50]),o([18,21,24,28,30,35,38,40,41,46,60,79,90,91,92,93,94,95,96,97],[2,51]),o($Ve,[2,52]),{13:59,63:$V8},{1:[2,1]},o($Vl,[2,10],{20:60}),o($Vl,[2,8]),o($Vl,[2,82],{66:$Vh}),o($Vl,[2,83]),{11:21,13:30,34:61,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},{11:21,13:30,34:62,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},{11:63,51:64,90:$V3},{11:21,13:30,17:65,34:15,39:$V5,40:[1,66],42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},{11:67,90:$V3},{11:21,13:30,17:68,34:15,39:$V5,40:[1,69],42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},{11:70,90:$V3},o($Ve,[2,32]),{18:[1,75],21:[1,73],28:[1,82],46:$Vd,47:71,48:72,91:[1,74],92:[1,76],93:[1,77],94:[1,78],95:[1,79],96:[1,80],97:[1,81]},o($Vm,[2,47]),o([18,21,28,46,91,92,93,94,95,96,97],$Vf,{39:$Vg,40:[1,83],66:$Vh,67:$Vi}),{41:[1,84],62:$Vk},o($Ve,[2,44]),{41:$Vb,60:[1,85]},{11:21,13:30,34:86,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},{14:[1,87]},{11:92,21:[1,88],24:[1,89],26:90,27:91,90:$V3},o($Vc,[2,24],{46:$Vd}),{30:[1,93],46:$Vd},o($Vn,[2,55],{66:$Vh}),o($Vn,[2,56]),{40:[1,94],41:$Vb},o($Vo,[2,54]),o($Ve,[2,59],{39:[1,95]}),{40:[1,96],41:$Vb},o($Vo,[2,58]),o($Ve,[2,61],{39:[1,97]}),{11:21,13:30,34:98,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},o($Vp,[2,31]),o($Vp,[2,86]),o($Vp,[2,87]),o($Vp,[2,88]),o($Vp,[2,89]),o($Vp,[2,90]),o($Vp,[2,91]),o($Vp,[2,92]),o($Vp,[2,93]),o($Vp,[2,94]),o($Vp,[2,95]),o($Vm,[2,48]),{11:99,90:$V3},o($Ve,[2,45]),o($Vq,[2,46],{46:$Vd}),o($V2,[2,4]),{6:103,18:$V4,22:100,23:[2,80],31:105,33:$Vr,68:101,69:102,70:104,71:106,72:107,73:110,74:$Vs,81:111,85:112,89:$Vt},o($Vu,[2,7]),o($Vl,[2,9]),o($Vl,[2,12],{28:[1,114]}),o($Vv,[2,13],{30:[1,115]}),{11:21,13:30,34:116,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},o($Vo,[2,53]),{11:21,13:30,17:117,34:15,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},o($Vo,[2,57]),{11:21,13:30,17:118,34:15,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},{40:[1,119],46:$Vd},{40:[1,120]},{23:[1,121]},{6:103,18:$V4,23:[2,81],31:105,33:$Vr,69:122,70:104,71:106,72:107,73:110,74:$Vs,81:111,85:112,89:$Vt},o($Vw,[2,63]),o($Vw,[2,65]),o($Vw,[2,66]),o($Vw,[2,67]),o($Vw,[2,68]),o($Vw,[2,69]),{11:21,13:30,34:123,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},o($Vw,[2,74]),o($Vw,[2,96]),o($Vw,[2,97]),o($Vw,[2,98]),{75:$Vx,82:$Vy,86:$Vz},{13:130,29:127,31:128,32:129,33:$Vr,57:131,63:$V8,64:$V9},{11:132,90:$V3},o($Vq,[2,29],{46:$Vd}),{40:[1,133],41:$Vb},{40:[1,134],41:$Vb},o($Ve,[2,30]),o($Vm,[2,49]),{11:42,19:135,25:41,51:43,90:$V3},o($Vw,[2,64]),{35:[1,136],36:137,37:138,38:$VA,46:$Vd},{11:140,90:$V3},{11:21,13:30,34:141,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},{11:143,51:144,52:145,53:146,87:142,90:$V3},o($Vl,[2,11]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,84]),o($Vl,[2,85]),o($Vv,[2,14]),o($Ve,[2,60]),o($Ve,[2,62]),{21:[1,147]},o($VB,[2,17]),{35:[1,148],37:149,38:$VA},o($VC,[2,19]),{11:150,90:$V3},o($VD,[2,99],{76:151,41:[1,152]}),{46:$Vd,79:[1,153]},{55:155,59:$V7,79:[2,107],88:154},o($VE,[2,103],{39:$Vg,66:$Vh}),o($VE,[2,104],{39:$Vj}),o($VE,[2,105]),o($VE,[2,106]),o($Vu,[2,6]),o($VB,[2,18]),o($VC,[2,20]),o($VC,[2,21],{39:[1,156]}),{11:158,77:157,78:[2,101],90:$V3},o($VD,[2,100]),{6:103,18:$V4,31:105,33:$Vr,68:159,69:102,70:104,71:106,72:107,73:110,74:$Vs,81:111,85:112,89:$Vt},{79:[1,160]},{79:[2,108]},{11:21,13:30,17:161,34:15,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},{78:[1,162]},{78:[2,102]},{6:103,18:$V4,31:105,33:$Vr,69:122,70:104,71:106,72:107,73:110,74:[1,163],81:111,85:112,89:$Vt},o($Vw,[2,73]),{40:[1,164],41:$Vb},{11:21,13:30,34:165,39:$V5,42:16,43:17,44:18,45:19,49:$V6,50:20,51:22,52:23,53:24,54:25,55:28,56:29,57:31,58:32,59:$V7,61:34,63:$V8,64:$V9,65:$Va,90:$V3},{75:$Vx,82:$Vy,83:[1,166],84:[1,167],86:$Vz},o($VC,[2,22]),{46:$Vd,79:[1,168]},{79:[1,169]},{79:[1,170]},{6:103,18:$V4,31:105,33:$Vr,68:171,69:102,70:104,71:106,72:107,73:110,74:$Vs,81:111,85:112,89:$Vt},o($Vw,[2,71]),{6:103,18:$V4,31:105,33:$Vr,68:172,69:102,70:104,71:106,72:107,73:110,74:$Vs,81:111,85:112,89:$Vt},{6:103,18:$V4,31:105,33:$Vr,69:122,70:104,71:106,72:107,73:110,74:[1,173],81:111,85:112,89:$Vt},{6:103,18:$V4,31:105,33:$Vr,69:122,70:104,71:106,72:107,73:110,74:[1,174],81:111,85:112,89:$Vt},{75:$Vx,80:[1,175],82:$Vy,86:$Vz},{75:$Vx,82:$Vy,83:[1,176],86:$Vz},{79:[1,177]},{79:[1,178]},o($Vw,[2,70]),o($Vw,[2,72])],
defaultActions: {7:[2,79],39:[2,1],155:[2,108],158:[2,102]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return;
break;
case 1:return 10;
break;
case 2:return 12;
break;
case 3:return 16;
break;
case 4:return 75;
break;
case 5:return 80;
break;
case 6:return 82;
break;
case 7:return 83;
break;
case 8:return 84;
break;
case 9:return 'ELSEIF';
break;
case 10:return 78;
break;
case 11:return 86;
break;
case 12:return 65;
break;
case 13:return 64;
break;
case 14:return 63;
break;
case 15:return 33;
break;
case 16:return 35;
break;
case 17:return 38;
break;
case 18:return 62;
break;
case 19:return 67;
break;
case 20:return '->';
break;
case 21:this.begin('CONTROL');      return 74;
break;
case 22:this.begin('CHILDREN');     return 79;
break;
case 23:return 23;
break;
case 24:this.begin('CHILDREN');     return 24;
break;
case 25:this.begin('CHILDREN');     return 21;
break;
case 26:return 18;
break;
case 27:return 39;
break;
case 28:return 40;
break;
case 29:return 59;
break;
case 30:return 60;
break;
case 31:return 14
break;
case 32:return 30;
break;
case 33:return 28
break;
case 34:return 93;
break;
case 35:return 94;
break;
case 36:return 91;
break;
case 37:return 92;
break;
case 38:return 95;
break;
case 39:return 97;
break;
case 40:return '*';
break;
case 41:return 96;
break;
case 42:return 49;
break;
case 43:return 41;
break;
case 44:return 46;
break;
case 45:return '{';
break;
case 46:return '}';
break;
case 47:return 90;
break;
case 48:this.popState();           return 33;
break;
case 49:this.begin('CONTROL');     return 74;
break;
case 50:this.popState();           return 23;
break;
case 51:this.popState();           return 18;
break;
case 52:this.popState();           return 89;
break;
case 53:return 7;
break;
case 54:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:import)/,/^(?:from)/,/^(?:uses)/,/^(?:for)/,/^(?:endfor)/,/^(?:if)/,/^(?:endif)/,/^(?:else)/,/^(?:elseif)/,/^(?:in)/,/^(?:include)/,/^(?:true|false)/,/^(?:((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')))/,/^(?:\{\{)/,/^(?:\}\})/,/^(?:\|)/,/^(?:=>)/,/^(?:::)/,/^(?:->)/,/^(?:\{%)/,/^(?:%\})/,/^(?:<\/)/,/^(?:\/>)/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:!)/,/^(?:,)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:([a-zA-Z$0-9_][a-zA-Z$_0-9.-]*))/,/^(?:\{\{)/,/^(?:\{%)/,/^(?:<\/)/,/^(?:<)/,/^(?:[^\/<>{%}]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"CONTROL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,53,54],"inclusive":true},"CHILDREN":{"rules":[0,48,49,50,51,52,53],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ParserImpl;
exports.Parser = ParserImpl.Parser;
exports.parse = function () { return ParserImpl.parse.apply(ParserImpl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}