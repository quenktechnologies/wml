/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ParserImpl = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,5],$V2=[8,13],$V3=[1,14],$V4=[16,19,77],$V5=[16,19,29,33,77],$V6=[1,18],$V7=[1,28],$V8=[1,37],$V9=[1,41],$Va=[1,38],$Vb=[6,13,18,27,63,76],$Vc=[16,19,22,77],$Vd=[13,16,19,29,30,33,35,36,55,68,77,79,80,81,82,83,84,85],$Ve=[13,18,27,63,76],$Vf=[1,56],$Vg=[1,61],$Vh=[1,62],$Vi=[1,63],$Vj=[1,64],$Vk=[1,65],$Vl=[29,30,35,36,55,68],$Vm=[13,16,29,30,35,36,55,68,79,80,81,82,83,84,85],$Vn=[51,52,53,54,77],$Vo=[13,16,18,19,27,63,76,77],$Vp=[1,96],$Vq=[35,36,55],$Vr=[67,77],$Vs=[29,77];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"template":3,"imports":4,"tag":5,"EOF":6,"import":7,"IMPORT":8,"variable":9,"FROM":10,"string_literal":11,";":12,"<":13,"name":14,"attributes":15,">":16,"tag_option0":17,"</":18,"/>":19,"attribute":20,"attribute_name":21,"=":22,"attribute_value":23,":":24,"interpolation":25,"attribute_value_group0":26,"{{":27,"expression":28,"}}":29,"|":30,"filters":31,"filter":32,"(":33,"arguments":34,")":35,",":36,"unary_expression":37,"value_expression":38,"unary_operator":39,"!":40,"literal":41,"function_expression":42,"property_expression":43,"method_expression":44,"binary_expression":45,"binary_operator":46,"binary_operator_group0":47,"boolean_literal":48,"number_literal":49,"array_literal":50,"BOOLEAN":51,"NUMBER_LITERAL":52,"STRING_LITERAL":53,"[":54,"]":55,".":56,"children":57,"child":58,"control":59,"characters":60,"control_group0":61,"for":62,"{%":63,"FOR":64,"for_option0":65,"for_option1":66,"IN":67,"%}":68,"ENDFOR":69,"if":70,"IF":71,"if_group0":72,"ENDIF":73,"if_group1":74,"ELSE":75,"CHARACTERS":76,"NAME":77,"name_group0":78,">=":79,"<=":80,"==":81,"!=":82,"+":83,"/":84,"-":85,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"IMPORT",10:"FROM",12:";",13:"<",16:">",18:"</",19:"/>",22:"=",24:":",27:"{{",29:"}}",30:"|",33:"(",35:")",36:",",40:"!",51:"BOOLEAN",52:"NUMBER_LITERAL",53:"STRING_LITERAL",54:"[",55:"]",56:".",63:"{%",64:"FOR",67:"IN",68:"%}",69:"ENDFOR",71:"IF",73:"ENDIF",75:"ELSE",76:"CHARACTERS",77:"NAME",79:">=",80:"<=",81:"==",82:"!=",83:"+",84:"/",85:"-"},
productions_: [0,[3,3],[3,2],[4,1],[4,2],[7,5],[5,8],[5,4],[15,2],[15,0],[20,3],[20,1],[21,1],[21,3],[23,1],[23,1],[25,3],[25,5],[31,1],[31,2],[32,1],[32,4],[34,1],[34,3],[28,1],[28,1],[37,2],[39,1],[38,1],[38,1],[38,1],[38,1],[38,1],[45,3],[46,1],[41,1],[41,1],[41,1],[41,1],[48,1],[49,1],[11,1],[50,2],[50,3],[42,4],[42,3],[43,3],[43,3],[44,4],[44,3],[57,1],[57,2],[58,1],[58,1],[58,1],[58,1],[59,1],[62,12],[70,8],[70,12],[60,1],[9,1],[14,1],[17,0],[17,1],[26,1],[26,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[61,1],[61,1],[65,0],[65,1],[66,0],[66,1],[72,1],[72,1],[72,1],[74,1],[74,1],[78,1],[78,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new yy.ast.Template($$[$0-2], $$[$0-1], yy.help.location(this._$, _$[$0-2], _$[$0-1])); return this.$;
break;
case 2:
this.$ = new yy.ast.Template([], $$[$0-1], yy.help.location(this._$, _$[$0-1], _$[$0-1])); return this.$;
break;
case 3: case 18:
this.$ =  [$$[$0]];         
break;
case 4: case 19: case 51:
this.$ = $$[$0-1].concat($$[$0]); 
break;
case 5:
this.$ = new yy.ast.Import($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-4], _$[$0]));
break;
case 6:

             yy.help.ensureTagsMatch($$[$0-6], $$[$0]);
             this.$ = new yy.ast.Tag($$[$0-6], $$[$0-5], $$[$0-3]?$$[$0-3]:[], yy.help.location(this._$, _$[$0-7], _$[$0]));
             
break;
case 7:
 this.$ = new yy.ast.Tag($$[$0-2], $$[$0-1], [], yy.help.location(this._$, _$[$0-3], _$[$0])); 
break;
case 8:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 9:
this.$ = [];
break;
case 10:
this.$ = new yy.ast.Attribute($$[$0-2].name, $$[$0-2].namespace, $$[$0], yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 11:
this.$ = new yy.ast.Attribute($$[$0].name, $$[$0].namespace, 
            new yy.ast.BooleanLiteral(true, yy.help.location(this._$, _$[$0], _$[$0])),
            yy.help.location(this._$, _$[$0], _$[$0]));
break;
case 12:
this.$ = {namespace:null, name:$$[$0]};
break;
case 13:
this.$ = {namespace:$$[$0-2], name:$$[$0]};
break;
case 14: case 15: case 27: case 56: case 61: case 62:
this.$ = $$[$0];
break;
case 16:
this.$ = new yy.ast.Interpolation($$[$0-1], [], yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 17:
this.$ = new yy.ast.Interpolation($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-4], _$[$0]));
break;
case 20:
this.$ = new yy.ast.Filter($$[$0], [], yy.help.location(this._$, _$[$0], _$[$0]));
break;
case 21:
this.$ = new yy.ast.Filter($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-3], _$[$0]));
break;
case 22: case 50:
this.$ = [$$[$0]];          
break;
case 23:
this.$ = $$[$0-2].concat($$[$0]); 
break;
case 26:
this.$ = new yy.ast.UnaryExpression($$[$0-1], $$[$0], yy.help.location(this._$, _$[$0-1], _$[$0]));
break;
case 33:
this.$ = new yy.ast.BinaryExpression($$[$0-2], $$[$0-1], $$[$0],  yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 34:
 this.$ = yy.help.convertOperator($$[$0]);
break;
case 39:
this.$ = new yy.ast.BooleanLiteral(yy.help.parseBoolean($$[$0]), yy.help.location(this._$, _$[$0], _$[$0]));
break;
case 40:
this.$ = new yy.ast.NumberLiteral(yy.help.parseNumber($$[$0]), yy.help.location(this._$, _$[$0], _$[$0])); 
break;
case 41:
this.$ = new yy.ast.StringLiteral($$[$0], yy.help.location(this._$, _$[$0], _$[$0])); 
break;
case 42:
this.$ = new yy.ast.ArrayLiteral([], yy.help.location(this._$, _$[$0-1], _$[$0])); 
break;
case 43:
this.$ = new yy.ast.ArrayLiteral($$[$0-1], yy.help.location(this._$, _$[$0-2], _$[$0])); 
break;
case 44:
this.$ = new yy.ast.FunctionExpression($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-3], _$[$0]));
break;
case 45:
this.$ = new yy.ast.FunctionExpression($$[$0-2], [], yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 46: case 47:
this.$ = $$[$0-2]+'.'+$$[$0];
break;
case 48:
this.$ = new yy.ast.MethodExpression($$[$0-3], $$[$0-1], yy.help.location(this._$, _$[$0-3], _$[$0]));
break;
case 49:
this.$ = new yy.ast.MethodExpression($$[$0-2], [], yy.help.location(this._$, _$[$0-2], _$[$0]));
break;
case 57:

            
            this.$ = new yy.ast.ForLoop($$[$0-9], 
            ($$[$0-7])? $$[$0-7] : 'index',
            $$[$0-5],
            $$[$0-3],
            yy.help.location(this._$, _$[$0-11], _$[$0])); 
            
            
break;
case 58:
this.$ = new yy.ast.IfCondition($$[$0-5], $$[$0-3], [], yy.help.location(this._$, _$[$0-7], _$[$0])); 
break;
case 59:
this.$ = new yy.ast.IfCondition($$[$0-9], $$[$0-7], $$[$0-3], yy.help.location(this._$, _$[$0-11], _$[$01]));
break;
case 60:
this.$ = new yy.ast.Characters($$[$0], yy.help.location(this._$, _$[$0], _$[$0])); 
break;
}
},
table: [{3:1,4:2,5:3,7:4,8:$V0,13:$V1},{1:[3]},{5:7,7:8,8:$V0,13:$V1},{6:[1,9]},o($V2,[2,3]),{9:12,14:10,43:13,77:$V3,78:11},{9:15,77:$V3},{6:[1,16]},o($V2,[2,4]),{1:[2,2]},o($V4,[2,9],{15:17}),o($V5,[2,62]),o($V5,[2,87],{56:$V6}),o($V5,[2,88]),o([10,13,16,19,22,24,29,30,33,35,36,55,56,67,68,77,79,80,81,82,83,84,85],[2,61]),{10:[1,19]},{1:[2,1]},{9:24,16:[1,20],19:[1,21],20:22,21:23,77:$V3},{9:25,43:26,77:$V3},{11:27,53:$V7},{5:32,13:$V1,17:29,18:[2,63],25:34,27:$V8,57:30,58:31,59:33,60:35,61:36,62:39,63:$V9,70:40,76:$Va},o($Vb,[2,7]),o($V4,[2,8]),o($V4,[2,11],{22:[1,42]}),o($Vc,[2,12],{24:[1,43]}),o($Vd,[2,46],{56:$V6}),o($Vd,[2,47]),{12:[1,44]},o([12,13,16,19,29,30,35,36,55,68,77,79,80,81,82,83,84,85],[2,41]),{18:[1,45]},{5:32,13:$V1,18:[2,64],25:34,27:$V8,58:46,59:33,60:35,61:36,62:39,63:$V9,70:40,76:$Va},o($Ve,[2,50]),o($Ve,[2,52]),o($Ve,[2,53]),o($Ve,[2,54]),o($Ve,[2,55]),o($Ve,[2,56]),{9:51,11:59,28:47,37:48,38:49,39:50,40:$Vf,41:52,42:53,43:54,44:55,48:57,49:58,50:60,51:$Vg,52:$Vh,53:$V7,54:$Vi,77:$V3},o($Ve,[2,60]),o($Ve,[2,76]),o($Ve,[2,77]),{64:$Vj,71:$Vk},{11:69,23:66,25:67,26:68,27:$V8,49:70,52:$Vh,53:$V7},{9:71,77:$V3},o($V2,[2,5]),{9:12,14:72,43:13,77:$V3,78:11},o($Ve,[2,51]),{29:[1,73],30:[1,74]},o($Vl,[2,24]),o($Vl,[2,25]),{9:51,11:59,38:75,41:52,42:53,43:54,44:55,48:57,49:58,50:60,51:$Vg,52:$Vh,53:$V7,54:$Vi,77:$V3},o($Vm,[2,28],{33:[1,76],56:$V6}),o($Vm,[2,29]),o($Vm,[2,30]),o($Vm,[2,31],{33:[1,77]}),o($Vm,[2,32]),o($Vn,[2,27]),o($Vm,[2,35]),o($Vm,[2,36]),o($Vm,[2,37]),o($Vm,[2,38]),o($Vm,[2,39]),o([13,16,19,29,30,35,36,55,68,77,79,80,81,82,83,84,85],[2,40]),{9:51,11:59,28:80,34:79,37:48,38:49,39:50,40:$Vf,41:52,42:53,43:54,44:55,48:57,49:58,50:60,51:$Vg,52:$Vh,53:$V7,54:$Vi,55:[1,78],77:$V3},{9:81,77:$V3},{9:51,11:59,37:85,38:86,39:50,40:$Vf,41:52,42:53,43:54,44:55,45:84,48:57,49:58,50:60,51:$Vg,52:$Vh,53:$V7,54:$Vi,72:82,74:83,77:$V3},o($V4,[2,10]),o($V4,[2,14]),o($V4,[2,15]),o($V4,[2,65]),o($V4,[2,66]),o($Vc,[2,13]),{16:[1,87]},o($Vo,[2,16]),{9:12,14:90,31:88,32:89,43:13,77:$V3,78:11},o($Vl,[2,26]),{9:51,11:59,28:80,34:91,35:[1,92],37:48,38:49,39:50,40:$Vf,41:52,42:53,43:54,44:55,48:57,49:58,50:60,51:$Vg,52:$Vh,53:$V7,54:$Vi,77:$V3},{9:51,11:59,28:80,34:93,35:[1,94],37:48,38:49,39:50,40:$Vf,41:52,42:53,43:54,44:55,48:57,49:58,50:60,51:$Vg,52:$Vh,53:$V7,54:$Vi,77:$V3},o($Vm,[2,42]),{36:$Vp,55:[1,95]},o($Vq,[2,22]),o($Vr,[2,78],{65:97,36:[1,98]}),{68:[1,99]},{68:[1,100]},{68:[2,82]},{68:[2,83]},{13:[1,105],16:[1,103],46:101,47:102,68:[2,84],79:[1,104],80:[1,106],81:[1,107],82:[1,108],83:[1,109],84:[1,110],85:[1,111]},o($Vb,[2,6]),{9:12,14:90,29:[1,112],32:113,43:13,77:$V3,78:11},o($Vs,[2,18]),o($Vs,[2,20],{33:[1,114]}),{35:[1,115],36:$Vp},o($Vm,[2,45]),{35:[1,116],36:$Vp},o($Vm,[2,49]),o($Vm,[2,43]),{9:51,11:59,28:117,37:48,38:49,39:50,40:$Vf,41:52,42:53,43:54,44:55,48:57,49:58,50:60,51:$Vg,52:$Vh,53:$V7,54:$Vi,77:$V3},{9:119,66:118,67:[2,80],77:$V3},o($Vr,[2,79]),{5:32,13:$V1,25:34,27:$V8,57:120,58:31,59:33,60:35,61:36,62:39,63:$V9,70:40,76:$Va},{5:32,13:$V1,25:34,27:$V8,57:121,58:31,59:33,60:35,61:36,62:39,63:$V9,70:40,76:$Va},{9:51,11:59,38:122,41:52,42:53,43:54,44:55,48:57,49:58,50:60,51:$Vg,52:$Vh,53:$V7,54:$Vi,77:$V3},o($Vn,[2,34]),o($Vn,[2,67]),o($Vn,[2,68]),o($Vn,[2,69]),o($Vn,[2,70]),o($Vn,[2,71]),o($Vn,[2,72]),o($Vn,[2,73]),o($Vn,[2,74]),o($Vn,[2,75]),o($Vo,[2,17]),o($Vs,[2,19]),{9:51,11:59,28:80,34:123,37:48,38:49,39:50,40:$Vf,41:52,42:53,43:54,44:55,48:57,49:58,50:60,51:$Vg,52:$Vh,53:$V7,54:$Vi,77:$V3},o($Vm,[2,44]),o($Vm,[2,48]),o($Vq,[2,23]),{67:[1,124]},{67:[2,81]},{5:32,13:$V1,25:34,27:$V8,58:46,59:33,60:35,61:36,62:39,63:[1,125],70:40,76:$Va},{5:32,13:$V1,25:34,27:$V8,58:46,59:33,60:35,61:36,62:39,63:[1,126],70:40,76:$Va},{68:[2,33]},{35:[1,127],36:$Vp},{9:51,11:59,28:128,37:48,38:49,39:50,40:$Vf,41:52,42:53,43:54,44:55,48:57,49:58,50:60,51:$Vg,52:$Vh,53:$V7,54:$Vi,77:$V3},{64:$Vj,71:$Vk,73:[1,129]},{64:$Vj,71:$Vk,75:[1,130]},o($Vs,[2,21]),{68:[1,131]},{68:[1,132]},{68:[1,133]},{5:32,13:$V1,25:34,27:$V8,57:134,58:31,59:33,60:35,61:36,62:39,63:$V9,70:40,76:$Va},o($Ve,[2,58]),{5:32,13:$V1,25:34,27:$V8,57:135,58:31,59:33,60:35,61:36,62:39,63:$V9,70:40,76:$Va},{5:32,13:$V1,25:34,27:$V8,58:46,59:33,60:35,61:36,62:39,63:[1,136],70:40,76:$Va},{5:32,13:$V1,25:34,27:$V8,58:46,59:33,60:35,61:36,62:39,63:[1,137],70:40,76:$Va},{64:$Vj,69:[1,138],71:$Vk},{64:$Vj,71:$Vk,73:[1,139]},{68:[1,140]},{68:[1,141]},o($Ve,[2,57]),o($Ve,[2,59])],
defaultActions: {9:[2,2],16:[2,1],84:[2,82],85:[2,83],119:[2,81],122:[2,33]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return;
break;
case 1:return 8;
break;
case 2:return 10;
break;
case 3:return 64;
break;
case 4:return 69;
break;
case 5:return 71;
break;
case 6:return 73;
break;
case 7:return 75;
break;
case 8:return 'ELSEIF';
break;
case 9:return 67;
break;
case 10:return 51;
break;
case 11:return 27;
break;
case 12:return 29;
break;
case 13:return 30;
break;
case 14:this.begin('CONTROL');      return 63;
break;
case 15:this.begin('CHILDREN');     return 68;
break;
case 16:return 18;
break;
case 17:this.begin('CHILDREN');     return 19;
break;
case 18:this.begin('CHILDREN');     return 16;
break;
case 19:return 13;
break;
case 20:return 33;
break;
case 21:return 35;
break;
case 22:return 54;
break;
case 23:return 55;
break;
case 24:return 12
break;
case 25:return 24;
break;
case 26:return 22
break;
case 27:return 81;
break;
case 28:return 82;
break;
case 29:return 79;
break;
case 30:return 80;
break;
case 31:return 83;
break;
case 32:return 85;
break;
case 33:return '*';
break;
case 34:return 84;
break;
case 35:return 40;
break;
case 36:return 36;
break;
case 37:return 52;
break;
case 38:return 53;
break;
case 39:return 77;
break;
case 40:this.popState();           return 27;
break;
case 41:this.begin('CONTROL');     return 63;
break;
case 42:this.popState();           return 18;
break;
case 43:this.popState();           return 13;
break;
case 44:this.popState();           return 76;
break;
case 45:return 6;
break;
case 46:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:import)/,/^(?:from)/,/^(?:for)/,/^(?:endfor)/,/^(?:if)/,/^(?:endif)/,/^(?:else)/,/^(?:elseif)/,/^(?:in)/,/^(?:true|false)/,/^(?:\{\{)/,/^(?:\}\})/,/^(?:\|)/,/^(?:\{%)/,/^(?:%\})/,/^(?:<\/)/,/^(?:\/>)/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:!)/,/^(?:,)/,/^(?:(((([0]|(([1-9])([0-9]+)*))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([0]|(([1-9])([0-9]+)*))(([eE])([+-]?[0-9]+))?))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')))/,/^(?:([a-zA-Z$0-9_][a-zA-Z$_0-9.-]*))/,/^(?:\{\{)/,/^(?:\{%)/,/^(?:<\/)/,/^(?:<)/,/^(?:[^\/<>{%}]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"CONTROL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,46],"inclusive":true},"CHILDREN":{"rules":[0,40,41,42,43,44,45],"inclusive":false},"INITIAL":{"rules":[0,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ParserImpl;
exports.Parser = ParserImpl.Parser;
exports.parse = function () { return ParserImpl.parse.apply(ParserImpl, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}