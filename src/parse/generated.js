/* parser generated by jison 0.6.1-215 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

var generated = (function () {
    // See also:
    // http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
    // but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
    // with userland code which might access the derived class in a 'classic' way.
    function JisonParserError(msg, hash) {
        Object.defineProperty(this, "name", {
            enumerable: false,
            writable: false,
            value: "JisonParserError",
        });

        if (msg == null) msg = "???";

        Object.defineProperty(this, "message", {
            enumerable: false,
            writable: true,
            value: msg,
        });

        this.hash = hash;

        var stacktrace;
        if (hash && hash.exception instanceof Error) {
            var ex2 = hash.exception;
            this.message = ex2.message || msg;
            stacktrace = ex2.stack;
        }
        if (!stacktrace) {
            if (Error.hasOwnProperty("captureStackTrace")) {
                // V8/Chrome engine
                Error.captureStackTrace(this, this.constructor);
            } else {
                stacktrace = new Error(msg).stack;
            }
        }
        if (stacktrace) {
            Object.defineProperty(this, "stack", {
                enumerable: false,
                writable: false,
                value: stacktrace,
            });
        }
    }

    if (typeof Object.setPrototypeOf === "function") {
        Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
    } else {
        JisonParserError.prototype = Object.create(Error.prototype);
    }
    JisonParserError.prototype.constructor = JisonParserError;
    JisonParserError.prototype.name = "JisonParserError";

    // helper: reconstruct the productions[] table
    function bp(s) {
        var rv = [];
        var p = s.pop;
        var r = s.rule;
        for (var i = 0, l = p.length; i < l; i++) {
            rv.push([p[i], r[i]]);
        }
        return rv;
    }

    // helper: reconstruct the defaultActions[] table
    function bda(s) {
        var rv = {};
        var d = s.idx;
        var g = s.goto;
        for (var i = 0, l = d.length; i < l; i++) {
            var j = d[i];
            rv[j] = g[i];
        }
        return rv;
    }

    // helper: reconstruct the 'goto' table
    function bt(s) {
        var rv = [];
        var d = s.len;
        var y = s.symbol;
        var t = s.type;
        var a = s.state;
        var m = s.mode;
        var g = s.goto;
        for (var i = 0, l = d.length; i < l; i++) {
            var n = d[i];
            var q = {};
            for (var j = 0; j < n; j++) {
                var z = y.shift();
                switch (t.shift()) {
                    case 2:
                        q[z] = [m.shift(), g.shift()];
                        break;

                    case 0:
                        q[z] = a.shift();
                        break;

                    default:
                        // type === 1: accept
                        q[z] = [3];
                }
            }
            rv.push(q);
        }
        return rv;
    }

    // helper: runlength encoding with increment step: code, length: step (default step = 0)
    // `this` references an array
    function s(c, l, a) {
        a = a || 0;
        for (var i = 0; i < l; i++) {
            this.push(c);
            c += a;
        }
    }

    // helper: duplicate sequence from *relative* offset and length.
    // `this` references an array
    function c(i, l) {
        i = this.length - i;
        for (l += i; i < l; i++) {
            this.push(this[i]);
        }
    }

    // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
    function u(a) {
        var rv = [];
        for (var i = 0, l = a.length; i < l; i++) {
            var e = a[i];
            // Is this entry a helper function?
            if (typeof e === "function") {
                i++;
                e.apply(rv, a[i]);
            } else {
                rv.push(e);
            }
        }
        return rv;
    }

    var parser = {
        // Code Generator Information Report
        // ---------------------------------
        //
        // Options:
        //
        //   default action mode: ............. ["classic","merge"]
        //   test-compile action mode: ........ "parser:*,lexer:*"
        //   try..catch: ...................... true
        //   default resolve on conflict: ..... true
        //   on-demand look-ahead: ............ false
        //   error recovery token skip maximum: 3
        //   yyerror in parse actions is: ..... NOT recoverable,
        //   yyerror in lexer actions and other non-fatal lexer are:
        //   .................................. NOT recoverable,
        //   debug grammar/output: ............ false
        //   has partial LR conflict upgrade:   true
        //   rudimentary token-stack support:   false
        //   parser table compression mode: ... 2
        //   export debug tables: ............. false
        //   export *all* tables: ............. false
        //   module type: ..................... commonjs
        //   parser engine type: .............. lalr
        //   output main() in the module: ..... true
        //   has user-specified main(): ....... false
        //   has user-specified require()/import modules for main():
        //   .................................. false
        //   number of expected conflicts: .... 0
        //
        //
        // Parser Analysis flags:
        //
        //   no significant actions (parser is a language matcher only):
        //   .................................. false
        //   uses yyleng: ..................... false
        //   uses yylineno: ................... false
        //   uses yytext: ..................... false
        //   uses yylloc: ..................... false
        //   uses ParseError API: ............. false
        //   uses YYERROR: .................... false
        //   uses YYRECOVERING: ............... false
        //   uses YYERROK: .................... false
        //   uses YYCLEARIN: .................. false
        //   tracks rule values: .............. true
        //   assigns rule values: ............. true
        //   uses location tracking: .......... true
        //   assigns location: ................ true
        //   uses yystack: .................... false
        //   uses yysstack: ................... false
        //   uses yysp: ....................... true
        //   uses yyrulelength: ............... false
        //   uses yyMergeLocationInfo API: .... true
        //   has error recovery: .............. false
        //   has error reporting: ............. false
        //
        // --------- END OF REPORT -----------

        trace: function no_op_trace() {},
        JisonParserError: JisonParserError,
        yy: {},
        options: {
            type: "lalr",
            hasPartialLrUpgradeOnConflict: true,
            errorRecoveryTokenDiscardCount: 3,
            ebnf: true,
        },
        symbols_: {
            "!": 17,
            "!=": 61,
            $accept: 0,
            $end: 1,
            "%}": 27,
            "&&": 62,
            "(": 4,
            ")": 5,
            "*": 3,
            "+": 20,
            ",": 6,
            "-": 22,
            "->": 36,
            ".": 10,
            "...": 51,
            "/": 21,
            "/>": 38,
            ":": 9,
            "<": 15,
            "</": 37,
            "<=": 59,
            "=": 7,
            "==": 60,
            ">": 16,
            ">=": 58,
            "?": 19,
            "?.": 65,
            "??": 64,
            "@": 18,
            AS: 28,
            CHARACTERS: 49,
            CONSTRUCTOR: 57,
            CONTEXT: 30,
            ELSE: 44,
            ENDFOR: 43,
            ENDFUN: 35,
            ENDIF: 48,
            EOF: 1,
            FALSE: 55,
            FOR: 41,
            FROM: 26,
            FUN: 34,
            IDENTIFIER: 56,
            IF: 47,
            IMPORT: 25,
            IN: 42,
            INSTANCEOF: 66,
            LET: 32,
            NUMBER_LITERAL: 53,
            OF: 45,
            STRING_LITERAL: 52,
            THEN: 50,
            TO: 46,
            TRUE: 54,
            TYPE: 29,
            VIEW: 33,
            WHERE: 31,
            "[": 11,
            "]": 12,
            "^": 23,
            aggregate_member: 72,
            aliased_member: 71,
            arguments: 131,
            attribute: 116,
            attribute_value: 117,
            attribute_value_group: 175,
            attributes: 115,
            binary_expression: 134,
            binary_operator: 162,
            binary_operator_group: 182,
            boolean_literal: 153,
            call_expression: 141,
            characters: 130,
            child: 110,
            child_group: 169,
            children: 109,
            composite_member: 73,
            cons: 156,
            construct_expression: 140,
            constructor_type: 98,
            context_from_statement: 89,
            context_members: 81,
            context_property: 154,
            context_statement: 80,
            context_variable: 155,
            control: 121,
            control_group: 176,
            element: 111,
            else_clause: 129,
            error: 2,
            export: 77,
            exports: 76,
            expression: 132,
            filter: 120,
            filters: 119,
            for_from: 125,
            for_in: 123,
            for_of: 124,
            for_parameter: 127,
            for_parameters: 126,
            for_statement: 122,
            fun_statement: 91,
            function_expression: 145,
            function_type: 103,
            function_type_parameters: 104,
            grouped_type: 96,
            identifier: 159,
            if_expression: 133,
            if_statement: 128,
            import_member: 70,
            import_statement: 69,
            imports: 68,
            interpolation: 118,
            let_statement: 83,
            list: 150,
            list_type: 100,
            literal: 146,
            literal_group: 180,
            member: 75,
            member_declaration: 85,
            member_declaration_option: 167,
            member_declarations: 84,
            member_expression: 142,
            member_expression_head: 143,
            member_expression_head_group: 178,
            member_expression_tail: 144,
            member_expression_tail_group: 179,
            member_group: 165,
            member_list: 74,
            member_list_group: 163,
            member_list_group2: 164,
            member_path: 86,
            module: 67,
            node: 112,
            node_option: 170,
            node_option2: 171,
            non_function_type: 97,
            number_literal: 152,
            parameter: 107,
            parameter_list: 106,
            parameters: 105,
            parent_context: 82,
            properties: 148,
            property: 149,
            property_group: 181,
            qualified_constructor: 157,
            qualified_identifier: 160,
            record: 147,
            record_type: 99,
            simple_expression: 136,
            simple_expression_group: 177,
            string_literal: 151,
            tuple_type: 101,
            tuple_type_members: 102,
            type: 95,
            type_arg_list: 139,
            type_arguments: 138,
            type_members: 79,
            type_parameter: 94,
            type_parameter_list: 93,
            type_parameters: 92,
            type_statement: 78,
            type_statement_option: 166,
            unary_expression: 135,
            unqualified_constructor: 158,
            unqualified_identifier: 161,
            untyped_parameter: 108,
            view_construction: 137,
            view_directives: 90,
            view_statement: 87,
            view_statement_context: 88,
            view_statement_option: 168,
            widget: 113,
            widget_constructor: 114,
            widget_constructor_option: 174,
            widget_option: 172,
            widget_option2: 173,
            "{": 13,
            "{%": 24,
            "{{": 39,
            "|": 8,
            "||": 63,
            "}": 14,
            "}}": 40,
        },
        terminals_: {
            1: "EOF",
            2: "error",
            3: "*",
            4: "(",
            5: ")",
            6: ",",
            7: "=",
            8: "|",
            9: ":",
            10: ".",
            11: "[",
            12: "]",
            13: "{",
            14: "}",
            15: "<",
            16: ">",
            17: "!",
            18: "@",
            19: "?",
            20: "+",
            21: "/",
            22: "-",
            23: "^",
            24: "{%",
            25: "IMPORT",
            26: "FROM",
            27: "%}",
            28: "AS",
            29: "TYPE",
            30: "CONTEXT",
            31: "WHERE",
            32: "LET",
            33: "VIEW",
            34: "FUN",
            35: "ENDFUN",
            36: "->",
            37: "</",
            38: "/>",
            39: "{{",
            40: "}}",
            41: "FOR",
            42: "IN",
            43: "ENDFOR",
            44: "ELSE",
            45: "OF",
            46: "TO",
            47: "IF",
            48: "ENDIF",
            49: "CHARACTERS",
            50: "THEN",
            51: "...",
            52: "STRING_LITERAL",
            53: "NUMBER_LITERAL",
            54: "TRUE",
            55: "FALSE",
            56: "IDENTIFIER",
            57: "CONSTRUCTOR",
            58: ">=",
            59: "<=",
            60: "==",
            61: "!=",
            62: "&&",
            63: "||",
            64: "??",
            65: "?.",
            66: "INSTANCEOF",
        },
        TERROR: 2,
        EOF: 1,

        // internals: defined here so the object *structure* doesn't get modified by parse() et al,
        // thus helping JIT compilers like Chrome V8.
        originalQuoteName: null,
        originalParseError: null,
        cleanupAfterParse: null,
        constructParseErrorInfo: null,
        yyMergeLocationInfo: null,

        __reentrant_call_depth: 0, // INTERNAL USE ONLY
        __error_infos: [], // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
        __error_recovery_infos: [], // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

        // APIs which will be set up depending on user action code analysis:
        //yyRecovering: 0,
        //yyErrOk: 0,
        //yyClearIn: 0,

        // Helper APIs
        // -----------

        // Helper function which can be overridden by user code later on: put suitable quotes around
        // literal IDs in a description string.
        quoteName: function parser_quoteName(id_str) {
            return '"' + id_str + '"';
        },

        // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
        //
        // Return NULL when the symbol is unknown to the parser.
        getSymbolName: function parser_getSymbolName(symbol) {
            if (this.terminals_[symbol]) {
                return this.terminals_[symbol];
            }

            // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
            //
            // An example of this may be where a rule's action code contains a call like this:
            //
            //      parser.getSymbolName(#$)
            //
            // to obtain a human-readable name of the current grammar rule.
            var s = this.symbols_;
            for (var key in s) {
                if (s[key] === symbol) {
                    return key;
                }
            }
            return null;
        },

        // Return a more-or-less human-readable description of the given symbol, when available,
        // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
        //
        // Return NULL when the symbol is unknown to the parser.
        describeSymbol: function parser_describeSymbol(symbol) {
            if (
                symbol !== this.EOF &&
                this.terminal_descriptions_ &&
                this.terminal_descriptions_[symbol]
            ) {
                return this.terminal_descriptions_[symbol];
            } else if (symbol === this.EOF) {
                return "end of input";
            }
            var id = this.getSymbolName(symbol);
            if (id) {
                return this.quoteName(id);
            }
            return null;
        },

        // Produce a (more or less) human-readable list of expected tokens at the point of failure.
        //
        // The produced list may contain token or token set descriptions instead of the tokens
        // themselves to help turning this output into something that easier to read by humans
        // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
        // expected terminals and nonterminals is produced.
        //
        // The returned list (array) will not contain any duplicate entries.
        collect_expected_token_set: function parser_collect_expected_token_set(
            state,
            do_not_describe,
        ) {
            var TERROR = this.TERROR;
            var tokenset = [];
            var check = {};
            // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
            // If so, use that one instead of the less palatable token set.
            if (
                !do_not_describe &&
                this.state_descriptions_ &&
                this.state_descriptions_[state]
            ) {
                return [this.state_descriptions_[state]];
            }
            for (var p in this.table[state]) {
                p = +p;
                if (p !== TERROR) {
                    var d = do_not_describe ? p : this.describeSymbol(p);
                    if (d && !check[d]) {
                        tokenset.push(d);
                        check[d] = true; // Mark this token description as already mentioned to prevent outputting duplicate entries.
                    }
                }
            }
            return tokenset;
        },
        productions_: bp({
            pop: u([
                s,
                [67, 4],
                68,
                68,
                69,
                s,
                [70, 3],
                s,
                [71, 4, 1],
                74,
                75,
                76,
                76,
                s,
                [77, 6],
                78,
                79,
                79,
                s,
                [80, 3],
                s,
                [81, 4],
                82,
                83,
                84,
                84,
                85,
                s,
                [86, 4],
                s,
                [87, 9],
                88,
                88,
                89,
                90,
                90,
                s,
                [91, 4],
                92,
                93,
                93,
                94,
                94,
                s,
                [95, 3],
                96,
                96,
                s,
                [97, 4],
                s,
                [98, 4],
                99,
                99,
                s,
                [100, 6],
                101,
                101,
                102,
                102,
                s,
                [103, 5],
                s,
                [104, 4],
                105,
                105,
                106,
                s,
                [106, 4, 1],
                109,
                110,
                111,
                111,
                s,
                [112, 4],
                s,
                [113, 4],
                114,
                115,
                115,
                s,
                [116, 4],
                117,
                118,
                118,
                119,
                s,
                [119, 4, 1],
                122,
                122,
                123,
                123,
                124,
                124,
                125,
                s,
                [126, 3],
                127,
                127,
                128,
                128,
                s,
                [129, 3],
                130,
                131,
                131,
                s,
                [132, 6],
                133,
                s,
                [134, 6],
                135,
                135,
                136,
                137,
                137,
                138,
                139,
                139,
                s,
                [140, 4],
                s,
                [141, 18],
                s,
                [142, 3],
                143,
                144,
                s,
                [145, 3],
                146,
                147,
                147,
                148,
                148,
                149,
                150,
                s,
                [150, 4, 1],
                153,
                154,
                154,
                155,
                156,
                156,
                157,
                157,
                158,
                159,
                159,
                160,
                s,
                [160, 4, 1],
                163,
                164,
                164,
                165,
                165,
                166,
                166,
                167,
                167,
                168,
                168,
                s,
                [169, 5],
                170,
                170,
                171,
                171,
                172,
                172,
                173,
                173,
                174,
                174,
                175,
                175,
                176,
                176,
                s,
                [177, 9],
                s,
                [178, 9],
                s,
                [179, 3],
                s,
                [180, 5],
                181,
                181,
                s,
                [182, 16],
            ]),
            rule: u([
                3,
                2,
                2,
                1,
                1,
                2,
                6,
                s,
                [1, 3],
                s,
                [3, 3],
                1,
                3,
                c,
                [12, 3],
                s,
                [1, 6],
                7,
                1,
                3,
                4,
                6,
                7,
                c,
                [22, 4],
                2,
                8,
                c,
                [11, 3],
                c,
                [9, 4],
                8,
                9,
                9,
                10,
                7,
                8,
                8,
                9,
                c,
                [45, 3],
                3,
                1,
                2,
                s,
                [10, 4, -1],
                c,
                [49, 4],
                c,
                [51, 3],
                c,
                [28, 3],
                s,
                [1, 5],
                2,
                1,
                2,
                3,
                2,
                3,
                4,
                s,
                [3, 4],
                2,
                c,
                [25, 3],
                2,
                c,
                [10, 3],
                5,
                3,
                7,
                3,
                5,
                c,
                [13, 4],
                c,
                [90, 7],
                8,
                7,
                4,
                3,
                c,
                [4, 4],
                c,
                [43, 3],
                5,
                c,
                [20, 4],
                c,
                [90, 3],
                c,
                [129, 4],
                1,
                1,
                10,
                14,
                10,
                14,
                12,
                c,
                [39, 5],
                8,
                6,
                7,
                9,
                c,
                [121, 4],
                s,
                [1, 5],
                3,
                6,
                c,
                [67, 3],
                5,
                5,
                7,
                c,
                [37, 3],
                c,
                [9, 3],
                c,
                [4, 3],
                4,
                4,
                c,
                [4, 13],
                7,
                6,
                s,
                [6, 4, -1],
                3,
                c,
                [161, 6],
                c,
                [128, 4],
                c,
                [7, 4],
                c,
                [59, 5],
                2,
                c,
                [19, 3],
                c,
                [153, 6],
                c,
                [158, 7],
                s,
                [1, 3],
                0,
                1,
                0,
                c,
                [4, 3],
                c,
                [11, 11],
                c,
                [15, 9],
                s,
                [1, 16],
                c,
                [51, 9],
                s,
                [1, 18],
            ]),
        }),
        performAction: function parser__PerformAction(
            yyloc,
            yystate /* action[1] */,
            yysp,
            yyvstack,
            yylstack,
        ) {
            /* this == yyval */

            // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
            var yy = this.yy;
            var yyparser = yy.parser;
            var yylexer = yy.lexer;

            switch (yystate) {
                case 0:
                    /*! Production::    $accept : module $end */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-):
                    this.$ = yyvstack[yysp - 1];
                    this._$ = yylstack[yysp - 1];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-)
                    break;

                case 1:
                    /*! Production::    module : imports exports EOF */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Module(
                        yyvstack[yysp - 2],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    return this.$;
                    break;

                case 2:
                    /*! Production::    module : imports EOF */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Module(yyvstack[yysp - 1], [], this._$);
                    return this.$;
                    break;

                case 3:
                    /*! Production::    module : exports EOF */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Module([], yyvstack[yysp - 1], this._$);
                    return this.$;
                    break;

                case 4:
                    /*! Production::    module : EOF */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Module([], [], undefined, this._$);
                    break;

                case 5:
                /*! Production::    imports : import_statement */
                case 130:
                    /*! Production::    filters : filter */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = [yyvstack[yysp]];
                    break;

                case 6:
                /*! Production::    imports : imports import_statement */
                case 18:
                /*! Production::    exports : exports export */
                case 57:
                /*! Production::    view_directives : view_directives let_statement */
                case 108:
                /*! Production::    children : children child */
                case 122:
                /*! Production::    attributes : attributes attribute */
                case 131:
                    /*! Production::    filters : filters filter */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = yyvstack[yysp - 1].concat(yyvstack[yysp]);
                    break;

                case 7:
                    /*! Production::    import_statement : "{%" IMPORT import_member FROM string_literal "%}" */

                    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ImportStatement(
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 8:
                /*! Production::    import_member : aggregate_member */
                case 9:
                /*! Production::    import_member : aliased_member */
                case 10:
                /*! Production::    import_member : composite_member */
                case 19:
                /*! Production::    export : type_statement */
                case 20:
                /*! Production::    export : context_statement */
                case 21:
                /*! Production::    export : let_statement */
                case 22:
                /*! Production::    export : view_statement */
                case 23:
                /*! Production::    export : fun_statement */
                case 201:
                /*! Production::    member_expression_head : member_expression_head_group */
                case 202:
                /*! Production::    member_expression_tail : member_expression_tail_group */
                case 206:
                    /*! Production::    literal : literal_group */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-):
                    this.$ = yyvstack[yysp];
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,LT,LA,-,-)
                    break;

                case 11:
                    /*! Production::    aliased_member : member AS member */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.AliasedMember(
                        yyvstack[yysp - 2],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 12:
                    /*! Production::    aggregate_member : "*" AS member */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.AggregateMember(
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 13:
                    /*! Production::    composite_member : "(" member_list ")" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.CompositeMember(
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 14:
                /*! Production::    member_list : member_list_group */
                case 17:
                /*! Production::    exports : export */
                case 26:
                /*! Production::    type_members : type */
                case 31:
                /*! Production::    context_members : parent_context */
                case 32:
                /*! Production::    context_members : member_declaration */
                case 37:
                /*! Production::    member_declarations : member_declaration */
                case 40:
                /*! Production::    member_path : unqualified_identifier */
                case 41:
                /*! Production::    member_path : string_literal */
                case 56:
                /*! Production::    view_directives : let_statement */
                case 63:
                /*! Production::    type_parameter_list : type_parameter */
                case 90:
                /*! Production::    tuple_type_members : type */
                case 103:
                /*! Production::    parameter_list : parameter */
                case 107:
                /*! Production::    children : child */
                case 121:
                /*! Production::    attributes : attribute */
                case 142:
                /*! Production::    for_parameters : for_parameter */
                case 153:
                /*! Production::    arguments : expression */
                case 174:
                /*! Production::    type_arg_list : type */
                case 209:
                    /*! Production::    properties : property */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = [yyvstack[yysp]];
                    break;

                case 15:
                /*! Production::    member_list : member_list "," member_list_group2 */
                case 27:
                /*! Production::    type_members : type_members "|" type */
                case 33:
                /*! Production::    context_members : context_members "," parent_context */
                case 34:
                /*! Production::    context_members : context_members "," member_declaration */
                case 38:
                /*! Production::    member_declarations : member_declarations "," member_declaration */
                case 42:
                /*! Production::    member_path : member_path "." unqualified_identifier */
                case 43:
                /*! Production::    member_path : member_path "." string_literal */
                case 64:
                /*! Production::    type_parameter_list : type_parameter_list "," type_parameter */
                case 91:
                /*! Production::    tuple_type_members : tuple_type_members "," type */
                case 99:
                /*! Production::    function_type_parameters : function_type_parameters "," non_function_type */
                case 104:
                /*! Production::    parameter_list : parameter_list "," parameter */
                case 143:
                /*! Production::    for_parameters : for_parameters "," parameter */
                case 144:
                /*! Production::    for_parameters : for_parameters "," untyped_parameter */
                case 154:
                /*! Production::    arguments : arguments "," expression */
                case 175:
                /*! Production::    type_arg_list : type_arg_list "," type */
                case 210:
                    /*! Production::    properties : properties "," property */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = yyvstack[yysp - 2].concat(yyvstack[yysp]);
                    break;

                case 16:
                /*! Production::    member : member_group */
                case 24:
                /*! Production::    export : element */
                case 53:
                /*! Production::    view_statement_context : constructor_type */
                case 54:
                /*! Production::    view_statement_context : context_from_statement */
                case 67:
                /*! Production::    type : non_function_type */
                case 68:
                /*! Production::    type : function_type */
                case 69:
                /*! Production::    type : grouped_type */
                case 72:
                /*! Production::    non_function_type : constructor_type */
                case 73:
                /*! Production::    non_function_type : record_type */
                case 74:
                /*! Production::    non_function_type : list_type */
                case 75:
                /*! Production::    non_function_type : tuple_type */
                case 109:
                /*! Production::    child : child_group */
                case 110:
                /*! Production::    element : node */
                case 111:
                /*! Production::    element : widget */
                case 127:
                /*! Production::    attribute_value : attribute_value_group */
                case 133:
                /*! Production::    control : control_group */
                case 134:
                /*! Production::    for_statement : for_in */
                case 135:
                /*! Production::    for_statement : for_of */
                case 145:
                /*! Production::    for_parameter : parameter */
                case 146:
                /*! Production::    for_parameter : untyped_parameter */
                case 155:
                /*! Production::    expression : if_expression */
                case 156:
                /*! Production::    expression : binary_expression */
                case 157:
                /*! Production::    expression : unary_expression */
                case 158:
                /*! Production::    expression : simple_expression */
                case 159:
                /*! Production::    expression : function_expression */
                case 170:
                /*! Production::    simple_expression : simple_expression_group */
                case 221:
                /*! Production::    cons : qualified_constructor */
                case 222:
                /*! Production::    cons : unqualified_constructor */
                case 226:
                /*! Production::    identifier : qualified_identifier */
                case 227:
                /*! Production::    identifier : unqualified_identifier */
                case 231:
                /*! Production::    binary_operator : binary_operator_group */
                case 232:
                /*! Production::    member_list_group : member */
                case 233:
                /*! Production::    member_list_group : aliased_member */
                case 234:
                /*! Production::    member_list_group2 : member */
                case 235:
                /*! Production::    member_list_group2 : aliased_member */
                case 236:
                /*! Production::    member_group : unqualified_identifier */
                case 237:
                /*! Production::    member_group : unqualified_constructor */
                case 239:
                /*! Production::    type_statement_option : type_parameters */
                case 241:
                /*! Production::    member_declaration_option : "?" */
                case 243:
                /*! Production::    view_statement_option : view_directives */
                case 244:
                /*! Production::    child_group : element */
                case 245:
                /*! Production::    child_group : interpolation */
                case 246:
                /*! Production::    child_group : control */
                case 247:
                /*! Production::    child_group : characters */
                case 248:
                /*! Production::    child_group : identifier */
                case 250:
                /*! Production::    node_option : children */
                case 252:
                /*! Production::    node_option2 : children */
                case 254:
                /*! Production::    widget_option : children */
                case 256:
                /*! Production::    widget_option2 : children */
                case 258:
                /*! Production::    widget_constructor_option : type_arguments */
                case 259:
                /*! Production::    attribute_value_group : interpolation */
                case 260:
                /*! Production::    attribute_value_group : literal */
                case 261:
                /*! Production::    control_group : for_statement */
                case 262:
                /*! Production::    control_group : if_statement */
                case 263:
                /*! Production::    simple_expression_group : construct_expression */
                case 264:
                /*! Production::    simple_expression_group : call_expression */
                case 265:
                /*! Production::    simple_expression_group : view_construction */
                case 266:
                /*! Production::    simple_expression_group : member_expression */
                case 267:
                /*! Production::    simple_expression_group : literal */
                case 268:
                /*! Production::    simple_expression_group : context_property */
                case 269:
                /*! Production::    simple_expression_group : unqualified_constructor */
                case 270:
                /*! Production::    simple_expression_group : unqualified_identifier */
                case 271:
                /*! Production::    simple_expression_group : context_variable */
                case 272:
                /*! Production::    member_expression_head_group : unqualified_identifier */
                case 273:
                /*! Production::    member_expression_head_group : unqualified_constructor */
                case 274:
                /*! Production::    member_expression_head_group : context_variable */
                case 275:
                /*! Production::    member_expression_head_group : context_property */
                case 276:
                /*! Production::    member_expression_head_group : list */
                case 277:
                /*! Production::    member_expression_head_group : record */
                case 278:
                /*! Production::    member_expression_head_group : string_literal */
                case 279:
                /*! Production::    member_expression_head_group : call_expression */
                case 281:
                /*! Production::    member_expression_tail_group : unqualified_identifier */
                case 282:
                /*! Production::    member_expression_tail_group : unqualified_constructor */
                case 283:
                /*! Production::    member_expression_tail_group : string_literal */
                case 284:
                /*! Production::    literal_group : record */
                case 285:
                /*! Production::    literal_group : list */
                case 286:
                /*! Production::    literal_group : string_literal */
                case 287:
                /*! Production::    literal_group : number_literal */
                case 288:
                /*! Production::    literal_group : boolean_literal */
                case 289:
                /*! Production::    property_group : unqualified_identifier */
                case 290:
                /*! Production::    property_group : string_literal */
                case 291:
                /*! Production::    binary_operator_group : ">" */
                case 292:
                /*! Production::    binary_operator_group : ">=" */
                case 293:
                /*! Production::    binary_operator_group : "<" */
                case 294:
                /*! Production::    binary_operator_group : "<=" */
                case 295:
                /*! Production::    binary_operator_group : "==" */
                case 296:
                /*! Production::    binary_operator_group : "!=" */
                case 297:
                /*! Production::    binary_operator_group : "+" */
                case 298:
                /*! Production::    binary_operator_group : "/" */
                case 299:
                /*! Production::    binary_operator_group : "-" */
                case 300:
                /*! Production::    binary_operator_group : "=" */
                case 301:
                /*! Production::    binary_operator_group : "&&" */
                case 302:
                /*! Production::    binary_operator_group : "||" */
                case 303:
                /*! Production::    binary_operator_group : "^" */
                case 304:
                /*! Production::    binary_operator_group : "??" */
                case 305:
                /*! Production::    binary_operator_group : "?." */
                case 306:
                    /*! Production::    binary_operator_group : INSTANCEOF */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = yyvstack[yysp];
                    break;

                case 25:
                    /*! Production::    type_statement : "{%" TYPE unqualified_constructor type_statement_option "=" type_members "%}" */

                    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = new yy.ast.AliasStatement(
                        yyvstack[yysp - 4],
                        yyvstack[yysp - 3] || [],
                        yyvstack[yysp - 1],
                    );
                    break;

                case 28:
                    /*! Production::    context_statement : "{%" CONTEXT unqualified_constructor "%}" */

                    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ContextStatement(
                        yyvstack[yysp - 1],
                        [],
                        [],
                        this._$,
                    );
                    break;

                case 29:
                    /*! Production::    context_statement : "{%" CONTEXT unqualified_constructor WHERE context_members "%}" */

                    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ContextStatement(
                        yyvstack[yysp - 3],
                        [],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 30:
                    /*! Production::    context_statement : "{%" CONTEXT unqualified_constructor type_parameters WHERE context_members "%}" */

                    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ContextStatement(
                        yyvstack[yysp - 4],
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 35:
                    /*! Production::    parent_context : ":" constructor_type */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = yyvstack[yysp];
                    break;

                case 36:
                    /*! Production::    let_statement : "{%" LET unqualified_identifier ":" type "=" expression "%}" */

                    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.LetStatement(
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 39:
                    /*! Production::    member_declaration : member_path member_declaration_option ":" type */

                    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.MemberDeclaration(
                        yyvstack[yysp - 3],
                        yyvstack[yysp],
                        yyvstack[yysp - 2] ? true : false,
                        this._$,
                    );
                    break;

                case 44:
                    /*! Production::    view_statement : "{%" VIEW unqualified_constructor "(" view_statement_context ")" "%}" element */

                    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ViewStatement(
                        yyvstack[yysp - 5],
                        [],
                        yyvstack[yysp - 3],
                        [],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 45:
                    /*! Production::    view_statement : "{%" VIEW unqualified_constructor "(" view_statement_context ")" "%}" view_directives element */

                    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ViewStatement(
                        yyvstack[yysp - 6],
                        [],
                        yyvstack[yysp - 4],
                        yyvstack[yysp - 1],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 46:
                    /*! Production::    view_statement : "{%" VIEW unqualified_constructor type_parameters "(" view_statement_context ")" "%}" element */

                    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ViewStatement(
                        yyvstack[yysp - 6],
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3],
                        [],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 47:
                    /*! Production::    view_statement : "{%" VIEW unqualified_constructor type_parameters "(" view_statement_context ")" "%}" view_directives element */

                    // default action (generated by JISON mode classic/merge :: 10,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 9, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 10,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ViewStatement(
                        yyvstack[yysp - 7],
                        yyvstack[yysp - 6],
                        yyvstack[yysp - 4],
                        yyvstack[yysp - 1],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 48:
                    /*! Production::    view_statement : "{%" VIEW unqualified_constructor WHERE context_members "%}" element */

                    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ViewStatement(
                        yyvstack[yysp - 4],
                        [],
                        yyvstack[yysp - 2],
                        [],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 49:
                    /*! Production::    view_statement : "{%" VIEW unqualified_constructor WHERE context_members "%}" view_directives element */

                    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ViewStatement(
                        yyvstack[yysp - 5],
                        [],
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 50:
                    /*! Production::    view_statement : "{%" VIEW unqualified_constructor type_parameters WHERE context_members "%}" element */

                    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ViewStatement(
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 4],
                        yyvstack[yysp - 2],
                        [],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 51:
                    /*! Production::    view_statement : "{%" VIEW unqualified_constructor type_parameters WHERE context_members "%}" view_directives element */

                    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ViewStatement(
                        yyvstack[yysp - 6],
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 52:
                    /*! Production::    view_statement : "{%" VIEW unqualified_constructor "%}" view_statement_option element */

                    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ViewStatement(
                        yyvstack[yysp - 3],
                        [],
                        undefined,
                        yyvstack[yysp - 1] || [],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 55:
                    /*! Production::    context_from_statement : constructor_type FROM string_literal */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ContextFromStatement(
                        yyvstack[yysp - 2],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 58:
                    /*! Production::    fun_statement : "{%" FUN unqualified_identifier type_parameters parameters "%}" children "{%" ENDFUN "%}" */

                    // default action (generated by JISON mode classic/merge :: 10,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 9, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 10,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.FunStatement(
                        yyvstack[yysp - 7],
                        yyvstack[yysp - 6],
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3],
                        this._$,
                    );
                    break;

                case 59:
                    /*! Production::    fun_statement : "{%" FUN unqualified_identifier parameters "%}" children "{%" ENDFUN "%}" */

                    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.FunStatement(
                        yyvstack[yysp - 6],
                        [],
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3],
                        this._$,
                    );
                    break;

                case 60:
                    /*! Production::    fun_statement : "{%" FUN unqualified_identifier type_parameters parameters "=" child "%}" */

                    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.FunStatement(
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 4],
                        yyvstack[yysp - 3],
                        [yyvstack[yysp - 1]],
                        this._$,
                    );
                    break;

                case 61:
                    /*! Production::    fun_statement : "{%" FUN unqualified_identifier parameters "=" child "%}" */

                    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.FunStatement(
                        yyvstack[yysp - 4],
                        [],
                        yyvstack[yysp - 3],
                        [yyvstack[yysp - 1]],
                        this._$,
                    );
                    break;

                case 62:
                /*! Production::    type_parameters : "[" type_parameter_list "]" */
                case 70:
                /*! Production::    grouped_type : "(" non_function_type ")" */
                case 71:
                /*! Production::    grouped_type : "(" function_type ")" */
                case 102:
                /*! Production::    parameters : "(" parameter_list ")" */
                case 160:
                /*! Production::    expression : "(" expression ")" */
                case 173:
                    /*! Production::    type_arguments : "[" type_arg_list "]" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = yyvstack[yysp - 1];
                    break;

                case 65:
                    /*! Production::    type_parameter : unqualified_constructor */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.TypeParameter(
                        yyvstack[yysp],
                        undefined,
                        this._$,
                    );
                    break;

                case 66:
                    /*! Production::    type_parameter : unqualified_constructor ":" type */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.TypeParameter(
                        yyvstack[yysp - 2],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 76:
                /*! Production::    constructor_type : unqualified_constructor */
                case 78:
                    /*! Production::    constructor_type : qualified_constructor */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ConstructorType(
                        yyvstack[yysp],
                        [],
                        this._$,
                    );
                    break;

                case 77:
                /*! Production::    constructor_type : unqualified_constructor type_parameters */
                case 79:
                    /*! Production::    constructor_type : qualified_constructor type_parameters */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ConstructorType(
                        yyvstack[yysp - 1],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 80:
                    /*! Production::    record_type : "{" member_declarations "}" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.RecordType(yyvstack[yysp - 1], this._$);
                    break;

                case 81:
                    /*! Production::    record_type : "{" "}" */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.RecordType([], this._$);
                    break;

                case 82:
                    /*! Production::    list_type : unqualified_constructor "[" "]" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ListType(
                        new yy.ast.ConstructorType(yyvstack[yysp - 2], []),
                        this._$,
                    );
                    break;

                case 83:
                    /*! Production::    list_type : unqualified_constructor type_parameters "[" "]" */

                    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ListType(
                        new yy.ast.ConstructorType(
                            yyvstack[yysp - 3],
                            yyvstack[yysp - 2],
                        ),
                        this._$,
                    );
                    break;

                case 84:
                /*! Production::    list_type : record_type "[" "]" */
                case 85:
                /*! Production::    list_type : grouped_type "[" "]" */
                case 86:
                /*! Production::    list_type : tuple_type "[" "]" */
                case 87:
                    /*! Production::    list_type : list_type "[" "]" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ListType(yyvstack[yysp - 2], this._$);
                    break;

                case 88:
                    /*! Production::    tuple_type : "[" "]" */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.TupleType([], this._$);
                    break;

                case 89:
                    /*! Production::    tuple_type : "[" tuple_type_members "]" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.TupleType(yyvstack[yysp - 1], this._$);
                    break;

                case 92:
                    /*! Production::    function_type : "->" type */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.FunctionType(
                        [],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 93:
                    /*! Production::    function_type : "(" ")" "->" type */

                    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.FunctionType(
                        [],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 94:
                /*! Production::    function_type : non_function_type "->" type */
                case 95:
                    /*! Production::    function_type : grouped_type "->" type */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.FunctionType(
                        [yyvstack[yysp - 2]],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 96:
                    /*! Production::    function_type : "(" function_type_parameters ")" "->" type */

                    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.FunctionType(
                        yyvstack[yysp - 3],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 97:
                    /*! Production::    function_type_parameters : non_function_type "," non_function_type */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = [yyvstack[yysp - 2], yyvstack[yysp]];
                    break;

                case 98:
                    /*! Production::    function_type_parameters : "(" function_type ")" "," "(" function_type ")" */

                    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = [yyvstack[yysp - 5], yyvstack[yysp - 1]];
                    break;

                case 100:
                    /*! Production::    function_type_parameters : function_type_parameters "," "(" function_type ")" */

                    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = yyvstack[yysp - 4].concat(yyvstack[yysp - 1]);
                    break;

                case 101:
                    /*! Production::    parameters : "(" ")" */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = [];
                    break;

                case 105:
                    /*! Production::    parameter : unqualified_identifier ":" type */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.TypedParameter(
                        yyvstack[yysp - 2],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 106:
                    /*! Production::    untyped_parameter : unqualified_identifier */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.UntypedParameter(
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 112:
                    /*! Production::    node : "<" identifier attributes ">" node_option "</" identifier ">" */

                    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Node(
                        yyvstack[yysp - 6],
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3] || [],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 113:
                    /*! Production::    node : "<" identifier ">" node_option2 "</" identifier ">" */

                    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Node(
                        yyvstack[yysp - 5],
                        [],
                        yyvstack[yysp - 3] || [],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 114:
                    /*! Production::    node : "<" identifier attributes "/>" */

                    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Node(
                        yyvstack[yysp - 2],
                        yyvstack[yysp - 1],
                        [],
                        yyvstack[yysp - 2],
                        this._$,
                    );
                    break;

                case 115:
                    /*! Production::    node : "<" identifier "/>" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Node(
                        yyvstack[yysp - 1],
                        [],
                        [],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 116:
                    /*! Production::    widget : "<" widget_constructor attributes ">" widget_option "</" cons ">" */

                    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Widget(
                        yyvstack[yysp - 6][0],
                        yyvstack[yysp - 6][1],
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3] || [],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 117:
                    /*! Production::    widget : "<" widget_constructor ">" widget_option2 "</" cons ">" */

                    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Widget(
                        yyvstack[yysp - 5][0],
                        yyvstack[yysp - 5][1],
                        [],
                        yyvstack[yysp - 3] || [],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 118:
                    /*! Production::    widget : "<" widget_constructor attributes "/>" */

                    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Widget(
                        yyvstack[yysp - 2][0],
                        yyvstack[yysp - 2][1],
                        yyvstack[yysp - 1],
                        [],
                        yyvstack[yysp - 2],
                        this._$,
                    );
                    break;

                case 119:
                    /*! Production::    widget : "<" widget_constructor "/>" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Widget(
                        yyvstack[yysp - 1][0],
                        yyvstack[yysp - 1][1],
                        [],
                        [],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 120:
                    /*! Production::    widget_constructor : cons widget_constructor_option */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = [yyvstack[yysp - 1], yyvstack[yysp] || []];
                    break;

                case 123:
                    /*! Production::    attribute : unqualified_identifier ":" unqualified_identifier "=" attribute_value */

                    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Attribute(
                        yyvstack[yysp - 4],
                        yyvstack[yysp - 2],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 124:
                    /*! Production::    attribute : unqualified_identifier "=" attribute_value */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Attribute(
                        new yy.ast.UnqualifiedIdentifier("", this._$),
                        yyvstack[yysp - 2],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 125:
                    /*! Production::    attribute : unqualified_identifier ":" unqualified_identifier */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Attribute(
                        yyvstack[yysp - 2],
                        yyvstack[yysp],
                        new yy.ast.BooleanLiteral(true, this._$),
                        this._$,
                    );
                    break;

                case 126:
                    /*! Production::    attribute : unqualified_identifier */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Attribute(
                        new yy.ast.UnqualifiedIdentifier("", this._$),
                        yyvstack[yysp],
                        new yy.ast.BooleanLiteral(true, this._$),
                        this._$,
                    );
                    break;

                case 128:
                    /*! Production::    interpolation : "{{" expression "}}" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Interpolation(
                        yyvstack[yysp - 1],
                        [],
                        this._$,
                    );
                    break;

                case 129:
                    /*! Production::    interpolation : "{{" expression filters "}}" */

                    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Interpolation(
                        yyvstack[yysp - 2],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 132:
                    /*! Production::    filter : "|" expression */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = yyvstack[yysp];
                    break;

                case 136:
                    /*! Production::    for_statement : for_from */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,VUbA,LT,LA,-,-):
                    this.$ = yyvstack[yysp];
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,VUbA,LT,LA,-,-)

                    this.$ + yyvstack[yysp];
                    break;

                case 137:
                    /*! Production::    for_in : "{%" FOR for_parameters IN expression "%}" children "{%" ENDFOR "%}" */

                    // default action (generated by JISON mode classic/merge :: 10,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 9, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 10,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ForInStatement(
                        yyvstack[yysp - 7],
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3],
                        [],
                        this._$,
                    );
                    break;

                case 138:
                    /*! Production::    for_in : "{%" FOR for_parameters IN expression "%}" children "{%" ELSE "%}" children "{%" ENDFOR "%}" */

                    // default action (generated by JISON mode classic/merge :: 14,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 13, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 14,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ForInStatement(
                        yyvstack[yysp - 11],
                        yyvstack[yysp - 9],
                        yyvstack[yysp - 7],
                        yyvstack[yysp - 3],
                        this._$,
                    );
                    break;

                case 139:
                    /*! Production::    for_of : "{%" FOR for_parameters OF expression "%}" children "{%" ENDFOR "%}" */

                    // default action (generated by JISON mode classic/merge :: 10,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 9, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 10,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ForOfStatement(
                        yyvstack[yysp - 7],
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3],
                        [],
                        this._$,
                    );
                    break;

                case 140:
                    /*! Production::    for_of : "{%" FOR for_parameters OF expression "%}" children "{%" ELSE "%}" children "{%" ENDFOR "%}" */

                    // default action (generated by JISON mode classic/merge :: 14,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 13, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 14,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ForOfStatement(
                        yyvstack[yysp - 11],
                        yyvstack[yysp - 9],
                        yyvstack[yysp - 7],
                        yyvstack[yysp - 3],
                        this._$,
                    );
                    break;

                case 141:
                    /*! Production::    for_from : "{%" FOR untyped_parameter "=" expression TO expression "%}" children "{%" ENDFOR "%}" */

                    // default action (generated by JISON mode classic/merge :: 12,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 11, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 12,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ForFromStatement(
                        yyvstack[yysp - 9],
                        yyvstack[yysp - 7],
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3],
                        [],
                        this._$,
                    );
                    break;

                case 147:
                    /*! Production::    if_statement : "{%" IF expression "%}" children "{%" ENDIF "%}" */

                    // default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 7, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.IfStatement(
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3],
                        undefined,
                        this._$,
                    );
                    break;

                case 148:
                    /*! Production::    if_statement : "{%" IF expression "%}" children else_clause */

                    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.IfStatement(
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 149:
                    /*! Production::    else_clause : "{%" ELSE "%}" children "{%" ENDIF "%}" */

                    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ElseClause(yyvstack[yysp - 3], this._$);
                    break;

                case 150:
                    /*! Production::    else_clause : "{%" ELSE IF expression "%}" children "{%" ENDIF "%}" */

                    // default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 8, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ElseIfClause(
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3],
                        undefined,
                        this._$,
                    );
                    break;

                case 151:
                    /*! Production::    else_clause : "{%" ELSE IF expression "%}" children else_clause */

                    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ElseIfClause(
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 152:
                    /*! Production::    characters : CHARACTERS */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Characters(yyvstack[yysp], this._$);
                    break;

                case 161:
                    /*! Production::    if_expression : IF expression THEN expression ELSE expression */

                    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.IfThenExpression(
                        yyvstack[yysp - 4],
                        yyvstack[yysp - 2],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 162:
                /*! Production::    binary_expression : simple_expression binary_operator simple_expression */
                case 164:
                    /*! Production::    binary_expression : simple_expression AS type */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.BinaryExpression(
                        yyvstack[yysp - 2],
                        yyvstack[yysp - 1],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 163:
                    /*! Production::    binary_expression : simple_expression binary_operator "(" expression ")" */

                    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.BinaryExpression(
                        yyvstack[yysp - 4],
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 165:
                /*! Production::    binary_expression : "(" expression ")" binary_operator simple_expression */
                case 166:
                    /*! Production::    binary_expression : "(" expression ")" AS type */

                    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.BinaryExpression(
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 167:
                    /*! Production::    binary_expression : "(" expression ")" binary_operator "(" expression ")" */

                    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.BinaryExpression(
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 168:
                /*! Production::    unary_expression : "!" expression */
                case 169:
                    /*! Production::    unary_expression : "..." expression */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.UnaryExpression(
                        yyvstack[yysp - 1],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 171:
                    /*! Production::    view_construction : "<" simple_expression ">" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ViewConstruction(
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 172:
                    /*! Production::    view_construction : "<" "(" expression ")" ">" */

                    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ViewConstruction(
                        yyvstack[yysp - 2],
                        this._$,
                    );
                    break;

                case 176:
                    /*! Production::    construct_expression : unqualified_constructor type_arguments "(" arguments ")" */

                    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ConstructExpression(
                        yyvstack[yysp - 4],
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 177:
                    /*! Production::    construct_expression : unqualified_constructor "(" arguments ")" */

                    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ConstructExpression(
                        yyvstack[yysp - 3],
                        [],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 178:
                    /*! Production::    construct_expression : unqualified_constructor type_arguments "(" ")" */

                    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ConstructExpression(
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 2],
                        [],
                        this._$,
                    );
                    break;

                case 179:
                    /*! Production::    construct_expression : unqualified_constructor "(" ")" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ConstructExpression(
                        yyvstack[yysp - 2],
                        [],
                        [],
                        this._$,
                    );
                    break;

                case 180:
                /*! Production::    call_expression : unqualified_identifier type_arguments "(" arguments ")" */
                case 184:
                /*! Production::    call_expression : context_property type_arguments "(" arguments ")" */
                case 188:
                    /*! Production::    call_expression : member_expression type_arguments "(" arguments ")" */

                    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.CallExpression(
                        yyvstack[yysp - 4],
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 181:
                /*! Production::    call_expression : unqualified_identifier type_arguments "(" ")" */
                case 185:
                /*! Production::    call_expression : context_property type_arguments "(" ")" */
                case 189:
                    /*! Production::    call_expression : member_expression type_arguments "(" ")" */

                    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.CallExpression(
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 2],
                        [],
                        this._$,
                    );
                    break;

                case 182:
                /*! Production::    call_expression : unqualified_identifier "(" arguments ")" */
                case 186:
                /*! Production::    call_expression : context_property "(" arguments ")" */
                case 190:
                /*! Production::    call_expression : member_expression "(" arguments ")" */
                case 196:
                    /*! Production::    call_expression : call_expression "(" arguments ")" */

                    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.CallExpression(
                        yyvstack[yysp - 3],
                        [],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 183:
                /*! Production::    call_expression : unqualified_identifier "(" ")" */
                case 187:
                /*! Production::    call_expression : context_property "(" ")" */
                case 191:
                /*! Production::    call_expression : member_expression "(" ")" */
                case 197:
                    /*! Production::    call_expression : call_expression "(" ")" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.CallExpression(
                        yyvstack[yysp - 2],
                        [],
                        [],
                        this._$,
                    );
                    break;

                case 192:
                    /*! Production::    call_expression : "(" expression ")" type_arguments "(" arguments ")" */

                    // default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 6, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 7,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.CallExpression(
                        yyvstack[yysp - 5],
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 193:
                    /*! Production::    call_expression : "(" expression ")" type_arguments "(" ")" */

                    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.CallExpression(
                        yyvstack[yysp - 4],
                        yyvstack[yysp - 2],
                        [],
                        this._$,
                    );
                    break;

                case 194:
                    /*! Production::    call_expression : "(" expression ")" "(" arguments ")" */

                    // default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 5, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.CallExpression(
                        yyvstack[yysp - 4],
                        [],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 195:
                    /*! Production::    call_expression : "(" expression ")" "(" ")" */

                    // default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 4, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.CallExpression(
                        yyvstack[yysp - 3],
                        [],
                        [],
                        this._$,
                    );
                    break;

                case 198:
                /*! Production::    member_expression : member_expression_head "." member_expression_tail */
                case 199:
                    /*! Production::    member_expression : member_expression "." member_expression_tail */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.MemberExpression(
                        yyvstack[yysp - 2],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 200:
                    /*! Production::    member_expression : member_expression "[" string_literal "]" */

                    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.MemberExpression(
                        yyvstack[yysp - 3],
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 203:
                    /*! Production::    function_expression : parameters "->" expression */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.FunctionExpression(
                        yyvstack[yysp - 2],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 204:
                    /*! Production::    function_expression : untyped_parameter "->" expression */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.FunctionExpression(
                        [yyvstack[yysp - 2]],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 205:
                    /*! Production::    function_expression : "->" expression */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.FunctionExpression(
                        [],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 207:
                    /*! Production::    record : "{" "}" */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Record([], this._$);
                    break;

                case 208:
                    /*! Production::    record : "{" properties "}" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Record(yyvstack[yysp - 1], this._$);
                    break;

                case 211:
                    /*! Production::    property : property_group "=" expression */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.Property(
                        yyvstack[yysp - 2],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 212:
                    /*! Production::    list : "[" "]" */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.List([], this._$);
                    break;

                case 213:
                    /*! Production::    list : "[" arguments "]" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.List(yyvstack[yysp - 1], this._$);
                    break;

                case 214:
                    /*! Production::    string_literal : STRING_LITERAL */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.StringLiteral(
                        yyvstack[yysp].slice(
                            1,
                            yyvstack[yysp].length - 1,
                            this._$,
                        ),
                    );
                    break;

                case 215:
                    /*! Production::    number_literal : NUMBER_LITERAL */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.NumberLiteral(yyvstack[yysp], this._$);
                    break;

                case 216:
                    /*! Production::    boolean_literal : TRUE */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.BooleanLiteral(true, this._$);
                    break;

                case 217:
                    /*! Production::    boolean_literal : FALSE */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.BooleanLiteral(false, this._$);
                    break;

                case 218:
                    /*! Production::    context_property : "@" unqualified_identifier */

                    // default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 1, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ContextProperty(
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 219:
                    /*! Production::    context_property : "@" "[" string_literal "]" */

                    // default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 3, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ContextProperty(
                        yyvstack[yysp - 1],
                        this._$,
                    );
                    break;

                case 220:
                    /*! Production::    context_variable : "@" */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.ContextVariable(this._$);
                    break;

                case 223:
                /*! Production::    qualified_constructor : IDENTIFIER "." CONSTRUCTOR */
                case 224:
                    /*! Production::    qualified_constructor : CONSTRUCTOR "." CONSTRUCTOR */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.QualifiedConstructor(
                        yyvstack[yysp - 2],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 225:
                    /*! Production::    unqualified_constructor : CONSTRUCTOR */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.UnqualifiedConstructor(
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 228:
                /*! Production::    qualified_identifier : IDENTIFIER "." IDENTIFIER */
                case 229:
                    /*! Production::    qualified_identifier : CONSTRUCTOR "." IDENTIFIER */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.QualifiedIdentifier(
                        yyvstack[yysp - 2],
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 230:
                    /*! Production::    unqualified_identifier : IDENTIFIER */

                    // default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA):
                    this._$ = yylstack[yysp];
                    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,VU,-,LT,LA,LU,LUbA)

                    this.$ = new yy.ast.UnqualifiedIdentifier(
                        yyvstack[yysp],
                        this._$,
                    );
                    break;

                case 238:
                /*! Production::    type_statement_option : %epsilon */
                case 240:
                /*! Production::    member_declaration_option : %epsilon */
                case 242:
                /*! Production::    view_statement_option : %epsilon */
                case 249:
                /*! Production::    node_option : %epsilon */
                case 251:
                /*! Production::    node_option2 : %epsilon */
                case 253:
                /*! Production::    widget_option : %epsilon */
                case 255:
                /*! Production::    widget_option2 : %epsilon */
                case 257:
                    /*! Production::    widget_constructor_option : %epsilon */

                    // default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yyparser.yyMergeLocationInfo(
                        null,
                        null,
                        null,
                        null,
                        true,
                    );
                    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = undefined;
                    break;

                case 280:
                    /*! Production::    member_expression_head_group : "(" expression ")" */

                    // default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-):
                    this._$ = yyparser.yyMergeLocationInfo(yysp - 2, yysp);
                    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,VU,-,LT,LA,-,-)

                    this.$ = [
                        yyvstack[yysp - 2],
                        yyvstack[yysp - 1],
                        yyvstack[yysp],
                    ];
                    break;
            }
        },
        table: bt({
            len: u([
                16,
                1,
                14,
                12,
                s,
                [0, 3],
                6,
                s,
                [0, 8],
                9,
                c,
                [14, 4],
                0,
                5,
                12,
                s,
                [2, 5],
                6,
                c,
                [23, 3],
                6,
                4,
                5,
                s,
                [0, 3],
                1,
                c,
                [4, 4],
                1,
                9,
                s,
                [0, 5],
                4,
                4,
                1,
                5,
                4,
                5,
                26,
                c,
                [38, 3],
                c,
                [5, 4],
                0,
                17,
                c,
                [41, 5],
                2,
                0,
                3,
                c,
                [37, 3],
                4,
                0,
                9,
                1,
                16,
                7,
                2,
                9,
                5,
                2,
                2,
                c,
                [28, 4],
                1,
                24,
                s,
                [0, 7],
                41,
                s,
                [0, 4],
                10,
                c,
                [69, 4],
                2,
                2,
                17,
                26,
                c,
                [24, 3],
                2,
                0,
                14,
                0,
                15,
                0,
                s,
                [15, 3],
                16,
                17,
                16,
                17,
                8,
                18,
                18,
                c,
                [27, 4],
                c,
                [101, 5],
                0,
                8,
                17,
                c,
                [75, 3],
                2,
                c,
                [93, 3],
                4,
                c,
                [141, 3],
                1,
                1,
                2,
                0,
                6,
                7,
                9,
                2,
                4,
                c,
                [93, 3],
                2,
                24,
                23,
                0,
                2,
                c,
                [133, 3],
                24,
                5,
                c,
                [103, 3],
                0,
                0,
                29,
                0,
                44,
                s,
                [41, 3],
                c,
                [16, 3],
                41,
                c,
                [11, 3],
                31,
                0,
                31,
                31,
                32,
                28,
                30,
                1,
                c,
                [9, 3],
                s,
                [28, 3],
                c,
                [69, 3],
                43,
                c,
                [176, 5],
                41,
                6,
                c,
                [42, 4],
                c,
                [91, 5],
                c,
                [54, 3],
                s,
                [16, 3],
                s,
                [1, 4],
                s,
                [0, 4, 1],
                1,
                17,
                2,
                15,
                5,
                c,
                [78, 3],
                c,
                [144, 3],
                c,
                [39, 3],
                0,
                c,
                [188, 3],
                c,
                [12, 3],
                3,
                16,
                0,
                8,
                0,
                1,
                4,
                0,
                2,
                41,
                c,
                [118, 3],
                1,
                2,
                7,
                0,
                0,
                24,
                23,
                23,
                1,
                c,
                [23, 3],
                5,
                c,
                [5, 3],
                0,
                41,
                30,
                16,
                s,
                [0, 17],
                1,
                24,
                c,
                [60, 3],
                c,
                [133, 3],
                43,
                1,
                43,
                8,
                19,
                1,
                c,
                [6, 3],
                c,
                [4, 3],
                41,
                15,
                8,
                c,
                [77, 3],
                c,
                [65, 3],
                c,
                [93, 6],
                3,
                4,
                0,
                5,
                0,
                17,
                c,
                [66, 3],
                s,
                [0, 6],
                16,
                1,
                13,
                0,
                13,
                c,
                [115, 5],
                6,
                0,
                16,
                0,
                c,
                [82, 5],
                c,
                [5, 4],
                1,
                7,
                c,
                [3, 4],
                6,
                23,
                1,
                3,
                c,
                [263, 8],
                c,
                [307, 3],
                33,
                c,
                [310, 3],
                2,
                0,
                43,
                c,
                [166, 4],
                c,
                [22, 4],
                c,
                [9, 3],
                c,
                [3, 6],
                c,
                [33, 3],
                1,
                0,
                6,
                41,
                0,
                41,
                24,
                41,
                41,
                4,
                c,
                [258, 3],
                c,
                [67, 4],
                15,
                1,
                0,
                15,
                c,
                [60, 4],
                s,
                [0, 4],
                6,
                c,
                [74, 3],
                c,
                [398, 5],
                1,
                30,
                16,
                c,
                [145, 3],
                c,
                [231, 7],
                c,
                [3, 7],
                c,
                [461, 4],
                0,
                24,
                c,
                [129, 4],
                c,
                [3, 4],
                2,
                c,
                [137, 5],
                1,
                c,
                [397, 3],
                c,
                [197, 3],
                2,
                c,
                [423, 6],
                c,
                [350, 3],
                24,
                24,
                41,
                3,
                15,
                c,
                [31, 4],
                c,
                [120, 4],
                2,
                c,
                [261, 3],
                1,
                1,
                14,
                c,
                [54, 3],
                41,
                4,
                4,
                24,
                0,
                c,
                [13, 4],
                1,
                1,
                23,
                3,
                24,
                0,
                24,
                0,
                24,
                3,
                1,
                c,
                [291, 5],
                4,
                0,
                3,
                c,
                [112, 3],
                c,
                [85, 4],
                0,
            ]),
            symbol: u([
                1,
                15,
                24,
                67,
                68,
                69,
                76,
                77,
                78,
                80,
                83,
                87,
                91,
                111,
                112,
                113,
                1,
                c,
                [17, 3],
                c,
                [15, 12],
                15,
                24,
                c,
                [12, 9],
                25,
                29,
                30,
                32,
                33,
                34,
                56,
                57,
                114,
                s,
                [156, 6, 1],
                c,
                [27, 12],
                c,
                [26, 5],
                3,
                4,
                56,
                57,
                s,
                [70, 4, 1],
                75,
                158,
                161,
                165,
                57,
                158,
                57,
                158,
                56,
                161,
                c,
                [4, 4],
                16,
                38,
                56,
                115,
                116,
                c,
                [6, 7],
                11,
                c,
                [7, 3],
                138,
                174,
                10,
                c,
                [6, 3],
                10,
                c,
                [11, 4],
                26,
                28,
                28,
                56,
                57,
                71,
                74,
                c,
                [48, 3],
                163,
                165,
                7,
                11,
                92,
                166,
                11,
                27,
                31,
                92,
                9,
                4,
                c,
                [6, 4],
                4,
                11,
                92,
                105,
                c,
                [33, 3],
                116,
                161,
                15,
                24,
                37,
                39,
                49,
                56,
                57,
                s,
                [109, 5, 1],
                118,
                s,
                [121, 5, 1],
                128,
                130,
                c,
                [124, 3],
                169,
                171,
                176,
                7,
                9,
                c,
                [33, 3],
                c,
                [36, 29],
                173,
                176,
                4,
                11,
                13,
                36,
                56,
                57,
                s,
                [95, 7, 1],
                103,
                139,
                157,
                158,
                56,
                57,
                56,
                57,
                52,
                151,
                56,
                57,
                c,
                [163, 4],
                c,
                [6, 6],
                5,
                6,
                5,
                6,
                28,
                7,
                57,
                93,
                94,
                158,
                9,
                52,
                56,
                81,
                82,
                85,
                86,
                151,
                161,
                31,
                c,
                [55, 14],
                c,
                [54, 4],
                88,
                89,
                98,
                157,
                158,
                4,
                31,
                c,
                [35, 9],
                15,
                24,
                83,
                90,
                168,
                4,
                105,
                7,
                27,
                5,
                56,
                106,
                107,
                c,
                [129, 25],
                170,
                176,
                37,
                c,
                [27, 7],
                c,
                [26, 16],
                c,
                [154, 4],
                15,
                17,
                18,
                36,
                47,
                s,
                [51, 7, 1],
                105,
                108,
                s,
                [132, 6, 1],
                s,
                [140, 4, 1],
                145,
                146,
                147,
                s,
                [150, 6, 1],
                158,
                161,
                177,
                178,
                180,
                10,
                15,
                16,
                24,
                27,
                c,
                [68, 5],
                10,
                41,
                47,
                56,
                161,
                11,
                13,
                39,
                c,
                [50, 4],
                117,
                118,
                c,
                [37, 6],
                175,
                180,
                c,
                [124, 24],
                172,
                c,
                [124, 26],
                6,
                12,
                s,
                [5, 4, 1],
                12,
                14,
                27,
                36,
                40,
                42,
                44,
                45,
                46,
                50,
                c,
                [14, 4],
                11,
                c,
                [15, 55],
                c,
                [299, 16],
                4,
                5,
                c,
                [17, 5],
                c,
                [16, 7],
                104,
                157,
                158,
                c,
                [48, 15],
                92,
                c,
                [16, 7],
                26,
                c,
                [17, 9],
                14,
                52,
                56,
                84,
                c,
                [339, 4],
                4,
                11,
                12,
                c,
                [75, 11],
                102,
                c,
                [76, 3],
                c,
                [43, 4],
                10,
                c,
                [44, 3],
                16,
                c,
                [45, 9],
                10,
                27,
                c,
                [560, 3],
                c,
                [438, 3],
                164,
                165,
                c,
                [120, 6],
                79,
                c,
                [121, 10],
                6,
                12,
                6,
                9,
                12,
                6,
                c,
                [32, 3],
                c,
                [425, 3],
                9,
                10,
                19,
                167,
                c,
                [427, 9],
                7,
                5,
                5,
                26,
                5,
                6,
                11,
                26,
                27,
                92,
                c,
                [455, 7],
                c,
                [26, 9],
                6,
                27,
                15,
                c,
                [283, 3],
                c,
                [459, 3],
                32,
                7,
                27,
                15,
                24,
                c,
                [326, 21],
                176,
                c,
                [24, 6],
                c,
                [23, 17],
                5,
                6,
                9,
                c,
                [351, 25],
                56,
                57,
                c,
                [7, 3],
                8,
                40,
                119,
                120,
                c,
                [358, 6],
                15,
                16,
                s,
                [20, 4, 1],
                27,
                28,
                40,
                44,
                46,
                50,
                s,
                [58, 9, 1],
                162,
                182,
                c,
                [297, 4],
                c,
                [514, 13],
                106,
                107,
                c,
                [516, 25],
                c,
                [557, 41],
                c,
                [41, 82],
                36,
                36,
                c,
                [84, 42],
                c,
                [432, 5],
                c,
                [241, 23],
                c,
                [29, 6],
                c,
                [461, 3],
                c,
                [30, 21],
                138,
                c,
                [31, 79],
                36,
                c,
                [32, 14],
                c,
                [153, 29],
                c,
                [223, 3],
                18,
                c,
                [219, 6],
                c,
                [213, 6],
                c,
                [894, 14],
                c,
                [121, 20],
                56,
                c,
                [61, 9],
                161,
                c,
                [90, 28],
                c,
                [28, 56],
                c,
                [785, 3],
                148,
                149,
                151,
                161,
                181,
                c,
                [785, 4],
                c,
                [378, 14],
                s,
                [131, 7, 1],
                c,
                [379, 18],
                56,
                56,
                c,
                [422, 41],
                56,
                107,
                108,
                126,
                127,
                161,
                7,
                c,
                [1337, 3],
                c,
                [705, 27],
                c,
                [1505, 3],
                c,
                [985, 17],
                c,
                [16, 31],
                s,
                [12, 4],
                36,
                c,
                [1357, 4],
                36,
                5,
                c,
                [1028, 17],
                11,
                c,
                [25, 3],
                c,
                [1030, 13],
                12,
                c,
                [1392, 4],
                6,
                14,
                6,
                12,
                57,
                57,
                c,
                [1406, 3],
                8,
                27,
                57,
                94,
                c,
                [80, 17],
                c,
                [934, 3],
                c,
                [933, 5],
                c,
                [8, 3],
                c,
                [938, 4],
                c,
                [224, 41],
                27,
                52,
                151,
                5,
                c,
                [985, 3],
                c,
                [1440, 3],
                c,
                [988, 5],
                c,
                [982, 45],
                c,
                [23, 23],
                27,
                56,
                107,
                c,
                [1182, 3],
                c,
                [1555, 16],
                c,
                [27, 3],
                16,
                8,
                40,
                120,
                c,
                [883, 45],
                c,
                [617, 26],
                c,
                [96, 16],
                c,
                [325, 3],
                7,
                9,
                10,
                11,
                c,
                [545, 6],
                28,
                36,
                c,
                [716, 10],
                c,
                [1394, 4],
                c,
                [1037, 80],
                c,
                [1163, 16],
                c,
                [617, 26],
                4,
                c,
                [44, 43],
                52,
                56,
                57,
                144,
                151,
                158,
                161,
                179,
                c,
                [219, 4],
                c,
                [12, 3],
                c,
                [1926, 9],
                151,
                c,
                [573, 3],
                c,
                [115, 87],
                c,
                [44, 44],
                16,
                c,
                [1241, 44],
                c,
                [1672, 6],
                27,
                c,
                [936, 4],
                138,
                c,
                [216, 8],
                52,
                151,
                6,
                14,
                7,
                6,
                12,
                27,
                6,
                42,
                45,
                6,
                7,
                c,
                [4, 4],
                9,
                42,
                45,
                c,
                [1951, 17],
                c,
                [844, 5],
                c,
                [107, 4],
                c,
                [478, 13],
                c,
                [1365, 4],
                c,
                [801, 8],
                c,
                [843, 5],
                c,
                [13, 10],
                5,
                12,
                52,
                56,
                c,
                [1807, 6],
                c,
                [896, 46],
                c,
                [755, 8],
                c,
                [763, 10],
                83,
                c,
                [769, 9],
                c,
                [722, 18],
                35,
                41,
                47,
                c,
                [256, 45],
                c,
                [1406, 28],
                c,
                [1740, 3],
                c,
                [74, 40],
                5,
                6,
                c,
                [417, 43],
                5,
                6,
                12,
                c,
                [46, 45],
                c,
                [45, 90],
                c,
                [404, 4],
                c,
                [1426, 6],
                c,
                [891, 80],
                c,
                [1185, 24],
                c,
                [106, 82],
                c,
                [1528, 3],
                c,
                [596, 4],
                c,
                [45, 38],
                c,
                [689, 17],
                c,
                [16, 6],
                c,
                [15, 9],
                11,
                c,
                [16, 15],
                6,
                11,
                36,
                c,
                [624, 8],
                c,
                [637, 11],
                c,
                [613, 3],
                27,
                5,
                c,
                [1271, 46],
                c,
                [961, 44],
                44,
                c,
                [1646, 4],
                c,
                [4, 4],
                4,
                c,
                [3149, 3],
                138,
                c,
                [746, 17],
                129,
                c,
                [747, 7],
                27,
                46,
                5,
                5,
                36,
                4,
                c,
                [146, 6],
                27,
                c,
                [971, 8],
                c,
                [970, 6],
                c,
                [1314, 84],
                c,
                [143, 3],
                c,
                [86, 40],
                41,
                44,
                47,
                48,
                c,
                [1698, 30],
                c,
                [537, 59],
                c,
                [2803, 3],
                c,
                [421, 15],
                5,
                c,
                [1816, 3],
                27,
                47,
                c,
                [1787, 47],
                c,
                [315, 3],
                c,
                [307, 13],
                c,
                [152, 65],
                41,
                43,
                44,
                47,
                c,
                [4, 4],
                c,
                [1947, 47],
                s,
                [27, 5],
                c,
                [28, 23],
                41,
                c,
                [327, 50],
                c,
                [24, 24],
                41,
                43,
                47,
                c,
                [102, 18],
                c,
                [586, 7],
                c,
                [314, 47],
                c,
                [478, 4],
                c,
                [79, 3],
                c,
                [82, 4],
                27,
                27,
            ]),
            type: u([
                s,
                [2, 3],
                s,
                [0, 13],
                1,
                c,
                [17, 14],
                c,
                [14, 12],
                s,
                [2, 8],
                c,
                [27, 27],
                c,
                [18, 9],
                2,
                0,
                2,
                c,
                [4, 8],
                c,
                [21, 5],
                c,
                [6, 9],
                c,
                [7, 3],
                s,
                [2, 14],
                c,
                [66, 9],
                c,
                [37, 6],
                c,
                [20, 6],
                c,
                [14, 8],
                c,
                [44, 8],
                s,
                [0, 19],
                c,
                [64, 10],
                c,
                [36, 32],
                c,
                [17, 16],
                c,
                [94, 5],
                c,
                [114, 6],
                c,
                [61, 12],
                c,
                [42, 9],
                c,
                [80, 17],
                c,
                [12, 7],
                c,
                [22, 11],
                c,
                [49, 6],
                c,
                [208, 7],
                c,
                [165, 37],
                c,
                [25, 23],
                c,
                [59, 26],
                c,
                [41, 21],
                c,
                [156, 20],
                c,
                [124, 64],
                s,
                [2, 67],
                c,
                [143, 27],
                c,
                [42, 16],
                c,
                [59, 17],
                c,
                [46, 8],
                c,
                [174, 18],
                c,
                [108, 28],
                c,
                [45, 26],
                c,
                [458, 7],
                c,
                [462, 16],
                c,
                [503, 9],
                c,
                [26, 13],
                c,
                [459, 6],
                c,
                [391, 27],
                c,
                [323, 34],
                c,
                [28, 19],
                c,
                [719, 10],
                c,
                [305, 26],
                c,
                [323, 26],
                c,
                [516, 32],
                c,
                [557, 41],
                c,
                [41, 83],
                c,
                [43, 45],
                c,
                [576, 43],
                c,
                [31, 92],
                c,
                [32, 33],
                c,
                [219, 27],
                c,
                [90, 71],
                c,
                [848, 53],
                c,
                [546, 43],
                c,
                [422, 44],
                c,
                [49, 17],
                c,
                [705, 24],
                c,
                [968, 20],
                c,
                [16, 32],
                c,
                [1045, 29],
                c,
                [29, 15],
                c,
                [784, 20],
                c,
                [1657, 18],
                c,
                [813, 21],
                c,
                [646, 29],
                c,
                [1448, 11],
                c,
                [982, 53],
                c,
                [272, 21],
                c,
                [1555, 21],
                c,
                [514, 19],
                c,
                [420, 37],
                c,
                [1706, 35],
                c,
                [626, 41],
                c,
                [996, 83],
                c,
                [617, 70],
                c,
                [1497, 27],
                c,
                [71, 48],
                c,
                [44, 101],
                c,
                [1923, 44],
                c,
                [2275, 8],
                c,
                [1808, 36],
                c,
                [1813, 26],
                c,
                [2197, 14],
                c,
                [13, 11],
                c,
                [880, 42],
                c,
                [816, 23],
                c,
                [2270, 15],
                c,
                [1239, 37],
                c,
                [1497, 56],
                c,
                [1614, 61],
                c,
                [461, 45],
                c,
                [46, 47],
                c,
                [45, 78],
                c,
                [1887, 92],
                c,
                [1993, 101],
                c,
                [86, 51],
                c,
                [168, 25],
                c,
                [32, 16],
                c,
                [290, 11],
                c,
                [637, 17],
                c,
                [1271, 62],
                c,
                [453, 40],
                c,
                [330, 34],
                c,
                [2893, 26],
                c,
                [1314, 120],
                c,
                [36, 28],
                c,
                [537, 74],
                c,
                [59, 21],
                c,
                [2792, 51],
                c,
                [359, 39],
                c,
                [1357, 47],
                c,
                [2929, 70],
                c,
                [327, 55],
                c,
                [403, 69],
                c,
                [314, 37],
            ]),
            state: u([
                1,
                2,
                5,
                3,
                6,
                s,
                [8, 8, 1],
                19,
                17,
                c,
                [11, 9],
                21,
                c,
                [9, 8],
                30,
                33,
                36,
                37,
                29,
                31,
                32,
                c,
                [16, 9],
                39,
                41,
                40,
                42,
                44,
                48,
                47,
                46,
                s,
                [51, 6, 1],
                59,
                60,
                61,
                59,
                60,
                65,
                64,
                75,
                72,
                74,
                48,
                47,
                73,
                46,
                77,
                76,
                81,
                84,
                87,
                88,
                92,
                60,
                94,
                95,
                97,
                14,
                15,
                98,
                99,
                105,
                109,
                110,
                111,
                106,
                100,
                101,
                31,
                32,
                96,
                93,
                103,
                92,
                60,
                118,
                c,
                [21, 16],
                117,
                103,
                120,
                123,
                121,
                s,
                [124, 4, 1],
                122,
                119,
                131,
                130,
                140,
                142,
                c,
                [84, 3],
                143,
                c,
                [4, 3],
                s,
                [147, 6, 1],
                154,
                156,
                155,
                158,
                c,
                [29, 7],
                131,
                130,
                159,
                161,
                160,
                131,
                162,
                165,
                c,
                [21, 5],
                168,
                167,
                166,
                170,
                174,
                175,
                176,
                178,
                c,
                [76, 16],
                177,
                103,
                180,
                c,
                [18, 15],
                103,
                192,
                193,
                s,
                [181, 5, 1],
                197,
                195,
                196,
                198,
                205,
                186,
                199,
                s,
                [209, 5, 1],
                200,
                203,
                201,
                202,
                191,
                208,
                206,
                223,
                224,
                s,
                [226, 5, 1],
                212,
                213,
                225,
                206,
                232,
                c,
                [73, 16],
                231,
                c,
                [73, 18],
                242,
                c,
                [137, 9],
                248,
                245,
                c,
                [9, 4],
                246,
                244,
                131,
                130,
                249,
                251,
                252,
                254,
                c,
                [143, 3],
                257,
                c,
                [27, 6],
                256,
                c,
                [28, 3],
                263,
                262,
                48,
                47,
                261,
                46,
                264,
                265,
                c,
                [45, 9],
                271,
                131,
                162,
                272,
                275,
                c,
                [181, 5],
                279,
                280,
                c,
                [193, 4],
                281,
                c,
                [12, 5],
                283,
                14,
                15,
                284,
                287,
                c,
                [117, 16],
                103,
                288,
                c,
                [17, 16],
                c,
                [133, 17],
                293,
                31,
                32,
                295,
                296,
                298,
                300,
                192,
                174,
                175,
                193,
                317,
                c,
                [215, 19],
                318,
                c,
                [215, 3],
                192,
                193,
                319,
                c,
                [241, 23],
                192,
                193,
                320,
                c,
                [26, 25],
                321,
                c,
                [26, 25],
                324,
                c,
                [26, 23],
                326,
                s,
                [330, 4, 2],
                c,
                [24, 5],
                c,
                [23, 9],
                338,
                c,
                [23, 3],
                340,
                343,
                344,
                347,
                346,
                345,
                192,
                193,
                349,
                350,
                c,
                [82, 25],
                351,
                c,
                [26, 23],
                356,
                353,
                352,
                354,
                355,
                c,
                [243, 17],
                359,
                36,
                37,
                360,
                c,
                [334, 9],
                361,
                c,
                [10, 9],
                362,
                c,
                [399, 15],
                373,
                c,
                [399, 3],
                c,
                [565, 3],
                382,
                149,
                383,
                c,
                [25, 9],
                384,
                385,
                c,
                [362, 3],
                388,
                387,
                192,
                193,
                390,
                c,
                [113, 23],
                392,
                168,
                396,
                395,
                14,
                15,
                397,
                c,
                [392, 17],
                398,
                c,
                [392, 33],
                401,
                176,
                402,
                c,
                [103, 9],
                403,
                31,
                32,
                406,
                192,
                193,
                407,
                c,
                [100, 23],
                408,
                c,
                [291, 18],
                410,
                c,
                [59, 9],
                334,
                192,
                193,
                413,
                c,
                [295, 25],
                414,
                c,
                [26, 25],
                415,
                c,
                [348, 26],
                418,
                c,
                [27, 24],
                420,
                s,
                [424, 4, -1],
                c,
                [874, 9],
                425,
                131,
                130,
                192,
                193,
                427,
                c,
                [71, 26],
                430,
                c,
                [27, 26],
                433,
                c,
                [27, 26],
                436,
                c,
                [26, 23],
                334,
                437,
                c,
                [125, 4],
                438,
                449,
                c,
                [880, 9],
                450,
                36,
                37,
                452,
                c,
                [261, 9],
                456,
                454,
                c,
                [9, 4],
                c,
                [8, 3],
                457,
                c,
                [8, 6],
                461,
                c,
                [438, 3],
                462,
                c,
                [30, 9],
                463,
                c,
                [10, 9],
                464,
                c,
                [10, 9],
                168,
                467,
                466,
                14,
                15,
                168,
                470,
                469,
                c,
                [837, 3],
                471,
                14,
                15,
                c,
                [1011, 19],
                476,
                c,
                [137, 23],
                479,
                477,
                300,
                192,
                193,
                481,
                c,
                [192, 25],
                483,
                c,
                [219, 26],
                487,
                c,
                [27, 26],
                490,
                c,
                [27, 26],
                493,
                c,
                [27, 24],
                498,
                c,
                [804, 5],
                499,
                c,
                [57, 25],
                500,
                c,
                [26, 23],
                501,
                c,
                [684, 17],
                192,
                193,
                502,
                c,
                [70, 25],
                503,
                c,
                [26, 23],
                504,
                505,
                355,
                192,
                193,
                506,
                c,
                [29, 23],
                508,
                c,
                [857, 10],
                510,
                c,
                [9, 4],
                509,
                c,
                [9, 8],
                246,
                131,
                130,
                284,
                512,
                c,
                [376, 3],
                514,
                513,
                c,
                [376, 3],
                515,
                14,
                15,
                519,
                c,
                [730, 18],
                521,
                c,
                [60, 9],
                192,
                193,
                523,
                c,
                [252, 24],
                479,
                c,
                [433, 11],
                532,
                c,
                [197, 6],
                284,
                538,
                14,
                15,
                479,
                192,
                193,
                540,
                c,
                [202, 25],
                541,
                c,
                [356, 26],
                544,
                c,
                [26, 23],
                547,
                c,
                [299, 17],
                548,
                c,
                [317, 19],
                549,
                c,
                [62, 23],
                248,
                551,
                c,
                [201, 4],
                550,
                131,
                130,
                c,
                [606, 17],
                c,
                [17, 17],
                479,
                561,
                c,
                [88, 19],
                562,
                c,
                [88, 23],
                567,
                c,
                [44, 17],
                c,
                [97, 34],
                576,
                c,
                [52, 17],
                577,
                c,
                [18, 17],
                578,
                c,
                [88, 28],
                582,
                c,
                [106, 40],
            ]),
            mode: u([
                s,
                [1, 41],
                s,
                [2, 3],
                c,
                [4, 8],
                2,
                c,
                [17, 6],
                c,
                [34, 17],
                c,
                [41, 10],
                c,
                [32, 21],
                c,
                [30, 7],
                c,
                [22, 21],
                c,
                [9, 16],
                c,
                [38, 22],
                s,
                [2, 8],
                c,
                [60, 21],
                c,
                [127, 10],
                c,
                [35, 5],
                s,
                [2, 10],
                c,
                [183, 9],
                c,
                [26, 17],
                c,
                [15, 30],
                c,
                [124, 17],
                c,
                [58, 27],
                c,
                [41, 28],
                c,
                [173, 14],
                c,
                [15, 5],
                c,
                [180, 10],
                c,
                [45, 5],
                c,
                [263, 17],
                c,
                [286, 24],
                c,
                [204, 6],
                c,
                [59, 9],
                c,
                [333, 22],
                s,
                [1, 68],
                s,
                [2, 28],
                c,
                [121, 7],
                c,
                [30, 28],
                c,
                [299, 16],
                c,
                [30, 69],
                s,
                [2, 29],
                c,
                [189, 17],
                c,
                [487, 30],
                s,
                [2, 79],
                c,
                [835, 42],
                c,
                [485, 25],
                c,
                [392, 26],
                c,
                [659, 19],
                c,
                [505, 90],
                c,
                [945, 20],
                c,
                [317, 19],
                s,
                [1, 142],
                c,
                [294, 13],
                c,
                [827, 15],
                c,
                [28, 7],
                c,
                [283, 88],
                c,
                [92, 10],
                c,
                [913, 94],
                c,
                [345, 120],
                c,
                [57, 56],
                c,
                [422, 31],
                c,
                [513, 82],
                c,
                [544, 40],
                s,
                [1, 109],
            ]),
            goto: u([
                4,
                16,
                7,
                18,
                16,
                7,
                20,
                16,
                s,
                [22, 7, 1],
                34,
                35,
                38,
                16,
                22,
                c,
                [10, 5],
                43,
                45,
                49,
                s,
                [50, 3],
                49,
                50,
                49,
                57,
                58,
                49,
                62,
                63,
                49,
                66,
                s,
                [257, 3],
                67,
                s,
                [230, 3],
                68,
                s,
                [225, 4],
                69,
                70,
                71,
                49,
                50,
                238,
                78,
                78,
                79,
                80,
                82,
                83,
                78,
                86,
                85,
                89,
                78,
                90,
                91,
                49,
                16,
                112,
                251,
                102,
                104,
                107,
                108,
                114,
                113,
                s,
                [126, 3],
                115,
                116,
                c,
                [15, 3],
                255,
                c,
                [15, 4],
                129,
                133,
                132,
                128,
                135,
                134,
                s,
                [136, 4, 1],
                141,
                c,
                [75, 3],
                50,
                144,
                145,
                232,
                232,
                71,
                146,
                50,
                153,
                141,
                49,
                157,
                c,
                [26, 6],
                135,
                134,
                163,
                164,
                c,
                [14, 3],
                242,
                169,
                89,
                172,
                171,
                173,
                c,
                [53, 3],
                249,
                c,
                [53, 4],
                179,
                16,
                112,
                252,
                c,
                [8, 4],
                187,
                215,
                214,
                204,
                189,
                207,
                194,
                188,
                190,
                141,
                216,
                217,
                218,
                49,
                50,
                219,
                s,
                [230, 9],
                220,
                222,
                221,
                49,
                215,
                214,
                102,
                c,
                [23, 4],
                16,
                112,
                253,
                c,
                [43, 4],
                233,
                16,
                112,
                256,
                c,
                [8, 4],
                235,
                234,
                s,
                [67, 7],
                236,
                s,
                [67, 6],
                s,
                [69, 4],
                238,
                s,
                [69, 3],
                237,
                s,
                [69, 6],
                s,
                [73, 4],
                239,
                s,
                [73, 10],
                s,
                [74, 4],
                240,
                s,
                [74, 10],
                s,
                [75, 4],
                241,
                s,
                [75, 10],
                c,
                [162, 6],
                247,
                243,
                c,
                [7, 5],
                s,
                [76, 4],
                250,
                s,
                [76, 10],
                s,
                [78, 16],
                253,
                141,
                49,
                129,
                133,
                255,
                c,
                [41, 4],
                s,
                [225, 4],
                258,
                s,
                [225, 13],
                259,
                260,
                49,
                50,
                c,
                [76, 6],
                267,
                266,
                65,
                268,
                65,
                270,
                269,
                135,
                134,
                240,
                273,
                274,
                c,
                [246, 3],
                276,
                277,
                53,
                278,
                c,
                [75, 3],
                76,
                76,
                135,
                134,
                c,
                [14, 3],
                270,
                282,
                16,
                243,
                169,
                26,
                286,
                285,
                16,
                112,
                c,
                [201, 4],
                c,
                [6, 6],
                s,
                [289, 4, 1],
                16,
                112,
                250,
                c,
                [11, 4],
                107,
                108,
                297,
                294,
                158,
                158,
                310,
                s,
                [158, 3],
                303,
                301,
                307,
                308,
                309,
                313,
                158,
                299,
                s,
                [158, 4],
                302,
                304,
                305,
                306,
                311,
                312,
                314,
                315,
                316,
                187,
                173,
                c,
                [301, 14],
                c,
                [316, 15],
                c,
                [15, 30],
                322,
                323,
                c,
                [17, 15],
                325,
                s,
                [264, 4],
                279,
                s,
                [264, 23],
                327,
                s,
                [266, 4],
                328,
                329,
                s,
                [266, 23],
                331,
                s,
                [268, 4],
                275,
                66,
                s,
                [268, 23],
                333,
                s,
                [269, 4],
                273,
                66,
                s,
                [269, 23],
                335,
                s,
                [270, 4],
                272,
                66,
                s,
                [270, 10],
                106,
                s,
                [270, 13],
                s,
                [271, 4],
                274,
                s,
                [271, 23],
                337,
                c,
                [193, 3],
                207,
                c,
                [189, 6],
                339,
                s,
                [220, 5],
                341,
                s,
                [220, 14],
                49,
                s,
                [220, 9],
                s,
                [284, 4],
                277,
                s,
                [284, 23],
                s,
                [285, 4],
                276,
                s,
                [285, 23],
                s,
                [286, 4],
                278,
                s,
                [286, 23],
                342,
                141,
                49,
                187,
                215,
                348,
                c,
                [323, 13],
                136,
                138,
                c,
                [340, 15],
                49,
                357,
                s,
                [125, 3],
                358,
                16,
                112,
                254,
                c,
                [462, 4],
                135,
                134,
                c,
                [530, 6],
                c,
                [6, 12],
                s,
                [363, 9, 1],
                236,
                372,
                c,
                [629, 7],
                238,
                237,
                s,
                [77, 4],
                374,
                s,
                [77, 10],
                375,
                50,
                377,
                376,
                379,
                378,
                139,
                137,
                234,
                234,
                71,
                381,
                380,
                c,
                [597, 7],
                c,
                [571, 3],
                386,
                c,
                [574, 3],
                389,
                c,
                [111, 15],
                391,
                141,
                393,
                270,
                394,
                16,
                169,
                c,
                [590, 12],
                16,
                399,
                c,
                [6, 4],
                400,
                c,
                [682, 3],
                c,
                [56, 4],
                107,
                108,
                404,
                297,
                405,
                c,
                [53, 15],
                409,
                c,
                [326, 10],
                c,
                [37, 6],
                411,
                c,
                [403, 3],
                291,
                c,
                [402, 9],
                c,
                [399, 10],
                412,
                c,
                [608, 31],
                416,
                c,
                [16, 14],
                417,
                187,
                419,
                c,
                [17, 14],
                c,
                [1038, 3],
                c,
                [97, 4],
                141,
                135,
                134,
                426,
                187,
                428,
                c,
                [27, 14],
                429,
                187,
                431,
                c,
                [17, 14],
                432,
                187,
                434,
                c,
                [17, 14],
                435,
                c,
                [110, 15],
                c,
                [567, 4],
                c,
                [566, 10],
                c,
                [91, 3],
                141,
                440,
                439,
                441,
                443,
                442,
                444,
                447,
                445,
                446,
                146,
                448,
                146,
                146,
                106,
                106,
                291,
                106,
                106,
                c,
                [1071, 7],
                135,
                134,
                451,
                c,
                [217, 6],
                453,
                455,
                133,
                132,
                135,
                134,
                458,
                c,
                [5, 4],
                459,
                460,
                c,
                [957, 4],
                c,
                [398, 16],
                465,
                16,
                169,
                468,
                c,
                [319, 3],
                169,
                16,
                472,
                c,
                [309, 4],
                473,
                474,
                222,
                221,
                475,
                c,
                [119, 15],
                480,
                160,
                160,
                310,
                160,
                280,
                66,
                160,
                160,
                c,
                [913, 6],
                160,
                478,
                s,
                [160, 4],
                c,
                [913, 10],
                c,
                [45, 14],
                482,
                443,
                187,
                484,
                c,
                [18, 14],
                485,
                443,
                486,
                187,
                488,
                c,
                [19, 14],
                489,
                443,
                187,
                491,
                c,
                [18, 14],
                492,
                443,
                187,
                494,
                c,
                [18, 14],
                495,
                443,
                496,
                497,
                c,
                [622, 4],
                c,
                [383, 28],
                c,
                [495, 6],
                c,
                [36, 30],
                c,
                [67, 16],
                507,
                c,
                [253, 12],
                238,
                c,
                [7, 6],
                511,
                71,
                71,
                c,
                [259, 5],
                169,
                516,
                222,
                221,
                517,
                518,
                520,
                c,
                [541, 16],
                522,
                187,
                524,
                c,
                [68, 14],
                525,
                526,
                443,
                527,
                443,
                528,
                443,
                529,
                443,
                480,
                280,
                66,
                530,
                16,
                531,
                c,
                [133, 4],
                s,
                [533, 4, 1],
                370,
                236,
                537,
                16,
                169,
                539,
                480,
                s,
                [163, 3],
                280,
                66,
                s,
                [163, 7],
                c,
                [156, 16],
                542,
                c,
                [16, 14],
                543,
                443,
                c,
                [33, 15],
                222,
                546,
                221,
                545,
                c,
                [715, 12],
                c,
                [31, 15],
                100,
                100,
                71,
                c,
                [147, 6],
                552,
                553,
                443,
                554,
                555,
                556,
                16,
                557,
                c,
                [42, 5],
                558,
                c,
                [6, 4],
                559,
                560,
                236,
                480,
                s,
                [167, 3],
                280,
                66,
                s,
                [167, 7],
                c,
                [64, 21],
                222,
                563,
                564,
                221,
                222,
                565,
                566,
                221,
                c,
                [99, 7],
                568,
                c,
                [6, 4],
                s,
                [569, 5, 1],
                16,
                574,
                c,
                [11, 4],
                222,
                221,
                575,
                c,
                [840, 13],
                c,
                [6, 5],
                222,
                579,
                221,
                580,
                16,
                581,
                c,
                [16, 5],
                583,
                c,
                [6, 5],
                584,
                c,
                [6, 4],
                585,
                c,
                [170, 3],
                586,
                222,
                587,
                221,
                222,
                588,
                221,
                589,
                590,
                591,
            ]),
        }),
        defaultActions: bda({
            idx: u([
                4,
                5,
                6,
                s,
                [8, 8, 1],
                s,
                [18, 4, 1],
                31,
                32,
                36,
                37,
                38,
                40,
                41,
                42,
                s,
                [46, 5, 1],
                58,
                59,
                63,
                64,
                65,
                s,
                [73, 4, 2],
                91,
                92,
                s,
                [95, 7, 1],
                s,
                [103, 4, 1],
                109,
                110,
                111,
                116,
                120,
                122,
                124,
                s,
                [136, 4, 1],
                s,
                [141, 4, 1],
                148,
                151,
                152,
                155,
                156,
                161,
                168,
                173,
                175,
                180,
                182,
                183,
                184,
                186,
                191,
                195,
                197,
                199,
                206,
                208,
                212,
                213,
                216,
                217,
                218,
                s,
                [224, 7, 1],
                234,
                242,
                251,
                253,
                254,
                255,
                257,
                260,
                261,
                263,
                265,
                266,
                269,
                271,
                274,
                279,
                283,
                284,
                289,
                294,
                296,
                s,
                [300, 17, 1],
                320,
                321,
                324,
                s,
                [340, 4, 2],
                347,
                348,
                350,
                354,
                356,
                s,
                [360, 7, 1],
                370,
                372,
                375,
                s,
                [376, 4, 2],
                383,
                384,
                385,
                387,
                388,
                389,
                392,
                395,
                400,
                401,
                402,
                s,
                [404, 5, 1],
                410,
                413,
                414,
                416,
                s,
                [419, 6, 1],
                428,
                431,
                434,
                435,
                437,
                439,
                442,
                449,
                451,
                452,
                454,
                457,
                s,
                [460, 7, 1],
                s,
                [469, 4, 2],
                482,
                484,
                485,
                486,
                488,
                489,
                491,
                492,
                494,
                495,
                s,
                [497, 4, 1],
                504,
                505,
                507,
                508,
                512,
                s,
                [513, 5, 2],
                524,
                s,
                [526, 5, 1],
                532,
                538,
                539,
                542,
                543,
                544,
                553,
                554,
                560,
                570,
                572,
                580,
                582,
                585,
                589,
                590,
                591,
            ]),
            goto: u([
                4,
                5,
                17,
                s,
                [19, 6, 1],
                110,
                111,
                2,
                6,
                3,
                18,
                226,
                227,
                221,
                222,
                1,
                8,
                9,
                10,
                16,
                236,
                237,
                230,
                225,
                115,
                121,
                119,
                120,
                258,
                14,
                233,
                239,
                28,
                114,
                122,
                107,
                109,
                s,
                [244, 5, 1],
                133,
                152,
                261,
                262,
                134,
                135,
                136,
                118,
                174,
                68,
                72,
                228,
                223,
                229,
                224,
                214,
                12,
                11,
                13,
                63,
                31,
                32,
                40,
                41,
                54,
                56,
                101,
                103,
                108,
                155,
                156,
                157,
                159,
                170,
                263,
                265,
                267,
                206,
                201,
                287,
                288,
                215,
                216,
                217,
                124,
                127,
                259,
                260,
                284,
                285,
                286,
                173,
                92,
                79,
                81,
                37,
                88,
                90,
                7,
                15,
                235,
                26,
                62,
                29,
                35,
                241,
                77,
                52,
                57,
                102,
                128,
                130,
                231,
                s,
                [291, 16, 1],
                168,
                169,
                205,
                218,
                207,
                209,
                289,
                290,
                212,
                153,
                142,
                145,
                175,
                94,
                95,
                85,
                84,
                87,
                86,
                70,
                71,
                82,
                80,
                89,
                25,
                64,
                66,
                33,
                34,
                42,
                43,
                30,
                55,
                48,
                61,
                104,
                105,
                113,
                129,
                131,
                132,
                162,
                164,
                203,
                204,
                197,
                191,
                199,
                202,
                281,
                282,
                283,
                187,
                179,
                183,
                171,
                198,
                208,
                213,
                123,
                117,
                93,
                99,
                97,
                83,
                38,
                91,
                27,
                39,
                36,
                44,
                50,
                49,
                60,
                112,
                196,
                189,
                190,
                200,
                185,
                186,
                178,
                177,
                181,
                182,
                219,
                210,
                211,
                154,
                143,
                144,
                116,
                96,
                45,
                46,
                51,
                59,
                165,
                166,
                195,
                188,
                184,
                176,
                180,
                172,
                148,
                47,
                58,
                193,
                194,
                161,
                192,
                147,
                98,
                137,
                139,
                149,
                151,
                141,
                150,
                138,
                140,
            ]),
        }),
        parseError: function parseError(str, hash, ExceptionClass) {
            if (hash.recoverable) {
                if (typeof this.trace === "function") {
                    this.trace(str);
                }
                hash.destroy(); // destroy... well, *almost*!
            } else {
                if (typeof this.trace === "function") {
                    this.trace(str);
                }
                if (!ExceptionClass) {
                    ExceptionClass = this.JisonParserError;
                }
                throw new ExceptionClass(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this;
            var stack = new Array(128); // token stack: stores token which leads to state at the same index (column storage)
            var sstack = new Array(128); // state stack: stores states (column storage)

            var vstack = new Array(128); // semantic value stack
            var lstack = new Array(128); // location stack
            var table = this.table;
            var sp = 0; // 'stack pointer': index into the stacks
            var yyloc;

            var symbol = 0;

            var TERROR = this.TERROR;
            var EOF = this.EOF;
            var ERROR_RECOVERY_TOKEN_DISCARD_COUNT =
                this.options.errorRecoveryTokenDiscardCount | 0 || 3;
            var NO_ACTION = [
                0,
                592 /* === table.length :: ensures that anyone using this new state will fail dramatically! */,
            ];

            var lexer;
            if (this.__lexer__) {
                lexer = this.__lexer__;
            } else {
                lexer = this.__lexer__ = Object.create(this.lexer);
            }

            var sharedState_yy = {
                parseError: undefined,
                quoteName: undefined,
                lexer: undefined,
                parser: undefined,
                pre_parse: undefined,
                post_parse: undefined,
                pre_lex: undefined,
                post_lex: undefined, // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
            };

            var ASSERT;
            if (typeof assert !== "function") {
                ASSERT = function JisonAssert(cond, msg) {
                    if (!cond) {
                        throw new Error("assertion failed: " + (msg || "***"));
                    }
                };
            } else {
                ASSERT = assert;
            }

            this.yyGetSharedState = function yyGetSharedState() {
                return sharedState_yy;
            };

            // shallow clone objects, straight copy of simple `src` values
            // e.g. `lexer.yytext` MAY be a complex value object,
            // rather than a simple string/value.
            function shallow_copy(src) {
                if (typeof src === "object") {
                    var dst = {};
                    for (var k in src) {
                        if (Object.prototype.hasOwnProperty.call(src, k)) {
                            dst[k] = src[k];
                        }
                    }
                    return dst;
                }
                return src;
            }
            function shallow_copy_noclobber(dst, src) {
                for (var k in src) {
                    if (
                        typeof dst[k] === "undefined" &&
                        Object.prototype.hasOwnProperty.call(src, k)
                    ) {
                        dst[k] = src[k];
                    }
                }
            }
            function copy_yylloc(loc) {
                var rv = shallow_copy(loc);
                if (rv && rv.range) {
                    rv.range = rv.range.slice(0);
                }
                return rv;
            }

            // copy state
            shallow_copy_noclobber(sharedState_yy, this.yy);

            sharedState_yy.lexer = lexer;
            sharedState_yy.parser = this;

            // Does the shared state override the default `parseError` that already comes with this instance?
            if (typeof sharedState_yy.parseError === "function") {
                this.parseError = function parseErrorAlt(
                    str,
                    hash,
                    ExceptionClass,
                ) {
                    if (!ExceptionClass) {
                        ExceptionClass = this.JisonParserError;
                    }
                    return sharedState_yy.parseError.call(
                        this,
                        str,
                        hash,
                        ExceptionClass,
                    );
                };
            } else {
                this.parseError = this.originalParseError;
            }

            // Does the shared state override the default `quoteName` that already comes with this instance?
            if (typeof sharedState_yy.quoteName === "function") {
                this.quoteName = function quoteNameAlt(id_str) {
                    return sharedState_yy.quoteName.call(this, id_str);
                };
            } else {
                this.quoteName = this.originalQuoteName;
            }

            // set up the cleanup function; make it an API so that external code can re-use this one in case of
            // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
            // case this parse() API method doesn't come with a `finally { ... }` block any more!
            //
            // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
            //       or else your `sharedState`, etc. references will be *wrong*!
            this.cleanupAfterParse = function parser_cleanupAfterParse(
                resultValue,
                invoke_post_methods,
                do_not_nuke_errorinfos,
            ) {
                var rv;

                if (invoke_post_methods) {
                    var hash;

                    if (sharedState_yy.post_parse || this.post_parse) {
                        // create an error hash info instance: we re-use this API in a **non-error situation**
                        // as this one delivers all parser internals ready for access by userland code.
                        hash = this.constructParseErrorInfo(
                            null /* no error! */,
                            null /* no exception! */,
                            null,
                            false,
                        );
                    }

                    if (sharedState_yy.post_parse) {
                        rv = sharedState_yy.post_parse.call(
                            this,
                            sharedState_yy,
                            resultValue,
                            hash,
                        );
                        if (typeof rv !== "undefined") resultValue = rv;
                    }
                    if (this.post_parse) {
                        rv = this.post_parse.call(
                            this,
                            sharedState_yy,
                            resultValue,
                            hash,
                        );
                        if (typeof rv !== "undefined") resultValue = rv;
                    }

                    // cleanup:
                    if (hash && hash.destroy) {
                        hash.destroy();
                    }
                }

                if (this.__reentrant_call_depth > 1) return resultValue; // do not (yet) kill the sharedState when this is a reentrant run.

                // clean up the lingering lexer structures as well:
                if (lexer.cleanupAfterLex) {
                    lexer.cleanupAfterLex(do_not_nuke_errorinfos);
                }

                // prevent lingering circular references from causing memory leaks:
                if (sharedState_yy) {
                    sharedState_yy.lexer = undefined;
                    sharedState_yy.parser = undefined;
                    if (lexer.yy === sharedState_yy) {
                        lexer.yy = undefined;
                    }
                }
                sharedState_yy = undefined;
                this.parseError = this.originalParseError;
                this.quoteName = this.originalQuoteName;

                // nuke the vstack[] array at least as that one will still reference obsoleted user values.
                // To be safe, we nuke the other internal stack columns as well...
                stack.length = 0; // fastest way to nuke an array without overly bothering the GC
                sstack.length = 0;
                lstack.length = 0;
                vstack.length = 0;
                sp = 0;

                // nuke the error hash info instances created during this run.
                // Userland code must COPY any data/references
                // in the error hash instance(s) it is more permanently interested in.
                if (!do_not_nuke_errorinfos) {
                    for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                        var el = this.__error_infos[i];
                        if (el && typeof el.destroy === "function") {
                            el.destroy();
                        }
                    }
                    this.__error_infos.length = 0;
                }

                return resultValue;
            };

            // merge yylloc info into a new yylloc instance.
            //
            // `first_index` and `last_index` MAY be UNDEFINED/NULL or these are indexes into the `lstack[]` location stack array.
            //
            // `first_yylloc` and `last_yylloc` MAY be UNDEFINED/NULL or explicit (custom or regular) `yylloc` instances, in which
            // case these override the corresponding first/last indexes.
            //
            // `dont_look_back` is an optional flag (default: FALSE), which instructs this merge operation NOT to search
            // through the parse location stack for a location, which would otherwise be used to construct the new (epsilon!)
            // yylloc info.
            //
            // Note: epsilon rule's yylloc situation is detected by passing both `first_index` and `first_yylloc` as UNDEFINED/NULL.
            this.yyMergeLocationInfo = function parser_yyMergeLocationInfo(
                first_index,
                last_index,
                first_yylloc,
                last_yylloc,
                dont_look_back,
            ) {
                var i1 = first_index | 0,
                    i2 = last_index | 0;
                var l1 = first_yylloc,
                    l2 = last_yylloc;
                var rv;

                // rules:
                // - first/last yylloc entries override first/last indexes

                if (!l1) {
                    if (first_index != null) {
                        for (var i = i1; i <= i2; i++) {
                            l1 = lstack[i];
                            if (l1) {
                                break;
                            }
                        }
                    }
                }

                if (!l2) {
                    if (last_index != null) {
                        for (var i = i2; i >= i1; i--) {
                            l2 = lstack[i];
                            if (l2) {
                                break;
                            }
                        }
                    }
                }

                // - detect if an epsilon rule is being processed and act accordingly:
                if (!l1 && first_index == null) {
                    // epsilon rule span merger. With optional look-ahead in l2.
                    if (!dont_look_back) {
                        for (var i = (i1 || sp) - 1; i >= 0; i--) {
                            l1 = lstack[i];
                            if (l1) {
                                break;
                            }
                        }
                    }
                    if (!l1) {
                        if (!l2) {
                            // when we still don't have any valid yylloc info, we're looking at an epsilon rule
                            // without look-ahead and no preceding terms and/or `dont_look_back` set:
                            // in that case we ca do nothing but return NULL/UNDEFINED:
                            return undefined;
                        } else {
                            // shallow-copy L2: after all, we MAY be looking
                            // at unconventional yylloc info objects...
                            rv = shallow_copy(l2);
                            if (rv.range) {
                                // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                                rv.range = rv.range.slice(0);
                            }
                            return rv;
                        }
                    } else {
                        // shallow-copy L1, then adjust first col/row 1 column past the end.
                        rv = shallow_copy(l1);
                        rv.first_line = rv.last_line;
                        rv.first_column = rv.last_column;
                        if (rv.range) {
                            // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                            rv.range = rv.range.slice(0);
                            rv.range[0] = rv.range[1];
                        }

                        if (l2) {
                            // shallow-mixin L2, then adjust last col/row accordingly.
                            shallow_copy_noclobber(rv, l2);
                            rv.last_line = l2.last_line;
                            rv.last_column = l2.last_column;
                            if (rv.range && l2.range) {
                                rv.range[1] = l2.range[1];
                            }
                        }
                        return rv;
                    }
                }

                if (!l1) {
                    l1 = l2;
                    l2 = null;
                }
                if (!l1) {
                    return undefined;
                }

                // shallow-copy L1|L2, before we try to adjust the yylloc values: after all, we MAY be looking
                // at unconventional yylloc info objects...
                rv = shallow_copy(l1);

                // first_line: ...,
                // first_column: ...,
                // last_line: ...,
                // last_column: ...,
                if (rv.range) {
                    // shallow copy the yylloc ranges info to prevent us from modifying the original arguments' entries:
                    rv.range = rv.range.slice(0);
                }

                if (l2) {
                    shallow_copy_noclobber(rv, l2);
                    rv.last_line = l2.last_line;
                    rv.last_column = l2.last_column;
                    if (rv.range && l2.range) {
                        rv.range[1] = l2.range[1];
                    }
                }

                return rv;
            };

            // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
            //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
            this.constructParseErrorInfo =
                function parser_constructParseErrorInfo(
                    msg,
                    ex,
                    expected,
                    recoverable,
                ) {
                    var pei = {
                        errStr: msg,
                        exception: ex,
                        text: lexer.match,
                        value: lexer.yytext,
                        token: this.describeSymbol(symbol) || symbol,
                        token_id: symbol,
                        line: lexer.yylineno,
                        loc: copy_yylloc(lexer.yylloc),
                        expected: expected,
                        recoverable: recoverable,
                        state: state,
                        action: action,
                        new_state: newState,
                        symbol_stack: stack,
                        state_stack: sstack,
                        value_stack: vstack,
                        location_stack: lstack,
                        stack_pointer: sp,
                        yy: sharedState_yy,
                        lexer: lexer,
                        parser: this,

                        // and make sure the error info doesn't stay due to potential
                        // ref cycle via userland code manipulations.
                        // These would otherwise all be memory leak opportunities!
                        //
                        // Note that only array and object references are nuked as those
                        // constitute the set of elements which can produce a cyclic ref.
                        // The rest of the members is kept intact as they are harmless.
                        destroy: function destructParseErrorInfo() {
                            // remove cyclic references added to error info:
                            // info.yy = null;
                            // info.lexer = null;
                            // info.value = null;
                            // info.value_stack = null;
                            // ...
                            var rec = !!this.recoverable;
                            for (var key in this) {
                                if (
                                    this.hasOwnProperty(key) &&
                                    typeof key === "object"
                                ) {
                                    this[key] = undefined;
                                }
                            }
                            this.recoverable = rec;
                        },
                    };
                    // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
                    this.__error_infos.push(pei);
                    return pei;
                };

            function getNonTerminalFromCode(symbol) {
                var tokenName = self.getSymbolName(symbol);
                if (!tokenName) {
                    tokenName = symbol;
                }
                return tokenName;
            }

            function stdLex() {
                var token = lexer.lex();
                // if token isn't its numeric value, convert
                if (typeof token !== "number") {
                    token = self.symbols_[token] || token;
                }

                return token || EOF;
            }

            function fastLex() {
                var token = lexer.fastLex();
                // if token isn't its numeric value, convert
                if (typeof token !== "number") {
                    token = self.symbols_[token] || token;
                }

                return token || EOF;
            }

            var lex = stdLex;

            var state, action, r, t;
            var yyval = {
                $: true,
                _$: undefined,
                yy: sharedState_yy,
            };
            var p;
            var yyrulelen;
            var this_production;
            var newState;
            var retval = false;

            try {
                this.__reentrant_call_depth++;

                lexer.setInput(input, sharedState_yy);

                // NOTE: we *assume* no lexer pre/post handlers are set up *after*
                // this initial `setInput()` call: hence we can now check and decide
                // whether we'll go with the standard, slower, lex() API or the
                // `fast_lex()` one:
                if (typeof lexer.canIUse === "function") {
                    var lexerInfo = lexer.canIUse();
                    if (lexerInfo.fastLex && typeof fastLex === "function") {
                        lex = fastLex;
                    }
                }

                yyloc = lexer.yylloc;
                lstack[sp] = yyloc;
                vstack[sp] = null;
                sstack[sp] = 0;
                stack[sp] = 0;
                ++sp;

                if (this.pre_parse) {
                    this.pre_parse.call(this, sharedState_yy);
                }
                if (sharedState_yy.pre_parse) {
                    sharedState_yy.pre_parse.call(this, sharedState_yy);
                }

                newState = sstack[sp - 1];
                for (;;) {
                    // retrieve state number from top of stack
                    state = newState; // sstack[sp - 1];

                    // use default actions if available
                    if (this.defaultActions[state]) {
                        action = 2;
                        newState = this.defaultActions[state];
                    } else {
                        // The single `==` condition below covers both these `===` comparisons in a single
                        // operation:
                        //
                        //     if (symbol === null || typeof symbol === 'undefined') ...
                        if (!symbol) {
                            symbol = lex();
                        }
                        // read action for current state and first input
                        t = (table[state] && table[state][symbol]) || NO_ACTION;
                        newState = t[1];
                        action = t[0];

                        // handle parse error
                        if (!action) {
                            var errStr;
                            var errSymbolDescr =
                                this.describeSymbol(symbol) || symbol;
                            var expected =
                                this.collect_expected_token_set(state);

                            // Report error
                            if (typeof lexer.yylineno === "number") {
                                errStr =
                                    "Parse error on line " +
                                    (lexer.yylineno + 1) +
                                    ": ";
                            } else {
                                errStr = "Parse error: ";
                            }
                            if (typeof lexer.showPosition === "function") {
                                errStr +=
                                    "\n" +
                                    lexer.showPosition(79 - 10, 10) +
                                    "\n";
                            }
                            if (expected.length) {
                                errStr +=
                                    "Expecting " +
                                    expected.join(", ") +
                                    ", got unexpected " +
                                    errSymbolDescr;
                            } else {
                                errStr += "Unexpected " + errSymbolDescr;
                            }
                            // we cannot recover from the error!
                            p = this.constructParseErrorInfo(
                                errStr,
                                null,
                                expected,
                                false,
                            );
                            r = this.parseError(
                                p.errStr,
                                p,
                                this.JisonParserError,
                            );
                            if (typeof r !== "undefined") {
                                retval = r;
                            }
                            break;
                        }
                    }

                    switch (action) {
                        // catch misc. parse failures:
                        default:
                            // this shouldn't happen, unless resolve defaults are off
                            if (action instanceof Array) {
                                p = this.constructParseErrorInfo(
                                    "Parse Error: multiple actions possible at state: " +
                                        state +
                                        ", token: " +
                                        symbol,
                                    null,
                                    null,
                                    false,
                                );
                                r = this.parseError(
                                    p.errStr,
                                    p,
                                    this.JisonParserError,
                                );
                                if (typeof r !== "undefined") {
                                    retval = r;
                                }
                                break;
                            }
                            // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                            // or a buggy LUT (LookUp Table):
                            p = this.constructParseErrorInfo(
                                "Parsing halted. No viable error recovery approach available due to internal system failure.",
                                null,
                                null,
                                false,
                            );
                            r = this.parseError(
                                p.errStr,
                                p,
                                this.JisonParserError,
                            );
                            if (typeof r !== "undefined") {
                                retval = r;
                            }
                            break;

                        // shift:
                        case 1:
                            stack[sp] = symbol;
                            vstack[sp] = lexer.yytext;
                            lstack[sp] = copy_yylloc(lexer.yylloc);
                            sstack[sp] = newState; // push state

                            ++sp;
                            symbol = 0;

                            // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:

                            yyloc = lexer.yylloc;
                            continue;

                        // reduce:
                        case 2:
                            this_production = this.productions_[newState - 1]; // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                            yyrulelen = this_production[1];

                            r = this.performAction.call(
                                yyval,
                                yyloc,
                                newState,
                                sp - 1,
                                vstack,
                                lstack,
                            );

                            if (typeof r !== "undefined") {
                                retval = r;
                                break;
                            }

                            // pop off stack
                            sp -= yyrulelen;

                            // don't overwrite the `symbol` variable: use a local var to speed things up:
                            var ntsymbol = this_production[0]; // push nonterminal (reduce)
                            stack[sp] = ntsymbol;
                            vstack[sp] = yyval.$;
                            lstack[sp] = yyval._$;
                            // goto new state = table[STATE][NONTERMINAL]
                            newState = table[sstack[sp - 1]][ntsymbol];
                            sstack[sp] = newState;
                            ++sp;

                            continue;

                        // accept:
                        case 3:
                            if (sp !== -2) {
                                retval = true;
                                // Return the `$accept` rule's `$$` result, if available.
                                //
                                // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                                // default, action):
                                //
                                //     $accept: <startSymbol> $end
                                //                  %{ $$ = $1; @$ = @1; %}
                                //
                                // which, combined with the parse kernel's `$accept` state behaviour coded below,
                                // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                                // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                                //
                                // In code:
                                //
                                //                  %{
                                //                      @$ = @1;            // if location tracking support is included
                                //                      if (typeof $1 !== 'undefined')
                                //                          return $1;
                                //                      else
                                //                          return true;           // the default parse result if the rule actions don't produce anything
                                //                  %}
                                sp--;
                                if (typeof vstack[sp] !== "undefined") {
                                    retval = vstack[sp];
                                }
                            }
                            break;
                    }

                    // break out of loop: we accept or fail with error
                    break;
                }
            } catch (ex) {
                // report exceptions through the parseError callback too, but keep the exception intact
                // if it is a known parser or lexer error which has been thrown by parseError() already:
                if (ex instanceof this.JisonParserError) {
                    throw ex;
                } else if (
                    lexer &&
                    typeof lexer.JisonLexerError === "function" &&
                    ex instanceof lexer.JisonLexerError
                ) {
                    throw ex;
                }

                p = this.constructParseErrorInfo(
                    "Parsing aborted due to exception.",
                    ex,
                    null,
                    false,
                );
                retval = false;
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== "undefined") {
                    retval = r;
                }
            } finally {
                retval = this.cleanupAfterParse(retval, true, true);
                this.__reentrant_call_depth--;
            } // /finally

            return retval;
        },
    };
    parser.originalParseError = parser.parseError;
    parser.originalQuoteName = parser.quoteName;
    /* lexer generated by jison-lex 0.6.1-215 */

    /*
     * Returns a Lexer object of the following structure:
     *
     *  Lexer: {
     *    yy: {}     The so-called "shared state" or rather the *source* of it;
     *               the real "shared state" `yy` passed around to
     *               the rule actions, etc. is a direct reference!
     *
     *               This "shared context" object was passed to the lexer by way of
     *               the `lexer.setInput(str, yy)` API before you may use it.
     *
     *               This "shared context" object is passed to the lexer action code in `performAction()`
     *               so userland code in the lexer actions may communicate with the outside world
     *               and/or other lexer rules' actions in more or less complex ways.
     *
     *  }
     *
     *  Lexer.prototype: {
     *    EOF: 1,
     *    ERROR: 2,
     *
     *    yy:        The overall "shared context" object reference.
     *
     *    JisonLexerError: function(msg, hash),
     *
     *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
     *
     *               The function parameters and `this` have the following value/meaning:
     *               - `this`    : reference to the `lexer` instance.
     *                               `yy_` is an alias for `this` lexer instance reference used internally.
     *
     *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
     *                             by way of the `lexer.setInput(str, yy)` API before.
     *
     *                             Note:
     *                             The extra arguments you specified in the `%parse-param` statement in your
     *                             **parser** grammar definition file are passed to the lexer via this object
     *                             reference as member variables.
     *
     *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
     *
     *               - `YY_START`: the current lexer "start condition" state.
     *
     *    parseError: function(str, hash, ExceptionClass),
     *
     *    constructLexErrorInfo: function(error_message, is_recoverable),
     *               Helper function.
     *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
     *               See it's use in this lexer kernel in many places; example usage:
     *
     *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
     *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
     *
     *    options: { ... lexer %options ... },
     *
     *    lex: function(),
     *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
     *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
     *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
     *
     *               WARNING:
     *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
     *               any attributes already added to `yy` by the **parser** or the jison run-time;
     *               when such a collision is detected an exception is thrown to prevent the generated run-time
     *               from silently accepting this confusing and potentially hazardous situation!
     *
     *    cleanupAfterLex: function(do_not_nuke_errorinfos),
     *               Helper function.
     *
     *               This helper API is invoked when the **parse process** has completed: it is the responsibility
     *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired.
     *
     *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
     *
     *    setInput: function(input, [yy]),
     *
     *
     *    input: function(),
     *
     *
     *    unput: function(str),
     *
     *
     *    more: function(),
     *
     *
     *    reject: function(),
     *
     *
     *    less: function(n),
     *
     *
     *    pastInput: function(n),
     *
     *
     *    upcomingInput: function(n),
     *
     *
     *    showPosition: function(),
     *
     *
     *    test_match: function(regex_match_array, rule_index),
     *
     *
     *    next: function(),
     *
     *
     *    begin: function(condition),
     *
     *
     *    pushState: function(condition),
     *
     *
     *    popState: function(),
     *
     *
     *    topState: function(),
     *
     *
     *    _currentRules: function(),
     *
     *
     *    stateStackSize: function(),
     *
     *
     *    performAction: function(yy, yy_, yyrulenumber, YY_START),
     *
     *
     *    rules: [...],
     *
     *
     *    conditions: {associative list: name ==> set},
     *  }
     *
     *
     *  token location info (`yylloc`): {
     *    first_line: n,
     *    last_line: n,
     *    first_column: n,
     *    last_column: n,
     *    range: [start_number, end_number]
     *               (where the numbers are indexes into the input string, zero-based)
     *  }
     *
     * ---
     *
     * The `parseError` function receives a 'hash' object with these members for lexer errors:
     *
     *  {
     *    text:        (matched text)
     *    token:       (the produced terminal token, if any)
     *    token_id:    (the produced terminal token numeric ID, if any)
     *    line:        (yylineno)
     *    loc:         (yylloc)
     *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
     *                  available for this particular error)
     *    yy:          (object: the current parser internal "shared state" `yy`
     *                  as is also available in the rule actions; this can be used,
     *                  for instance, for advanced error analysis and reporting)
     *    lexer:       (reference to the current lexer instance used by the parser)
     *  }
     *
     * while `this` will reference the current lexer instance.
     *
     * When `parseError` is invoked by the lexer, the default implementation will
     * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
     * it will try to invoke `yy.parseError()` instead. When that callback is also not
     * provided, a `JisonLexerError` exception will be thrown containing the error
     * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
     *
     * Note that the lexer's `JisonLexerError` error class is passed via the
     * `ExceptionClass` argument, which is invoked to construct the exception
     * instance to be thrown, so technically `parseError` will throw the object
     * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
     *
     * ---
     *
     * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
     * These options are available:
     *
     * (Options are permanent.)
     *
     *  yy: {
     *      parseError: function(str, hash, ExceptionClass)
     *                 optional: overrides the default `parseError` function.
     *  }
     *
     *  lexer.options: {
     *      pre_lex:  function()
     *                 optional: is invoked before the lexer is invoked to produce another token.
     *                 `this` refers to the Lexer object.
     *      post_lex: function(token) { return token; }
     *                 optional: is invoked when the lexer has produced a token `token`;
     *                 this function can override the returned token value by returning another.
     *                 When it does not return any (truthy) value, the lexer will return
     *                 the original `token`.
     *                 `this` refers to the Lexer object.
     *
     * WARNING: the next set of options are not meant to be changed. They echo the abilities of
     * the lexer as per when it was compiled!
     *
     *      ranges: boolean
     *                 optional: `true` ==> token location info will include a .range[] member.
     *      flex: boolean
     *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
     *                 exhaustively to find the longest match.
     *      backtrack_lexer: boolean
     *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
     *                 the lexer terminates the scan when a token is returned by the action code.
     *      xregexp: boolean
     *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
     *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
     *                 rule regexes have been written as standard JavaScript RegExp expressions.
     *  }
     */

    var lexer = (function () {
        /**
         * See also:
         * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
         * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
         * with userland code which might access the derived class in a 'classic' way.
         *
         * @public
         * @constructor
         * @nocollapse
         */
        function JisonLexerError(msg, hash) {
            Object.defineProperty(this, "name", {
                enumerable: false,
                writable: false,
                value: "JisonLexerError",
            });

            if (msg == null) msg = "???";

            Object.defineProperty(this, "message", {
                enumerable: false,
                writable: true,
                value: msg,
            });

            this.hash = hash;
            var stacktrace;

            if (hash && hash.exception instanceof Error) {
                var ex2 = hash.exception;
                this.message = ex2.message || msg;
                stacktrace = ex2.stack;
            }

            if (!stacktrace) {
                if (Error.hasOwnProperty("captureStackTrace")) {
                    // V8
                    Error.captureStackTrace(this, this.constructor);
                } else {
                    stacktrace = new Error(msg).stack;
                }
            }

            if (stacktrace) {
                Object.defineProperty(this, "stack", {
                    enumerable: false,
                    writable: false,
                    value: stacktrace,
                });
            }
        }

        if (typeof Object.setPrototypeOf === "function") {
            Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
        } else {
            JisonLexerError.prototype = Object.create(Error.prototype);
        }

        JisonLexerError.prototype.constructor = JisonLexerError;
        JisonLexerError.prototype.name = "JisonLexerError";

        var lexer = {
            // Code Generator Information Report
            // ---------------------------------
            //
            // Options:
            //
            //   backtracking: .................... false
            //   location.ranges: ................. false
            //   location line+column tracking: ... true
            //
            //
            // Forwarded Parser Analysis flags:
            //
            //   uses yyleng: ..................... false
            //   uses yylineno: ................... false
            //   uses yytext: ..................... false
            //   uses yylloc: ..................... false
            //   uses lexer values: ............... true / true
            //   location tracking: ............... true
            //   location assignment: ............. true
            //
            //
            // Lexer Analysis flags:
            //
            //   uses yyleng: ..................... ???
            //   uses yylineno: ................... ???
            //   uses yytext: ..................... ???
            //   uses yylloc: ..................... ???
            //   uses ParseError API: ............. ???
            //   uses yyerror: .................... ???
            //   uses location tracking & editing:  ???
            //   uses more() API: ................. ???
            //   uses unput() API: ................ ???
            //   uses reject() API: ............... ???
            //   uses less() API: ................. ???
            //   uses display APIs pastInput(), upcomingInput(), showPosition():
            //        ............................. ???
            //   uses describeYYLLOC() API: ....... ???
            //
            // --------- END OF REPORT -----------

            EOF: 1,
            ERROR: 2,

            // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator

            // options: {},                             /// <-- injected by the code generator

            // yy: ...,                                 /// <-- injected by setInput()

            __currentRuleSet__: null, /// INTERNAL USE ONLY: internal rule set cache for the current lexer state

            __error_infos: [], /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup
            __decompressed: false, /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use
            done: false, /// INTERNAL USE ONLY
            _backtrack: false, /// INTERNAL USE ONLY
            _input: "", /// INTERNAL USE ONLY
            _more: false, /// INTERNAL USE ONLY
            _signaled_error_token: false, /// INTERNAL USE ONLY
            conditionStack: [], /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`
            match: "", /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!
            matched: "", /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far
            matches: false, /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt
            yytext: "", /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.
            offset: 0, /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far
            yyleng: 0, /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)
            yylineno: 0, /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located
            yylloc: null, /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction

            /**
             * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
             *
             * @public
             * @this {RegExpLexer}
             */
            constructLexErrorInfo: function lexer_constructLexErrorInfo(
                msg,
                recoverable,
                show_input_position,
            ) {
                msg = "" + msg;

                // heuristic to determine if the error message already contains a (partial) source code dump
                // as produced by either `showPosition()` or `prettyPrintRange()`:
                if (show_input_position == undefined) {
                    show_input_position = !(
                        msg.indexOf("\n") > 0 && msg.indexOf("^") > 0
                    );
                }

                if (this.yylloc && show_input_position) {
                    if (typeof this.prettyPrintRange === "function") {
                        var pretty_src = this.prettyPrintRange(this.yylloc);

                        if (!/\n\s*$/.test(msg)) {
                            msg += "\n";
                        }

                        msg +=
                            "\n  Erroneous area:\n" +
                            this.prettyPrintRange(this.yylloc);
                    } else if (typeof this.showPosition === "function") {
                        var pos_str = this.showPosition();

                        if (pos_str) {
                            if (
                                msg.length &&
                                msg[msg.length - 1] !== "\n" &&
                                pos_str[0] !== "\n"
                            ) {
                                msg += "\n" + pos_str;
                            } else {
                                msg += pos_str;
                            }
                        }
                    }
                }

                /** @constructor */
                var pei = {
                    errStr: msg,
                    recoverable: !!recoverable,
                    text: this.match, // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...
                    token: null,
                    line: this.yylineno,
                    loc: this.yylloc,
                    yy: this.yy,
                    lexer: this,

                    /**
                     * and make sure the error info doesn't stay due to potential
                     * ref cycle via userland code manipulations.
                     * These would otherwise all be memory leak opportunities!
                     *
                     * Note that only array and object references are nuked as those
                     * constitute the set of elements which can produce a cyclic ref.
                     * The rest of the members is kept intact as they are harmless.
                     *
                     * @public
                     * @this {LexErrorInfo}
                     */
                    destroy: function destructLexErrorInfo() {
                        // remove cyclic references added to error info:
                        // info.yy = null;
                        // info.lexer = null;
                        // ...
                        var rec = !!this.recoverable;

                        for (var key in this) {
                            if (
                                this.hasOwnProperty(key) &&
                                typeof key === "object"
                            ) {
                                this[key] = undefined;
                            }
                        }

                        this.recoverable = rec;
                    },
                };

                // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
                this.__error_infos.push(pei);

                return pei;
            },

            /**
             * handler which is invoked when a lexer error occurs.
             *
             * @public
             * @this {RegExpLexer}
             */
            parseError: function lexer_parseError(str, hash, ExceptionClass) {
                if (!ExceptionClass) {
                    ExceptionClass = this.JisonLexerError;
                }

                if (this.yy) {
                    if (
                        this.yy.parser &&
                        typeof this.yy.parser.parseError === "function"
                    ) {
                        return (
                            this.yy.parser.parseError.call(
                                this,
                                str,
                                hash,
                                ExceptionClass,
                            ) || this.ERROR
                        );
                    } else if (typeof this.yy.parseError === "function") {
                        return (
                            this.yy.parseError.call(
                                this,
                                str,
                                hash,
                                ExceptionClass,
                            ) || this.ERROR
                        );
                    }
                }

                throw new ExceptionClass(str, hash);
            },

            /**
             * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
             *
             * @public
             * @this {RegExpLexer}
             */
            yyerror: function yyError(str /*, ...args */) {
                var lineno_msg = "";

                if (this.yylloc) {
                    lineno_msg = " on line " + (this.yylineno + 1);
                }

                var p = this.constructLexErrorInfo(
                    "Lexical error" + lineno_msg + ": " + str,
                    this.options.lexerErrorsAreRecoverable,
                );

                // Add any extra args to the hash under the name `extra_error_attributes`:
                var args = Array.prototype.slice.call(arguments, 1);

                if (args.length) {
                    p.extra_error_attributes = args;
                }

                return (
                    this.parseError(p.errStr, p, this.JisonLexerError) ||
                    this.ERROR
                );
            },

            /**
             * final cleanup function for when we have completed lexing the input;
             * make it an API so that external code can use this one once userland
             * code has decided it's time to destroy any lingering lexer error
             * hash object instances and the like: this function helps to clean
             * up these constructs, which *may* carry cyclic references which would
             * otherwise prevent the instances from being properly and timely
             * garbage-collected, i.e. this function helps prevent memory leaks!
             *
             * @public
             * @this {RegExpLexer}
             */
            cleanupAfterLex: function lexer_cleanupAfterLex(
                do_not_nuke_errorinfos,
            ) {
                // prevent lingering circular references from causing memory leaks:
                this.setInput("", {});

                // nuke the error hash info instances created during this run.
                // Userland code must COPY any data/references
                // in the error hash instance(s) it is more permanently interested in.
                if (!do_not_nuke_errorinfos) {
                    for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                        var el = this.__error_infos[i];

                        if (el && typeof el.destroy === "function") {
                            el.destroy();
                        }
                    }

                    this.__error_infos.length = 0;
                }

                return this;
            },

            /**
             * clear the lexer token context; intended for internal use only
             *
             * @public
             * @this {RegExpLexer}
             */
            clear: function lexer_clear() {
                this.yytext = "";
                this.yyleng = 0;
                this.match = "";

                // - DO NOT reset `this.matched`
                this.matches = false;

                this._more = false;
                this._backtrack = false;
                var col = this.yylloc ? this.yylloc.last_column : 0;

                this.yylloc = {
                    first_line: this.yylineno + 1,
                    first_column: col,
                    last_line: this.yylineno + 1,
                    last_column: col,
                    range: [this.offset, this.offset],
                };
            },

            /**
             * resets the lexer, sets new input
             *
             * @public
             * @this {RegExpLexer}
             */
            setInput: function lexer_setInput(input, yy) {
                this.yy = yy || this.yy || {};

                // also check if we've fully initialized the lexer instance,
                // including expansion work to be done to go from a loaded
                // lexer to a usable lexer:
                if (!this.__decompressed) {
                    // step 1: decompress the regex list:
                    var rules = this.rules;

                    for (var i = 0, len = rules.length; i < len; i++) {
                        var rule_re = rules[i];

                        // compression: is the RE an xref to another RE slot in the rules[] table?
                        if (typeof rule_re === "number") {
                            rules[i] = rules[rule_re];
                        }
                    }

                    // step 2: unfold the conditions[] set to make these ready for use:
                    var conditions = this.conditions;

                    for (var k in conditions) {
                        var spec = conditions[k];
                        var rule_ids = spec.rules;
                        var len = rule_ids.length;
                        var rule_regexes = new Array(len + 1); // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple!
                        var rule_new_ids = new Array(len + 1);

                        for (var i = 0; i < len; i++) {
                            var idx = rule_ids[i];
                            var rule_re = rules[idx];
                            rule_regexes[i + 1] = rule_re;
                            rule_new_ids[i + 1] = idx;
                        }

                        spec.rules = rule_new_ids;
                        spec.__rule_regexes = rule_regexes;
                        spec.__rule_count = len;
                    }

                    this.__decompressed = true;
                }

                this._input = input || "";
                this.clear();
                this._signaled_error_token = false;
                this.done = false;
                this.yylineno = 0;
                this.matched = "";
                this.conditionStack = ["INITIAL"];
                this.__currentRuleSet__ = null;

                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0,
                    range: [0, 0],
                };

                this.offset = 0;
                return this;
            },

            /**
             * edit the remaining input via user-specified callback.
             * This can be used to forward-adjust the input-to-parse,
             * e.g. inserting macro expansions and alike in the
             * input which has yet to be lexed.
             * The behaviour of this API contrasts the `unput()` et al
             * APIs as those act on the *consumed* input, while this
             * one allows one to manipulate the future, without impacting
             * the current `yyloc` cursor location or any history.
             *
             * Use this API to help implement C-preprocessor-like
             * `#include` statements, etc.
             *
             * The provided callback must be synchronous and is
             * expected to return the edited input (string).
             *
             * The `cpsArg` argument value is passed to the callback
             * as-is.
             *
             * `callback` interface:
             * `function callback(input, cpsArg)`
             *
             * - `input` will carry the remaining-input-to-lex string
             *   from the lexer.
             * - `cpsArg` is `cpsArg` passed into this API.
             *
             * The `this` reference for the callback will be set to
             * reference this lexer instance so that userland code
             * in the callback can easily and quickly access any lexer
             * API.
             *
             * When the callback returns a non-string-type falsey value,
             * we assume the callback did not edit the input and we
             * will using the input as-is.
             *
             * When the callback returns a non-string-type value, it
             * is converted to a string for lexing via the `"" + retval`
             * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html
             * -- that way any returned object's `toValue()` and `toString()`
             * methods will be invoked in a proper/desirable order.)
             *
             * @public
             * @this {RegExpLexer}
             */
            editRemainingInput: function lexer_editRemainingInput(
                callback,
                cpsArg,
            ) {
                var rv = callback.call(this, this._input, cpsArg);

                if (typeof rv !== "string") {
                    if (rv) {
                        this._input = "" + rv;
                    }
                    // else: keep `this._input` as is.
                } else {
                    this._input = rv;
                }

                return this;
            },

            /**
             * consumes and returns one char from the input
             *
             * @public
             * @this {RegExpLexer}
             */
            input: function lexer_input() {
                if (!this._input) {
                    //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
                    return null;
                }

                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;

                // Count the linenumber up when we hit the LF (or a stand-alone CR).
                // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
                // and we advance immediately past the LF as well, returning both together as if
                // it was all a single 'character' only.
                var slice_len = 1;

                var lines = false;

                if (ch === "\n") {
                    lines = true;
                } else if (ch === "\r") {
                    lines = true;
                    var ch2 = this._input[1];

                    if (ch2 === "\n") {
                        slice_len++;
                        ch += ch2;
                        this.yytext += ch2;
                        this.yyleng++;
                        this.offset++;
                        this.match += ch2;
                        this.matched += ch2;
                        this.yylloc.range[1]++;
                    }
                }

                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                    this.yylloc.last_column = 0;
                } else {
                    this.yylloc.last_column++;
                }

                this.yylloc.range[1]++;
                this._input = this._input.slice(slice_len);
                return ch;
            },

            /**
             * unshifts one char (or an entire string) into the input
             *
             * @public
             * @this {RegExpLexer}
             */
            unput: function lexer_unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);
                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                this.yyleng = this.yytext.length;
                this.offset -= len;
                this.match = this.match.substr(0, this.match.length - len);
                this.matched = this.matched.substr(
                    0,
                    this.matched.length - len,
                );

                if (lines.length > 1) {
                    this.yylineno -= lines.length - 1;
                    this.yylloc.last_line = this.yylineno + 1;

                    // Get last entirely matched line into the `pre_lines[]` array's
                    // last index slot; we don't mind when other previously
                    // matched lines end up in the array too.
                    var pre = this.match;

                    var pre_lines = pre.split(/(?:\r\n?|\n)/g);

                    if (pre_lines.length === 1) {
                        pre = this.matched;
                        pre_lines = pre.split(/(?:\r\n?|\n)/g);
                    }

                    this.yylloc.last_column =
                        pre_lines[pre_lines.length - 1].length;
                } else {
                    this.yylloc.last_column -= len;
                }

                this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
                this.done = false;
                return this;
            },

            /**
             * cache matched text and append it on next action
             *
             * @public
             * @this {RegExpLexer}
             */
            more: function lexer_more() {
                this._more = true;
                return this;
            },

            /**
             * signal the lexer that this rule fails to match the input, so the
             * next matching rule (regex) should be tested instead.
             *
             * @public
             * @this {RegExpLexer}
             */
            reject: function lexer_reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    // when the `parseError()` call returns, we MUST ensure that the error is registered.
                    // We accomplish this by signaling an 'error' token to be produced for the current
                    // `.lex()` run.
                    var lineno_msg = "";

                    if (this.yylloc) {
                        lineno_msg = " on line " + (this.yylineno + 1);
                    }

                    var p = this.constructLexErrorInfo(
                        "Lexical error" +
                            lineno_msg +
                            ": You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).",
                        false,
                    );

                    this._signaled_error_token =
                        this.parseError(p.errStr, p, this.JisonLexerError) ||
                        this.ERROR;
                }

                return this;
            },

            /**
             * retain first n characters of the match
             *
             * @public
             * @this {RegExpLexer}
             */
            less: function lexer_less(n) {
                return this.unput(this.match.slice(n));
            },

            /**
             * return (part of the) already matched input, i.e. for error
             * messages.
             *
             * Limit the returned string length to `maxSize` (default: 20).
             *
             * Limit the returned string to the `maxLines` number of lines of
             * input (default: 1).
             *
             * Negative limit values equal *unlimited*.
             *
             * @public
             * @this {RegExpLexer}
             */
            pastInput: function lexer_pastInput(maxSize, maxLines) {
                var past = this.matched.substring(
                    0,
                    this.matched.length - this.match.length,
                );

                if (maxSize < 0) maxSize = past.length;
                else if (!maxSize) maxSize = 20;

                if (maxLines < 0)
                    maxLines = past.length; // can't ever have more input lines than this!
                else if (!maxLines) maxLines = 1;

                // `substr` anticipation: treat \r\n as a single character and take a little
                // more than necessary so that we can still properly check against maxSize
                // after we've transformed and limited the newLines in here:
                past = past.substr(-maxSize * 2 - 2);

                // now that we have a significantly reduced string to process, transform the newlines
                // and chop them, then limit them:
                var a = past.replace(/\r\n|\r/g, "\n").split("\n");

                a = a.slice(-maxLines);
                past = a.join("\n");

                // When, after limiting to maxLines, we still have too much to return,
                // do add an ellipsis prefix...
                if (past.length > maxSize) {
                    past = "..." + past.substr(-maxSize);
                }

                return past;
            },

            /**
             * return (part of the) upcoming input, i.e. for error messages.
             *
             * Limit the returned string length to `maxSize` (default: 20).
             *
             * Limit the returned string to the `maxLines` number of lines of input (default: 1).
             *
             * Negative limit values equal *unlimited*.
             *
             * > ### NOTE ###
             * >
             * > *"upcoming input"* is defined as the whole of the both
             * > the *currently lexed* input, together with any remaining input
             * > following that. *"currently lexed"* input is the input
             * > already recognized by the lexer but not yet returned with
             * > the lexer token. This happens when you are invoking this API
             * > from inside any lexer rule action code block.
             * >
             *
             * @public
             * @this {RegExpLexer}
             */
            upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
                var next = this.match;

                if (maxSize < 0) maxSize = next.length + this._input.length;
                else if (!maxSize) maxSize = 20;

                if (maxLines < 0)
                    maxLines = maxSize; // can't ever have more input lines than this!
                else if (!maxLines) maxLines = 1;

                // `substring` anticipation: treat \r\n as a single character and take a little
                // more than necessary so that we can still properly check against maxSize
                // after we've transformed and limited the newLines in here:
                if (next.length < maxSize * 2 + 2) {
                    next += this._input.substring(0, maxSize * 2 + 2); // substring is faster on Chrome/V8
                }

                // now that we have a significantly reduced string to process, transform the newlines
                // and chop them, then limit them:
                var a = next.replace(/\r\n|\r/g, "\n").split("\n");

                a = a.slice(0, maxLines);
                next = a.join("\n");

                // When, after limiting to maxLines, we still have too much to return,
                // do add an ellipsis postfix...
                if (next.length > maxSize) {
                    next = next.substring(0, maxSize) + "...";
                }

                return next;
            },

            /**
             * return a string which displays the character position where the
             * lexing error occurred, i.e. for error messages
             *
             * @public
             * @this {RegExpLexer}
             */
            showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
                var pre = this.pastInput(maxPrefix).replace(/\s/g, " ");
                var c = new Array(pre.length + 1).join("-");
                return (
                    pre +
                    this.upcomingInput(maxPostfix).replace(/\s/g, " ") +
                    "\n" +
                    c +
                    "^"
                );
            },

            /**
             * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
             * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
             * it MAY be NULL) and you MUST have a valid location info object anyway:
             * then we take the given context of the `preceding` and `following` locations, IFF those are available,
             * and reconstruct the `actual` location info from those.
             * If this fails, the heuristic is to take the `current` location, IFF available.
             * If this fails as well, we assume the sought location is at/around the current lexer position
             * and then produce that one as a response. DO NOTE that these heuristic/derived location info
             * values MAY be inaccurate!
             *
             * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
             * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
             *
             * @public
             * @this {RegExpLexer}
             */
            deriveLocationInfo: function lexer_deriveYYLLOC(
                actual,
                preceding,
                following,
                current,
            ) {
                var loc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0,
                    range: [0, 0],
                };

                if (actual) {
                    loc.first_line = actual.first_line | 0;
                    loc.last_line = actual.last_line | 0;
                    loc.first_column = actual.first_column | 0;
                    loc.last_column = actual.last_column | 0;

                    if (actual.range) {
                        loc.range[0] = actual.range[0] | 0;
                        loc.range[1] = actual.range[1] | 0;
                    }
                }

                if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
                    // plan B: heuristic using preceding and following:
                    if (loc.first_line <= 0 && preceding) {
                        loc.first_line = preceding.last_line | 0;
                        loc.first_column = preceding.last_column | 0;

                        if (preceding.range) {
                            loc.range[0] = actual.range[1] | 0;
                        }
                    }

                    if (
                        (loc.last_line <= 0 ||
                            loc.last_line < loc.first_line) &&
                        following
                    ) {
                        loc.last_line = following.first_line | 0;
                        loc.last_column = following.first_column | 0;

                        if (following.range) {
                            loc.range[1] = actual.range[0] | 0;
                        }
                    }

                    // plan C?: see if the 'current' location is useful/sane too:
                    if (
                        loc.first_line <= 0 &&
                        current &&
                        (loc.last_line <= 0 ||
                            current.last_line <= loc.last_line)
                    ) {
                        loc.first_line = current.first_line | 0;
                        loc.first_column = current.first_column | 0;

                        if (current.range) {
                            loc.range[0] = current.range[0] | 0;
                        }
                    }

                    if (
                        loc.last_line <= 0 &&
                        current &&
                        (loc.first_line <= 0 ||
                            current.first_line >= loc.first_line)
                    ) {
                        loc.last_line = current.last_line | 0;
                        loc.last_column = current.last_column | 0;

                        if (current.range) {
                            loc.range[1] = current.range[1] | 0;
                        }
                    }
                }

                // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
                // or plan D heuristics to produce a 'sensible' last_line value:
                if (loc.last_line <= 0) {
                    if (loc.first_line <= 0) {
                        loc.first_line = this.yylloc.first_line;
                        loc.last_line = this.yylloc.last_line;
                        loc.first_column = this.yylloc.first_column;
                        loc.last_column = this.yylloc.last_column;
                        loc.range[0] = this.yylloc.range[0];
                        loc.range[1] = this.yylloc.range[1];
                    } else {
                        loc.last_line = this.yylloc.last_line;
                        loc.last_column = this.yylloc.last_column;
                        loc.range[1] = this.yylloc.range[1];
                    }
                }

                if (loc.first_line <= 0) {
                    loc.first_line = loc.last_line;
                    loc.first_column = 0; // loc.last_column;
                    loc.range[1] = loc.range[0];
                }

                if (loc.first_column < 0) {
                    loc.first_column = 0;
                }

                if (loc.last_column < 0) {
                    loc.last_column =
                        loc.first_column > 0 ? loc.first_column : 80;
                }

                return loc;
            },

            /**
             * return a string which displays the lines & columns of input which are referenced
             * by the given location info range, plus a few lines of context.
             *
             * This function pretty-prints the indicated section of the input, with line numbers
             * and everything!
             *
             * This function is very useful to provide highly readable error reports, while
             * the location range may be specified in various flexible ways:
             *
             * - `loc` is the location info object which references the area which should be
             *   displayed and 'marked up': these lines & columns of text are marked up by `^`
             *   characters below each character in the entire input range.
             *
             * - `context_loc` is the *optional* location info object which instructs this
             *   pretty-printer how much *leading* context should be displayed alongside
             *   the area referenced by `loc`. This can help provide context for the displayed
             *   error, etc.
             *
             *   When this location info is not provided, a default context of 3 lines is
             *   used.
             *
             * - `context_loc2` is another *optional* location info object, which serves
             *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
             *   context lines to display in the pretty-print output.
             *
             *   When this location info is not provided, a default context of 1 line only is
             *   used.
             *
             * Special Notes:
             *
             * - when the `loc`-indicated range is very large (about 5 lines or more), then
             *   only the first and last few lines of this block are printed while a
             *   `...continued...` message will be printed between them.
             *
             *   This serves the purpose of not printing a huge amount of text when the `loc`
             *   range happens to be huge: this way a manageable & readable output results
             *   for arbitrary large ranges.
             *
             * - this function can display lines of input which whave not yet been lexed.
             *   `prettyPrintRange()` can access the entire input!
             *
             * @public
             * @this {RegExpLexer}
             */
            prettyPrintRange: function lexer_prettyPrintRange(
                loc,
                context_loc,
                context_loc2,
            ) {
                loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
                const CONTEXT = 3;
                const CONTEXT_TAIL = 1;
                const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
                var input = this.matched + this._input;
                var lines = input.split("\n");
                var l0 = Math.max(
                    1,
                    context_loc
                        ? context_loc.first_line
                        : loc.first_line - CONTEXT,
                );
                var l1 = Math.max(
                    1,
                    context_loc2
                        ? context_loc2.last_line
                        : loc.last_line + CONTEXT_TAIL,
                );
                var lineno_display_width = (1 + Math.log10(l1 | 1)) | 0;
                var ws_prefix = new Array(lineno_display_width).join(" ");
                var nonempty_line_indexes = [];

                var rv = lines
                    .slice(l0 - 1, l1 + 1)
                    .map(function injectLineNumber(line, index) {
                        var lno = index + l0;
                        var lno_pfx = (ws_prefix + lno).substr(
                            -lineno_display_width,
                        );
                        var rv = lno_pfx + ": " + line;
                        var errpfx = new Array(lineno_display_width + 1).join(
                            "^",
                        );
                        var offset = 2 + 1;
                        var len = 0;

                        if (lno === loc.first_line) {
                            offset += loc.first_column;

                            len = Math.max(
                                2,
                                (lno === loc.last_line
                                    ? loc.last_column
                                    : line.length) -
                                    loc.first_column +
                                    1,
                            );
                        } else if (lno === loc.last_line) {
                            len = Math.max(2, loc.last_column + 1);
                        } else if (
                            lno > loc.first_line &&
                            lno < loc.last_line
                        ) {
                            len = Math.max(2, line.length + 1);
                        }

                        if (len) {
                            var lead = new Array(offset).join(".");
                            var mark = new Array(len).join("^");
                            rv += "\n" + errpfx + lead + mark;

                            if (line.trim().length > 0) {
                                nonempty_line_indexes.push(index);
                            }
                        }

                        rv = rv.replace(/\t/g, " ");
                        return rv;
                    });

                // now make sure we don't print an overly large amount of error area: limit it
                // to the top and bottom line count:
                if (
                    nonempty_line_indexes.length >
                    2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT
                ) {
                    var clip_start =
                        nonempty_line_indexes[
                            MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1
                        ] + 1;
                    var clip_end =
                        nonempty_line_indexes[
                            nonempty_line_indexes.length -
                                MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT
                        ] - 1;
                    var intermediate_line =
                        new Array(lineno_display_width + 1).join(" ") +
                        "  (...continued...)";
                    intermediate_line +=
                        "\n" +
                        new Array(lineno_display_width + 1).join("-") +
                        "  (---------------)";
                    rv.splice(
                        clip_start,
                        clip_end - clip_start + 1,
                        intermediate_line,
                    );
                }

                return rv.join("\n");
            },

            /**
             * helper function, used to produce a human readable description as a string, given
             * the input `yylloc` location object.
             *
             * Set `display_range_too` to TRUE to include the string character index position(s)
             * in the description if the `yylloc.range` is available.
             *
             * @public
             * @this {RegExpLexer}
             */
            describeYYLLOC: function lexer_describe_yylloc(
                yylloc,
                display_range_too,
            ) {
                var l1 = yylloc.first_line;
                var l2 = yylloc.last_line;
                var c1 = yylloc.first_column;
                var c2 = yylloc.last_column;
                var dl = l2 - l1;
                var dc = c2 - c1;
                var rv;

                if (dl === 0) {
                    rv = "line " + l1 + ", ";

                    if (dc <= 1) {
                        rv += "column " + c1;
                    } else {
                        rv += "columns " + c1 + " .. " + c2;
                    }
                } else {
                    rv =
                        "lines " +
                        l1 +
                        "(column " +
                        c1 +
                        ") .. " +
                        l2 +
                        "(column " +
                        c2 +
                        ")";
                }

                if (yylloc.range && display_range_too) {
                    var r1 = yylloc.range[0];
                    var r2 = yylloc.range[1] - 1;

                    if (r2 <= r1) {
                        rv += " {String Offset: " + r1 + "}";
                    } else {
                        rv +=
                            " {String Offset range: " + r1 + " .. " + r2 + "}";
                    }
                }

                return rv;
            },

            /**
             * test the lexed token: return FALSE when not a match, otherwise return token.
             *
             * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
             * contains the actually matched text string.
             *
             * Also move the input cursor forward and update the match collectors:
             *
             * - `yytext`
             * - `yyleng`
             * - `match`
             * - `matches`
             * - `yylloc`
             * - `offset`
             *
             * @public
             * @this {RegExpLexer}
             */
            test_match: function lexer_test_match(match, indexed_rule) {
                var token, lines, backup, match_str, match_str_len;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,

                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.yylloc.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column,
                            range: this.yylloc.range.slice(0),
                        },

                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,

                        //_signaled_error_token: this._signaled_error_token,
                        yy: this.yy,

                        conditionStack: this.conditionStack.slice(0),
                        done: this.done,
                    };
                }

                match_str = match[0];
                match_str_len = match_str.length;

                // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
                lines = match_str.split(/(?:\r\n?|\n)/g);

                if (lines.length > 1) {
                    this.yylineno += lines.length - 1;
                    this.yylloc.last_line = this.yylineno + 1;
                    this.yylloc.last_column = lines[lines.length - 1].length;
                } else {
                    this.yylloc.last_column += match_str_len;
                }

                // }
                this.yytext += match_str;

                this.match += match_str;
                this.matched += match_str;
                this.matches = match;
                this.yyleng = this.yytext.length;
                this.yylloc.range[1] += match_str_len;

                // previous lex rules MAY have invoked the `more()` API rather than producing a token:
                // those rules will already have moved this `offset` forward matching their match lengths,
                // hence we must only add our own match length now:
                this.offset += match_str_len;

                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match_str_len);

                // calling this method:
                //
                //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
                token = this.performAction.call(
                    this,
                    this.yy,
                    indexed_rule,
                    this.conditionStack[
                        this.conditionStack.length - 1
                    ] /* = YY_START */,
                );

                // otherwise, when the action codes are all simple return token statements:
                //token = this.simpleCaseActionClusters[indexed_rule];

                if (this.done && this._input) {
                    this.done = false;
                }

                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }

                    this.__currentRuleSet__ = null;
                    return false; // rule action called reject() implying the next rule should be tested instead.
                } else if (this._signaled_error_token) {
                    // produce one 'error' token as `.parseError()` in `reject()`
                    // did not guarantee a failure signal by throwing an exception!
                    token = this._signaled_error_token;

                    this._signaled_error_token = false;
                    return token;
                }

                return false;
            },

            /**
             * return next match in input
             *
             * @public
             * @this {RegExpLexer}
             */
            next: function lexer_next() {
                if (this.done) {
                    this.clear();
                    return this.EOF;
                }

                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;

                if (!this._more) {
                    this.clear();
                }

                var spec = this.__currentRuleSet__;

                if (!spec) {
                    // Update the ruleset cache as we apparently encountered a state change or just started lexing.
                    // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
                    // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
                    // speed up those activities a tiny bit.
                    spec = this.__currentRuleSet__ = this._currentRules();

                    // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
                    // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
                    if (!spec || !spec.rules) {
                        var lineno_msg = "";

                        if (this.options.trackPosition) {
                            lineno_msg = " on line " + (this.yylineno + 1);
                        }

                        var p = this.constructLexErrorInfo(
                            "Internal lexer engine error" +
                                lineno_msg +
                                ': The lex grammar programmer pushed a non-existing condition name "' +
                                this.topState() +
                                '"; this is a fatal error and should be reported to the application programmer team!',
                            false,
                        );

                        // produce one 'error' token until this situation has been resolved, most probably by parse termination!
                        return (
                            this.parseError(
                                p.errStr,
                                p,
                                this.JisonLexerError,
                            ) || this.ERROR
                        );
                    }
                }

                var rule_ids = spec.rules;
                var regexes = spec.__rule_regexes;
                var len = spec.__rule_count;

                // Note: the arrays are 1-based, while `len` itself is a valid index,
                // hence the non-standard less-or-equal check in the next loop condition!
                for (var i = 1; i <= len; i++) {
                    tempMatch = this._input.match(regexes[i]);

                    if (
                        tempMatch &&
                        (!match || tempMatch[0].length > match[0].length)
                    ) {
                        match = tempMatch;
                        index = i;

                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rule_ids[i]);

                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = undefined;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }

                if (match) {
                    token = this.test_match(match, rule_ids[index]);

                    if (token !== false) {
                        return token;
                    }

                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }

                if (!this._input) {
                    this.done = true;
                    this.clear();
                    return this.EOF;
                } else {
                    var lineno_msg = "";

                    if (this.options.trackPosition) {
                        lineno_msg = " on line " + (this.yylineno + 1);
                    }

                    var p = this.constructLexErrorInfo(
                        "Lexical error" + lineno_msg + ": Unrecognized text.",
                        this.options.lexerErrorsAreRecoverable,
                    );

                    var pendingInput = this._input;
                    var activeCondition = this.topState();
                    var conditionStackDepth = this.conditionStack.length;
                    token =
                        this.parseError(p.errStr, p, this.JisonLexerError) ||
                        this.ERROR;

                    if (token === this.ERROR) {
                        // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
                        // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
                        // has not consumed/modified any pending input or changed state in the error handler:
                        if (
                            !this.matches && // and make sure the input has been modified/consumed ...
                            pendingInput === this._input && // ...or the lexer state has been modified significantly enough
                            // to merit a non-consuming error handling action right now.
                            activeCondition === this.topState() &&
                            conditionStackDepth === this.conditionStack.length
                        ) {
                            this.input();
                        }
                    }

                    return token;
                }
            },

            /**
             * return next match that has a token
             *
             * @public
             * @this {RegExpLexer}
             */
            lex: function lexer_lex() {
                var r;

                // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
                if (typeof this.pre_lex === "function") {
                    r = this.pre_lex.call(this, 0);
                }

                if (typeof this.options.pre_lex === "function") {
                    // (also account for a userdef function which does not return any value: keep the token as is)
                    r = this.options.pre_lex.call(this, r) || r;
                }

                if (this.yy && typeof this.yy.pre_lex === "function") {
                    // (also account for a userdef function which does not return any value: keep the token as is)
                    r = this.yy.pre_lex.call(this, r) || r;
                }

                while (!r) {
                    r = this.next();
                }

                if (this.yy && typeof this.yy.post_lex === "function") {
                    // (also account for a userdef function which does not return any value: keep the token as is)
                    r = this.yy.post_lex.call(this, r) || r;
                }

                if (typeof this.options.post_lex === "function") {
                    // (also account for a userdef function which does not return any value: keep the token as is)
                    r = this.options.post_lex.call(this, r) || r;
                }

                if (typeof this.post_lex === "function") {
                    // (also account for a userdef function which does not return any value: keep the token as is)
                    r = this.post_lex.call(this, r) || r;
                }

                return r;
            },

            /**
             * return next match that has a token. Identical to the `lex()` API but does not invoke any of the
             * `pre_lex()` nor any of the `post_lex()` callbacks.
             *
             * @public
             * @this {RegExpLexer}
             */
            fastLex: function lexer_fastLex() {
                var r;

                while (!r) {
                    r = this.next();
                }

                return r;
            },

            /**
             * return info about the lexer state that can help a parser or other lexer API user to use the
             * most efficient means available. This API is provided to aid run-time performance for larger
             * systems which employ this lexer.
             *
             * @public
             * @this {RegExpLexer}
             */
            canIUse: function lexer_canIUse() {
                var rv = {
                    fastLex:
                        !(
                            typeof this.pre_lex === "function" ||
                            typeof this.options.pre_lex === "function" ||
                            (this.yy &&
                                typeof this.yy.pre_lex === "function") ||
                            (this.yy &&
                                typeof this.yy.post_lex === "function") ||
                            typeof this.options.post_lex === "function" ||
                            typeof this.post_lex === "function"
                        ) && typeof this.fastLex === "function",
                };

                return rv;
            },

            /**
             * backwards compatible alias for `pushState()`;
             * the latter is symmetrical with `popState()` and we advise to use
             * those APIs in any modern lexer code, rather than `begin()`.
             *
             * @public
             * @this {RegExpLexer}
             */
            begin: function lexer_begin(condition) {
                return this.pushState(condition);
            },

            /**
             * activates a new lexer condition state (pushes the new lexer
             * condition state onto the condition stack)
             *
             * @public
             * @this {RegExpLexer}
             */
            pushState: function lexer_pushState(condition) {
                this.conditionStack.push(condition);
                this.__currentRuleSet__ = null;
                return this;
            },

            /**
             * pop the previously active lexer condition state off the condition
             * stack
             *
             * @public
             * @this {RegExpLexer}
             */
            popState: function lexer_popState() {
                var n = this.conditionStack.length - 1;

                if (n > 0) {
                    this.__currentRuleSet__ = null;
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            /**
             * return the currently active lexer condition state; when an index
             * argument is provided it produces the N-th previous condition state,
             * if available
             *
             * @public
             * @this {RegExpLexer}
             */
            topState: function lexer_topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);

                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            /**
             * (internal) determine the lexer rule set which is active for the
             * currently active lexer condition state
             *
             * @public
             * @this {RegExpLexer}
             */
            _currentRules: function lexer__currentRules() {
                if (
                    this.conditionStack.length &&
                    this.conditionStack[this.conditionStack.length - 1]
                ) {
                    return this.conditions[
                        this.conditionStack[this.conditionStack.length - 1]
                    ];
                } else {
                    return this.conditions["INITIAL"];
                }
            },

            /**
             * return the number of states currently on the stack
             *
             * @public
             * @this {RegExpLexer}
             */
            stateStackSize: function lexer_stateStackSize() {
                return this.conditionStack.length;
            },

            options: {
                flex: true,
                trackPosition: true,
            },

            JisonLexerError: JisonLexerError,

            performAction: function lexer__performAction(
                yy,
                yyrulenumber,
                YY_START,
            ) {
                var yy_ = this;
                var YYSTATE = YY_START;

                switch (yyrulenumber) {
                    case 0:
                        /*! Conditions:: * */
                        /*! Rule::       \s+ */
                        return;

                        break;

                    case 1:
                        /*! Conditions:: INITIAL */
                        /*! Rule::       \{% */
                        this.begin("CONTROL");

                        return 24;
                        break;

                    case 2:
                        /*! Conditions:: INITIAL */
                        /*! Rule::       <!-- */
                        this.begin("HTMLCOMMENT");

                        return;
                        break;

                    case 3:
                        /*! Conditions:: INITIAL */
                        /*! Rule::       \{# */
                        this.begin("WMLCOMMENT");

                        return;
                        break;

                    case 4:
                        /*! Conditions:: INITIAL */
                        /*! Rule::       < */
                        this.begin("ELEMENT");

                        return 15;
                        break;

                    case 5:
                        /*! Conditions:: INITIAL */
                        /*! Rule::       \{\{ */
                        this.begin("INTERPOLATION");

                        return 39;
                        break;

                    case 10:
                        /*! Conditions:: ELEMENT */
                        /*! Rule::       \/> */
                        this.popState();

                        return 38;
                        break;

                    case 12:
                        /*! Conditions:: ELEMENT */
                        /*! Rule::       > */
                        this.begin("CHILDREN");

                        return 16;
                        break;

                    case 13:
                        /*! Conditions:: ELEMENT */
                        /*! Rule::       \{\{ */
                        this.begin("INTERPOLATION");

                        return 39;
                        break;

                    case 16:
                        /*! Conditions:: CHILDREN */
                        /*! Rule::       \{\{ */
                        this.begin("INTERPOLATION");

                        return 39;
                        break;

                    case 17:
                        /*! Conditions:: CHILDREN */
                        /*! Rule::       \{% */
                        this.begin("CONTROL");

                        return 24;
                        break;

                    case 18:
                        /*! Conditions:: CHILDREN */
                        /*! Rule::       <!-- */
                        this.begin("HTMLCOMMENT");

                        return;
                        break;

                    case 19:
                        /*! Conditions:: CHILDREN */
                        /*! Rule::       <\/ */
                        this.begin("ELEMENT");

                        return 37;
                        break;

                    case 20:
                        /*! Conditions:: CHILDREN */
                        /*! Rule::       < */
                        this.begin("ELEMENT");

                        return 15;
                        break;

                    case 56:
                        /*! Conditions:: CONTROL */
                        /*! Rule::       < */
                        this.begin("ELEMENT");

                        return 15;
                        break;

                    case 57:
                        /*! Conditions:: CONTROL */
                        /*! Rule::       \{# */
                        this.begin("WMLCOMMENT");

                        return;
                        break;

                    case 58:
                        /*! Conditions:: CONTROL */
                        /*! Rule::       \{\{ */
                        this.begin("INTERPOLATION");

                        return 39;
                        break;

                    case 59:
                        /*! Conditions:: CONTROL */
                        /*! Rule::       %\} */
                        this.popState();

                        return 27;
                        break;

                    case 76:
                        /*! Conditions:: INTERPOLATION */
                        /*! Rule::       \}\} */
                        this.popState();

                        return 40;
                        break;

                    case 77:
                        /*! Conditions:: HTMLCOMMENT */
                        /*! Rule::       (.|\r|\n)*?--> */
                        this.popState();

                        return;
                        break;

                    case 78:
                        /*! Conditions:: WMLCOMMENT */
                        /*! Rule::       (.|\r|\n)*?#\} */
                        this.popState();

                        return;
                        break;

                    case 113:
                        /*! Conditions:: INITIAL */
                        /*! Rule::       . */
                        console.log("", yy_.yytext);

                        /* `flex` lexing mode: the last resort rule! */
                        break;

                    default:
                        return this.simpleCaseActionClusters[yyrulenumber];
                }
            },

            simpleCaseActionClusters: {
                /*! Conditions:: ELEMENT */
                /*! Rule::       true */
                6: 54,

                /*! Conditions:: ELEMENT */
                /*! Rule::       false */
                7: 55,

                /*! Conditions:: ELEMENT */
                /*! Rule::       {Constructor} */
                8: 57,

                /*! Conditions:: ELEMENT */
                /*! Rule::       {Identifier} */
                9: 56,

                /*! Conditions:: ELEMENT */
                /*! Rule::       \/ */
                11: 21,

                /*! Conditions:: ELEMENT */
                /*! Rule::       \{ */
                14: 13,

                /*! Conditions:: ELEMENT */
                /*! Rule::       \} */
                15: 14,

                /*! Conditions:: CHILDREN */
                /*! Rule::       \{ */
                21: 13,

                /*! Conditions:: CHILDREN */
                /*! Rule::       \} */
                22: 14,

                /*! Conditions:: CHILDREN */
                /*! Rule::       [^/<>{%}]+ */
                23: 49,

                /*! Conditions:: CONTROL */
                /*! Rule::       import */
                24: 25,

                /*! Conditions:: CONTROL */
                /*! Rule::       from */
                25: 26,

                /*! Conditions:: CONTROL */
                /*! Rule::       as */
                26: 28,

                /*! Conditions:: CONTROL */
                /*! Rule::       macro */
                27: "MACRO",

                /*! Conditions:: CONTROL */
                /*! Rule::       endmacro */
                28: "ENDMACRO",

                /*! Conditions:: CONTROL */
                /*! Rule::       for */
                29: 41,

                /*! Conditions:: CONTROL */
                /*! Rule::       endfor */
                30: 43,

                /*! Conditions:: CONTROL */
                /*! Rule::       if */
                31: 47,

                /*! Conditions:: CONTROL */
                /*! Rule::       endif */
                32: 48,

                /*! Conditions:: CONTROL */
                /*! Rule::       else */
                33: 44,

                /*! Conditions:: CONTROL */
                /*! Rule::       elseif */
                34: "ELSEIF",

                /*! Conditions:: CONTROL */
                /*! Rule::       in */
                35: 42,

                /*! Conditions:: CONTROL */
                /*! Rule::       of */
                36: 45,

                /*! Conditions:: CONTROL */
                /*! Rule::       from */
                37: 26,

                /*! Conditions:: CONTROL */
                /*! Rule::       view */
                38: 33,

                /*! Conditions:: CONTROL */
                /*! Rule::       instanceof */
                39: 66,

                /*! Conditions:: CONTROL */
                /*! Rule::       this */
                40: "THIS",

                /*! Conditions:: CONTROL */
                /*! Rule::       fun */
                41: 34,

                /*! Conditions:: CONTROL */
                /*! Rule::       endfun */
                42: 35,

                /*! Conditions:: CONTROL */
                /*! Rule::       as */
                43: 28,

                /*! Conditions:: CONTROL */
                /*! Rule::       context */
                44: 30,

                /*! Conditions:: CONTROL */
                /*! Rule::       type */
                45: 29,

                /*! Conditions:: CONTROL */
                /*! Rule::       true */
                46: 54,

                /*! Conditions:: CONTROL */
                /*! Rule::       false */
                47: 55,

                /*! Conditions:: CONTROL */
                /*! Rule::       where */
                48: 31,

                /*! Conditions:: CONTROL */
                /*! Rule::       let */
                49: 32,

                /*! Conditions:: CONTROL */
                /*! Rule::       to */
                50: 46,

                /*! Conditions:: CONTROL */
                /*! Rule::       {Constructor} */
                51: 57,

                /*! Conditions:: CONTROL */
                /*! Rule::       {Identifier} */
                52: 56,

                /*! Conditions:: CONTROL */
                /*! Rule::       @ */
                53: 18,

                /*! Conditions:: CONTROL */
                /*! Rule::       = */
                54: 7,

                /*! Conditions:: CONTROL */
                /*! Rule::       \? */
                55: 19,

                /*! Conditions:: CONTROL */
                /*! Rule::       \{ */
                60: 13,

                /*! Conditions:: CONTROL */
                /*! Rule::       \} */
                61: 14,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       \| */
                62: 8,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       -> */
                63: 36,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       @ */
                64: 18,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       instanceof */
                65: 66,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       true */
                66: 54,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       false */
                67: 55,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       if */
                68: 47,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       then */
                69: 50,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       else */
                70: 44,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       as */
                71: 28,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       {Constructor} */
                72: 57,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       {Identifier} */
                73: 56,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       \{ */
                74: 13,

                /*! Conditions:: INTERPOLATION */
                /*! Rule::       \} */
                75: 14,

                /*! Conditions:: * */
                /*! Rule::       {NumberLiteral} */
                79: 53,

                /*! Conditions:: * */
                /*! Rule::       {StringLiteral} */
                80: 52,

                /*! Conditions:: * */
                /*! Rule::       > */
                81: 16,

                /*! Conditions:: * */
                /*! Rule::       < */
                82: 15,

                /*! Conditions:: * */
                /*! Rule::       \( */
                83: 4,

                /*! Conditions:: * */
                /*! Rule::       \) */
                84: 5,

                /*! Conditions:: * */
                /*! Rule::       \[ */
                85: 11,

                /*! Conditions:: * */
                /*! Rule::       \] */
                86: 12,

                /*! Conditions:: * */
                /*! Rule::       ; */
                87: ";",

                /*! Conditions:: * */
                /*! Rule::       : */
                88: 9,

                /*! Conditions:: * */
                /*! Rule::       = */
                89: 7,

                /*! Conditions:: * */
                /*! Rule::       == */
                90: 60,

                /*! Conditions:: * */
                /*! Rule::       != */
                91: 61,

                /*! Conditions:: * */
                /*! Rule::       >= */
                92: 58,

                /*! Conditions:: * */
                /*! Rule::       <= */
                93: 59,

                /*! Conditions:: * */
                /*! Rule::       => */
                94: "=>",

                /*! Conditions:: * */
                /*! Rule::       -> */
                95: 36,

                /*! Conditions:: * */
                /*! Rule::       \?\. */
                96: 65,

                /*! Conditions:: * */
                /*! Rule::       \?\? */
                97: 64,

                /*! Conditions:: * */
                /*! Rule::       \+ */
                98: 20,

                /*! Conditions:: * */
                /*! Rule::       - */
                99: 22,

                /*! Conditions:: * */
                /*! Rule::       \* */
                100: 3,

                /*! Conditions:: * */
                /*! Rule::       \/ */
                101: 21,

                /*! Conditions:: * */
                /*! Rule::       \\ */
                102: "\\",

                /*! Conditions:: * */
                /*! Rule::       && */
                103: 62,

                /*! Conditions:: * */
                /*! Rule::       \|\| */
                104: 63,

                /*! Conditions:: * */
                /*! Rule::       \^ */
                105: 23,

                /*! Conditions:: * */
                /*! Rule::       ! */
                106: 17,

                /*! Conditions:: * */
                /*! Rule::       , */
                107: 6,

                /*! Conditions:: * */
                /*! Rule::       \? */
                108: 19,

                /*! Conditions:: * */
                /*! Rule::       \| */
                109: 8,

                /*! Conditions:: * */
                /*! Rule::       \.\.\. */
                110: 51,

                /*! Conditions:: * */
                /*! Rule::       \. */
                111: 10,

                /*! Conditions:: * */
                /*! Rule::       $ */
                112: 1,
            },

            rules: [
                /*   0: */ /^(?:\s+)/,
                /*   1: */ /^(?:\{%)/,
                /*   2: */ /^(?:<!--)/,
                /*   3: */ /^(?:\{#)/,
                /*   4: */ /^(?:<)/,
                /*   5: */ /^(?:\{\{)/,
                /*   6: */ /^(?:true)/,
                /*   7: */ /^(?:false)/,
                /*   8: */ /^(?:([A-Z][\w$\-]*))/,
                /*   9: */ /^(?:([$_a-z][\w$\-]*))/,
                /*  10: */ /^(?:\/>)/,
                /*  11: */ /^(?:\/)/,
                /*  12: */ /^(?:>)/,
                /*  13: */ /^(?:\{\{)/,
                /*  14: */ /^(?:\{)/,
                /*  15: */ /^(?:\})/,
                /*  16: */ /^(?:\{\{)/,
                /*  17: */ /^(?:\{%)/,
                /*  18: */ /^(?:<!--)/,
                /*  19: */ /^(?:<\/)/,
                /*  20: */ /^(?:<)/,
                /*  21: */ /^(?:\{)/,
                /*  22: */ /^(?:\})/,
                /*  23: */ /^(?:[^/<>{%}]+)/,
                /*  24: */ /^(?:import)/,
                /*  25: */ /^(?:from)/,
                /*  26: */ /^(?:as)/,
                /*  27: */ /^(?:macro)/,
                /*  28: */ /^(?:endmacro)/,
                /*  29: */ /^(?:for)/,
                /*  30: */ /^(?:endfor)/,
                /*  31: */ /^(?:if)/,
                /*  32: */ /^(?:endif)/,
                /*  33: */ /^(?:else)/,
                /*  34: */ /^(?:elseif)/,
                /*  35: */ /^(?:in)/,
                /*  36: */ /^(?:of)/,
                /*  37: */ /^(?:from)/,
                /*  38: */ /^(?:view)/,
                /*  39: */ /^(?:instanceof)/,
                /*  40: */ /^(?:this)/,
                /*  41: */ /^(?:fun)/,
                /*  42: */ /^(?:endfun)/,
                /*  43: */ /^(?:as)/,
                /*  44: */ /^(?:context)/,
                /*  45: */ /^(?:type)/,
                /*  46: */ /^(?:true)/,
                /*  47: */ /^(?:false)/,
                /*  48: */ /^(?:where)/,
                /*  49: */ /^(?:let)/,
                /*  50: */ /^(?:to)/,
                /*  51: */ /^(?:([A-Z][\w$\-]*))/,
                /*  52: */ /^(?:([$_a-z][\w$\-]*))/,
                /*  53: */ /^(?:@)/,
                /*  54: */ /^(?:=)/,
                /*  55: */ /^(?:\?)/,
                /*  56: */ /^(?:<)/,
                /*  57: */ /^(?:\{#)/,
                /*  58: */ /^(?:\{\{)/,
                /*  59: */ /^(?:%\})/,
                /*  60: */ /^(?:\{)/,
                /*  61: */ /^(?:\})/,
                /*  62: */ /^(?:\|)/,
                /*  63: */ /^(?:->)/,
                /*  64: */ /^(?:@)/,
                /*  65: */ /^(?:instanceof)/,
                /*  66: */ /^(?:true)/,
                /*  67: */ /^(?:false)/,
                /*  68: */ /^(?:if)/,
                /*  69: */ /^(?:then)/,
                /*  70: */ /^(?:else)/,
                /*  71: */ /^(?:as)/,
                /*  72: */ /^(?:([A-Z][\w$\-]*))/,
                /*  73: */ /^(?:([$_a-z][\w$\-]*))/,
                /*  74: */ /^(?:\{)/,
                /*  75: */ /^(?:\})/,
                /*  76: */ /^(?:\}\})/,
                /*  77: */ /^(?:(.|\r|\n)*?-->)/,
                /*  78: */ /^(?:(.|\r|\n)*?#\})/,
                /*  79: */ /^(?:((?:([-]?(?:[-]?([0]|((?:[1-9])(?:\d+)*)))\.(?:\d+)*(?:(?:[Ee])(?:[+-]?\d+))?)|(\.(?:\d+)(?:(?:[Ee])(?:[+-]?\d+))?)|((?:[-]?([0]|((?:[1-9])(?:\d+)*)))(?:(?:[Ee])(?:[+-]?\d+))?))|(?:[0][Xx](?:[\dA-Fa-f])+)|(?:[0](?:[0-7])+)))/,
                /*  80: */ /^(?:(("(?:([^\r"\\]+)|(\\(?:(?:(?:["'\\bfnrtv])|(?:[^\d"'\\bfnrt-vx]))|(?:(?:[1-7][0-7]{0,2}|[0-7]{2,3}))|(?:[x](?:[\dA-Fa-f]){2})|(?:[u](?:[\dA-Fa-f]){4})))|(?:\\(\r\n|\r|\n)))*")|('(?:([^\n\r'\\]+)|(\\(?:(?:(?:["'\\bfnrtv])|(?:[^\d"'\\bfnrt-vx]))|(?:(?:[1-7][0-7]{0,2}|[0-7]{2,3}))|(?:[x](?:[\dA-Fa-f]){2})|(?:[u](?:[\dA-Fa-f]){4})))|(?:\\(\r\n|\r|\n)))*')|(`(?:([^\n\r\\`]+)|(\\(?:(?:(?:["'\\bfnrtv])|(?:[^\d"'\\bfnrt-vx]))|(?:(?:[1-7][0-7]{0,2}|[0-7]{2,3}))|(?:[x](?:[\dA-Fa-f]){2})|(?:[u](?:[\dA-Fa-f]){4})))|(?:\\(\r\n|\r|\n)))*`)))/,
                /*  81: */ /^(?:>)/,
                /*  82: */ /^(?:<)/,
                /*  83: */ /^(?:\()/,
                /*  84: */ /^(?:\))/,
                /*  85: */ /^(?:\[)/,
                /*  86: */ /^(?:\])/,
                /*  87: */ /^(?:;)/,
                /*  88: */ /^(?::)/,
                /*  89: */ /^(?:=)/,
                /*  90: */ /^(?:==)/,
                /*  91: */ /^(?:!=)/,
                /*  92: */ /^(?:>=)/,
                /*  93: */ /^(?:<=)/,
                /*  94: */ /^(?:=>)/,
                /*  95: */ /^(?:->)/,
                /*  96: */ /^(?:\?\.)/,
                /*  97: */ /^(?:\?\?)/,
                /*  98: */ /^(?:\+)/,
                /*  99: */ /^(?:-)/,
                /* 100: */ /^(?:\*)/,
                /* 101: */ /^(?:\/)/,
                /* 102: */ /^(?:\\)/,
                /* 103: */ /^(?:&&)/,
                /* 104: */ /^(?:\|\|)/,
                /* 105: */ /^(?:\^)/,
                /* 106: */ /^(?:!)/,
                /* 107: */ /^(?:,)/,
                /* 108: */ /^(?:\?)/,
                /* 109: */ /^(?:\|)/,
                /* 110: */ /^(?:\.\.\.)/,
                /* 111: */ /^(?:\.)/,
                /* 112: */ /^(?:$)/,
                /* 113: */ /^(?:.)/,
            ],

            conditions: {
                CHILDREN: {
                    rules: [
                        0, 16, 17, 18, 19, 20, 21, 22, 23, 79, 80, 81, 82, 83,
                        84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
                        98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
                        109, 110, 111, 112,
                    ],

                    inclusive: false,
                },

                HTMLCOMMENT: {
                    rules: [
                        0, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
                        91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
                        104, 105, 106, 107, 108, 109, 110, 111, 112,
                    ],

                    inclusive: false,
                },

                WMLCOMMENT: {
                    rules: [
                        0, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
                        91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
                        104, 105, 106, 107, 108, 109, 110, 111, 112,
                    ],

                    inclusive: false,
                },

                CONTROL: {
                    rules: [
                        0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
                        37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                        51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 79, 80, 81,
                        82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
                        96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
                        108, 109, 110, 111, 112,
                    ],

                    inclusive: false,
                },

                INTERPOLATION: {
                    rules: [
                        0, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
                        75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
                        91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
                        104, 105, 106, 107, 108, 109, 110, 111, 112,
                    ],

                    inclusive: false,
                },

                CONTROL_CHILD: {
                    rules: [
                        0, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
                        92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
                        105, 106, 107, 108, 109, 110, 111, 112,
                    ],

                    inclusive: false,
                },

                ELEMENT: {
                    rules: [
                        0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 79, 80, 81, 82,
                        83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
                        97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
                        109, 110, 111, 112,
                    ],

                    inclusive: false,
                },

                INITIAL: {
                    rules: [
                        0, 1, 2, 3, 4, 5, 79, 80, 81, 82, 83, 84, 85, 86, 87,
                        88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
                        101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
                        112, 113,
                    ],

                    inclusive: true,
                },
            },
        };

        return lexer;
    })();
    parser.lexer = lexer;

    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;

    return new Parser();
})();

if (typeof require !== "undefined" && typeof exports !== "undefined") {
    exports.parser = generated;
    exports.Parser = generated.Parser;
    exports.parse = function () {
        return generated.parse.apply(generated, arguments);
    };
}
