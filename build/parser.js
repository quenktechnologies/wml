/* parser generated by jison 0.4.16 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
"use strict";

var parser = (function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v);return _o;
    },
        $V0 = [1, 8],
        $V1 = [1, 7],
        $V2 = [1, 11],
        $V3 = [2, 25],
        $V4 = [1, 18],
        $V5 = [6, 21, 24, 37, 39],
        $V6 = [10, 21],
        $V7 = [23, 25],
        $V8 = [2, 32],
        $V9 = [1, 31],
        $Va = [24, 39],
        $Vb = [21, 24, 37, 39],
        $Vc = [11, 23, 25],
        $Vd = [11, 23, 25, 29];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "root": 3, "tag": 4, "root_option0": 5, "EOF": 6, "imports": 7, "root_option1": 8, "import": 9, "IMPORT": 10, "WS": 11, "NAME": 12, "FROM": 13, "STRING_LITERAL": 14, ";": 15, "import_option0": 16, "tag_start": 17, "children": 18, "tag_end": 19, "empty_tag": 20, "<": 21, "attributes": 22, ">": 23, "</": 24, "/>": 25, "attribute": 26, "attributes_option0": 27, "attribute_name": 28, "=": 29, "string_literal": 30, "expression": 31, ":": 32, "{{": 33, "EXPRESSION": 34, "}}": 35, "chardata": 36, "CDATA": 37, "for_loop": 38, "{%": 39, "FOR": 40, "IN": 41, "%}": 42, "ENDFOR": 43, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 6: "EOF", 10: "IMPORT", 11: "WS", 12: "NAME", 13: "FROM", 14: "STRING_LITERAL", 15: ";", 21: "<", 23: ">", 24: "</", 25: "/>", 29: "=", 32: ":", 33: "{{", 34: "EXPRESSION", 35: "}}", 37: "CDATA", 39: "{%", 40: "FOR", 41: "IN", 42: "%}", 43: "ENDFOR" },
        productions_: [0, [3, 3], [3, 4], [7, 1], [7, 2], [9, 9], [4, 3], [4, 1], [17, 4], [19, 3], [20, 4], [22, 3], [22, 1], [26, 3], [26, 3], [26, 1], [28, 1], [28, 3], [30, 1], [31, 3], [36, 1], [38, 10], [18, 2], [18, 2], [18, 2], [18, 0], [5, 0], [5, 1], [8, 0], [8, 1], [16, 0], [16, 1], [27, 0], [27, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, /* action[1] */$$, /* vstack */_$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    this.$ = {
                        type: 'root',
                        tree: $$[$0 - 2]
                    };return this.$;
                    break;
                case 2:
                    this.$ = {
                        type: 'root',
                        imports: $$[$0 - 3],
                        tree: $$[$0 - 2]
                    };return this.$;
                    break;
                case 3:
                    this.$ = [$$[$0]];
                    break;
                case 4:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 5:
                    this.$ = {
                        type: 'import',
                        id: $$[$0 - 6],
                        src: $$[$0 - 2],
                        location: {
                            line: this._$.first_line,
                            column: this._$.first_column
                        } };
                    break;
                case 6:

                    $$[$0 - 2].children = $$[$0 - 2].children.concat($$[$0 - 1]);
                    this.$ = $$[$0 - 2];

                    break;
                case 7:
                    this.$ = $$[$0];
                    break;
                case 8:
                    this.$ = {
                        type: 'tag',
                        name: $$[$0 - 2],
                        attributes: $$[$0 - 1],
                        children: [],
                        location: {
                            line: this._$.first_line,
                            column: this._$.first_column
                        } };
                    break;
                case 9:case 19:
                    this.$ = $$[$0 - 1];
                    break;
                case 10:
                    this.$ = {
                        type: 'tag',
                        name: $$[$0 - 2],
                        attributes: $$[$0 - 1],
                        children: [],
                        location: {
                            line: this._$.first_line,
                            column: this._$.first_column
                        } };
                    break;
                case 11:
                    this.$ = $$[$0].concat($$[$0 - 1]);
                    break;
                case 12:case 25:
                    this.$ = [];
                    break;
                case 13:
                    this.$ = {
                        type: 'attribute',
                        namespace: $$[$0 - 2].namespace,
                        name: $$[$0 - 2].name,
                        value: $$[$0],
                        location: {
                            line: this._$.first_line,
                            column: this._$.first_column
                        } };
                    break;
                case 14:
                    this.$ = {
                        type: 'attribute-expression',
                        namespace: $$[$0 - 2].namespace,
                        name: $$[$0 - 2].name,
                        value: $$[$0],
                        location: {
                            line: this._$.first_line,
                            column: this._$.first_column
                        } };
                    break;
                case 15:
                    this.$ = {
                        type: 'attribute-expression',
                        namespace: $$[$0].namespace,
                        name: $$[$0].name,
                        value: true,
                        location: {
                            line: this._$.first_line,
                            column: this._$.first_column
                        } };
                    break;
                case 16:
                    this.$ = { namespace: '', name: $$[$0] };
                    break;
                case 17:
                    this.$ = { namespace: $$[$0 - 2], name: $$[$0] };
                    break;
                case 18:
                    this.$ = $$[$0].substring(1, $$[$0].length - 1);
                    break;
                case 20:
                    this.$ = {
                        type: 'text',
                        value: $$[$0],
                        location: {
                            line: this._$.first_line,
                            column: this._$.first_column
                        } };
                    break;
                case 21:
                    this.$ = { type: 'for-loop', body: $$[$0 - 3] };
                    break;
                case 22:case 23:case 24:

                    var childs = [];
                    childs.push($$[$0 - 1]);
                    this.$ = childs.concat($$[$0]);

                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 7: 3, 9: 6, 10: $V0, 17: 4, 20: 5, 21: $V1 }, { 1: [3] }, { 5: 9, 6: [2, 26], 36: 10, 37: $V2 }, { 4: 12, 9: 13, 10: $V0, 17: 4, 20: 5, 21: $V1 }, { 4: 16, 17: 4, 18: 14, 20: 5, 21: $V1, 24: $V3, 36: 15, 37: $V2, 38: 17, 39: $V4 }, o($V5, [2, 7]), o($V6, [2, 3]), { 12: [1, 19] }, { 11: [1, 20] }, { 6: [1, 21] }, { 6: [2, 27] }, o($V5, [2, 20]), { 6: [2, 28], 8: 22, 36: 23, 37: $V2 }, o($V6, [2, 4]), { 19: 24, 24: [1, 25] }, { 4: 16, 17: 4, 18: 26, 20: 5, 21: $V1, 24: $V3, 36: 15, 37: $V2, 38: 17, 39: $V4 }, { 4: 16, 17: 4, 18: 27, 20: 5, 21: $V1, 24: $V3, 36: 15, 37: $V2, 38: 17, 39: $V4 }, { 4: 16, 17: 4, 18: 28, 20: 5, 21: $V1, 24: $V3, 36: 15, 37: $V2, 38: 17, 39: $V4 }, { 40: [1, 29] }, o($V7, $V8, { 22: 30, 27: 32, 11: $V9 }), { 12: [1, 33] }, { 1: [2, 1] }, { 6: [1, 34] }, { 6: [2, 29] }, o($V5, [2, 6]), { 12: [1, 35] }, o($Va, [2, 22]), o($Va, [2, 23]), o($Va, [2, 24]), { 12: [1, 36] }, { 23: [1, 37], 25: [1, 38] }, o($V7, [2, 33], { 26: 39, 28: 40, 12: [1, 41] }), o($V7, [2, 12]), { 11: [1, 42] }, { 1: [2, 2] }, { 23: [1, 43] }, { 41: [1, 44] }, o($Vb, [2, 8]), o($V5, [2, 10]), o($V7, $V8, { 27: 32, 22: 45, 11: $V9 }), o($Vc, [2, 15], { 29: [1, 46] }), o($Vd, [2, 16], { 32: [1, 47] }), { 13: [1, 48] }, o($V5, [2, 9]), { 34: [1, 49] }, o($V7, [2, 11]), { 14: [1, 52], 30: 50, 31: 51, 33: [1, 53] }, { 12: [1, 54] }, { 11: [1, 55] }, { 42: [1, 56] }, o($Vc, [2, 13]), o($Vc, [2, 14]), o($Vc, [2, 18]), { 34: [1, 57] }, o($Vd, [2, 17]), { 14: [1, 58] }, { 4: 16, 17: 4, 18: 59, 20: 5, 21: $V1, 36: 15, 37: $V2, 38: 17, 39: $V4 }, { 35: [1, 60] }, { 15: [1, 61] }, { 39: [1, 62] }, o($Vc, [2, 19]), o($V6, [2, 30], { 16: 63, 11: [1, 64] }), { 43: [1, 65] }, o($V6, [2, 5]), o($V6, [2, 31]), { 42: [1, 66] }, o($Vb, [2, 21])],
        defaultActions: { 10: [2, 27], 21: [2, 1], 23: [2, 29], 34: [2, 2] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = new Error();

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                    return false;
                                }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "flex": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return 11;
                        break;
                    case 1:
                        return 10;
                        break;
                    case 2:
                        return 13;
                        break;
                    case 3:
                        return 32;
                        break;
                    case 4:
                        this.begin('INITIAL');return 24;
                        break;
                    case 5:
                        this.begin('INITIAL');return 21;
                        break;
                    case 6:
                        this.begin('CHARDATA');return 25;
                        break;
                    case 7:
                        this.begin('CHARDATA');return 23;
                        break;
                    case 8:
                        this.begin('INITIAL');return 37;
                        break;
                    case 9:
                        this.begin('JSEXPR');return 33;
                        break;
                    case 10:
                        this.begin('INITIAL');return 35;
                        break;
                    case 11:
                        return 34;
                        break;
                    case 12:
                        this.begin('CSTRUCT');return 39;
                        break;
                    case 13:
                        return 40;
                        break;
                    case 14:
                        return 41;
                        break;
                    case 15:
                        return 43;
                        break;
                    case 16:
                        this.begin('INITIAL');return 42;
                        break;
                    case 17:
                        return 29;
                        break;
                    case 18:
                        return 15;
                        break;
                    case 19:
                        return 12;
                        break;
                    case 20:
                        return 14;
                        break;
                    case 21:
                        return 6;
                        break;
                    case 22:
                        console.log(yy_.yytext);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:(import\b))/, /^(?:(from\b))/, /^(?::)/, /^(?:<\/)/, /^(?:<)/, /^(?:\/>)/, /^(?:>)/, /^(?:[^<>]+)/, /^(?:\{\{)/, /^(?:\}\})/, /^(?:[^\{\}]+)/, /^(?:\{%)/, /^(?:for)/, /^(?:in)/, /^(?:endfor)/, /^(?:%\})/, /^(?:=)/, /^(?:;)/, /^(?:([a-zA-Z_][-a-zA-Z0-9_.]*))/, /^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]{HexDigit}{2})|([u]{HexDigit}{4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]{HexDigit}{2})|([u]{HexDigit}{4})))|(\\(\r\n|\r|\n)))*')))/, /^(?:$)/, /^(?:.)/],
            conditions: { "CHARDATA": { "rules": [4, 5, 8, 21], "inclusive": false }, "JSEXPR": { "rules": [4, 5, 10, 11, 21], "inclusive": false }, "CSTRUCT": { "rules": [4, 5, 11, 13, 14, 15, 16, 21], "inclusive": false }, "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 17, 18, 19, 20, 21, 22], "inclusive": true } }
        };
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
})();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function () {
        return parser.parse.apply(parser, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
//# sourceMappingURL=data:application/json;base64,