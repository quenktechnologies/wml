'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _WMLTree = require('../WMLTree');

var _WMLTree2 = _interopRequireDefault(_WMLTree);

jest.autoMockOff();

var view;
var node;

function make() {

    return {

        onDOM: function onDOM(attrs, children) {

            var div = document.createElement('div');

            div.appendChild(document.createTextNode('Header'));
            Object.keys(attrs).forEach(function (k) {
                return div.setAttribute(k, attrs[k]);
            });

            children.forEach(function (c) {
                return div.appendChild(c.toDOMNode());
            });

            return div;
        }

    };
}

make.create = function (attrs) {
    return make(attrs.type);
};

beforeEach(function () {
    view = null;
});

describe('WMLTree', function () {

    describe('render', function () {

        it('should render a pure html view', function () {

            node = document.createElement('div');

            var heading = ['div', {
                'class': 'panel-heading'
            }, ['Heading']];

            var body = ['div', {
                'class': 'panel-body'
            }, [['span', {}, ['Body']], 'After']];

            view = function () {
                return ['div', {
                    'class': 'panel panel-default'
                }, [heading, body]];
            };

            new _WMLTree2['default'](view).render(node);

            expect(node.innerHTML).toBe('<div class="panel panel-default">' + '<div class="panel-heading">Heading</div>' + '<div class="panel-body"><span>Body</span>After</div></div>');
        });

        it('should render views from widgets', function () {

            var heading = [make, {
                type: 'div',
                'class': 'panel-heading'
            }, ['Heading']];

            var body = [make, {
                type: 'div',
                'class': 'panel-body'
            }, ['Body']];

            view = function () {
                return ['div', {
                    'class': 'panel panel-default'
                }, [heading, body]];
            };

            node = document.createElement('div');
            new _WMLTree2['default'](view).render(node);

            expect(node.innerHTML).toBe('<div class="panel panel-default">' + '<div type="div" class="panel-heading">HeaderHeading</div>' + '<div type="div" class="panel-body">HeaderBody</div></div>');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL19fdGVzdHNfXy9XTUxUcmVlX3Rlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozt1QkFFb0IsWUFBWTs7OztBQUZoQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7O0FBSW5CLElBQUksSUFBSSxDQUFDO0FBQ1QsSUFBSSxJQUFJLENBQUM7O0FBRVQsU0FBUyxJQUFJLEdBQUc7O0FBRVosV0FBTzs7QUFFSCxhQUFLLEVBQUEsZUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFFOztBQUVuQixnQkFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFeEMsZUFBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDbkQsa0JBQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQzt1QkFDeEIsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQUEsQ0FBQyxDQUFDOztBQUVuQyxvQkFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7dUJBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7YUFBQSxDQUFDLENBQUM7O0FBRXRELG1CQUFPLEdBQUcsQ0FBQztTQUVkOztLQUVKLENBQUM7Q0FFTDs7QUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLFVBQVMsS0FBSyxFQUFFO0FBQzFCLFdBQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUMzQixDQUFBOztBQUVELFVBQVUsQ0FBQyxZQUFXO0FBQ2xCLFFBQUksR0FBRyxJQUFJLENBQUM7Q0FDZixDQUFDLENBQUM7O0FBRUgsUUFBUSxDQUFDLFNBQVMsRUFBRSxZQUFXOztBQUUzQixZQUFRLENBQUMsUUFBUSxFQUFFLFlBQVc7O0FBRTFCLFVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxZQUFXOztBQUU1QyxnQkFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRXJDLGdCQUFJLE9BQU8sR0FBRyxDQUFDLEtBQUssRUFBRTtBQUNkLHlCQUFPLGVBQWU7YUFDekIsRUFDRCxDQUFDLFNBQVMsQ0FBQyxDQUNkLENBQUM7O0FBRUYsZ0JBQUksSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFO0FBQ1gseUJBQU8sWUFBWTthQUN0QixFQUNELENBQ0ksQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUNQLENBQUMsTUFBTSxDQUFDLENBQ1gsRUFBRSxPQUFPLENBQ2IsQ0FDSixDQUFDOztBQUVGLGdCQUFJLEdBQUc7dUJBQU0sQ0FBQyxLQUFLLEVBQUU7QUFDYiw2QkFBTyxxQkFBcUI7aUJBQy9CLEVBQ0QsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQ2xCO2FBQUEsQ0FBQzs7QUFFRixBQUFDLHFDQUFZLElBQUksQ0FBQyxDQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFakMsa0JBQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxHQUMzRCwwQ0FBMEMsR0FDMUMsNERBQTRELENBQUMsQ0FBQztTQUVyRSxDQUFDLENBQUM7O0FBRUgsVUFBRSxDQUFDLGtDQUFrQyxFQUFFLFlBQVc7O0FBRTlDLGdCQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksRUFBRTtBQUNiLG9CQUFJLEVBQUUsS0FBSztBQUNYLHlCQUFPLGVBQWU7YUFDekIsRUFDRCxDQUFDLFNBQVMsQ0FBQyxDQUNkLENBQUM7O0FBRUYsZ0JBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFO0FBQ1Ysb0JBQUksRUFBRSxLQUFLO0FBQ1gseUJBQU8sWUFBWTthQUN0QixFQUNELENBQUMsTUFBTSxDQUFDLENBQ1gsQ0FBQzs7QUFFRixnQkFBSSxHQUFHO3VCQUFNLENBQUMsS0FBSyxFQUFFO0FBQ2IsNkJBQU8scUJBQXFCO2lCQUMvQixFQUNELENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUNsQjthQUFBLENBQUM7O0FBRUYsZ0JBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLEFBQUMscUNBQVksSUFBSSxDQUFDLENBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUVqQyxrQkFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsbUNBQW1DLEdBQzNELDJEQUEyRCxHQUMzRCwyREFBMkQsQ0FBQyxDQUFDO1NBRXBFLENBQUMsQ0FBQztLQUVOLENBQUMsQ0FBQztDQUVOLENBQUMsQ0FBQyIsImZpbGUiOiJXTUxUcmVlX3Rlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJqZXN0LmF1dG9Nb2NrT2ZmKCk7XG5cbmltcG9ydCBXTUxUcmVlIGZyb20gJy4uL1dNTFRyZWUnO1xuXG52YXIgdmlldztcbnZhciBub2RlO1xuXG5mdW5jdGlvbiBtYWtlKCkge1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgICBvbkRPTShhdHRycywgY2hpbGRyZW4pIHtcblxuICAgICAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ0hlYWRlcicpKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGsgPT5cbiAgICAgICAgICAgICAgICBkaXYuc2V0QXR0cmlidXRlKGssIGF0dHJzW2tdKSk7XG5cbiAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goYyA9PiBkaXYuYXBwZW5kQ2hpbGQoYy50b0RPTU5vZGUoKSkpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGl2O1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbn1cblxubWFrZS5jcmVhdGUgPSBmdW5jdGlvbihhdHRycykge1xuICAgIHJldHVybiBtYWtlKGF0dHJzLnR5cGUpO1xufVxuXG5iZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZpZXcgPSBudWxsO1xufSk7XG5cbmRlc2NyaWJlKCdXTUxUcmVlJywgZnVuY3Rpb24oKSB7XG5cbiAgICBkZXNjcmliZSgncmVuZGVyJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCByZW5kZXIgYSBwdXJlIGh0bWwgdmlldycsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgICAgIHZhciBoZWFkaW5nID0gWydkaXYnLCB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAncGFuZWwtaGVhZGluZydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFsnSGVhZGluZyddXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICB2YXIgYm9keSA9IFsnZGl2Jywge1xuICAgICAgICAgICAgICAgICAgICBjbGFzczogJ3BhbmVsLWJvZHknXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgWydCb2R5J11cbiAgICAgICAgICAgICAgICAgICAgXSwgJ0FmdGVyJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIHZpZXcgPSAoKSA9PiBbJ2RpdicsIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdwYW5lbCBwYW5lbC1kZWZhdWx0J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW2hlYWRpbmcsIGJvZHldXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAobmV3IFdNTFRyZWUodmlldykpLnJlbmRlcihub2RlKTtcblxuICAgICAgICAgICAgZXhwZWN0KG5vZGUuaW5uZXJIVE1MKS50b0JlKCc8ZGl2IGNsYXNzPVwicGFuZWwgcGFuZWwtZGVmYXVsdFwiPicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwicGFuZWwtaGVhZGluZ1wiPkhlYWRpbmc8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInBhbmVsLWJvZHlcIj48c3Bhbj5Cb2R5PC9zcGFuPkFmdGVyPC9kaXY+PC9kaXY+Jyk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCByZW5kZXIgdmlld3MgZnJvbSB3aWRnZXRzJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIHZhciBoZWFkaW5nID0gW21ha2UsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAncGFuZWwtaGVhZGluZydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFsnSGVhZGluZyddXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICB2YXIgYm9keSA9IFttYWtlLCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICBjbGFzczogJ3BhbmVsLWJvZHknXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbJ0JvZHknXVxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgdmlldyA9ICgpID0+IFsnZGl2Jywge1xuICAgICAgICAgICAgICAgICAgICBjbGFzczogJ3BhbmVsIHBhbmVsLWRlZmF1bHQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbaGVhZGluZywgYm9keV1cbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIChuZXcgV01MVHJlZSh2aWV3KSkucmVuZGVyKG5vZGUpO1xuXG4gICAgICAgICAgICBleHBlY3Qobm9kZS5pbm5lckhUTUwpLnRvQmUoJzxkaXYgY2xhc3M9XCJwYW5lbCBwYW5lbC1kZWZhdWx0XCI+JyArXG4gICAgICAgICAgICAgICAgJzxkaXYgdHlwZT1cImRpdlwiIGNsYXNzPVwicGFuZWwtaGVhZGluZ1wiPkhlYWRlckhlYWRpbmc8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiB0eXBlPVwiZGl2XCIgY2xhc3M9XCJwYW5lbC1ib2R5XCI+SGVhZGVyQm9keTwvZGl2PjwvZGl2PicpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cbn0pO1xuIl19